{
    "info": {
        "_postman_id": "2c43b0a1-7b5f-4907-8657-c146b7c6469e",
        "name": "CTOP-452-Complaint_Request processed",
        "description": "# Introduction\nWhat does your API do?\n\n# Overview\nThings that the developers should know about\n\n# Authentication\nWhat is the preferred way of using the API?\n\n# Error Codes\nWhat errors and status codes can a user expect?\n\n# Rate limit\nIs there a limit to the number of requests a user can send?",
        "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
        {
            "name": "DT-A-01",
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "request": {
                "method": "GET",
                "header": [
                    {
                        "key": "X-BFO-Authorization",
                        "value": "{{bfo_token}}",
                        "type": "text"
                    },
                    {
                        "key": "Authorization",
                        "value": "{{token}}",
                        "type": "text"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "https://api.qa.se.com/v1/customer-support/complaint-request/complaint-requests?caseId=5007b00000CM0a6AAD&status=Open",
                    "protocol": "https",
                    "host": [
                        "api",
                        "qa",
                        "se",
                        "com"
                    ],
                    "path": [
                        "v1",
                        "customer-support",
                        "complaint-request",
                        "complaint-requests"
                    ],
                    "query": [
                        {
                            "key": "caseId",
                            "value": "5007b00000CM0a6AAD"
                        },
                        {
                            "key": "status",
                            "value": "Open"
                        }
                    ]
                }
            },
            "response": [],
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "exec": [
                            ""
                        ],
                        "type": "text/javascript"
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "pm.test(\"Status test - Positve Response Check\", function () { pm.response.to.have.status(200); });"
                        ],
                        "type": "text/javascript"
                    }
                }
            ]
        },
        {
            "name": "DT-A-02",
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "request": {
                "method": "GET",
                "header": [
                    {
                        "key": "X-BFO-Authorization",
                        "value": "{{bfo_token}}",
                        "type": "text"
                    },
                    {
                        "key": "Authorization",
                        "value": "{{token}}",
                        "type": "text"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "https://api.qa.se.com/v1/customer-support/complaint-request/complaint-requests?caseId=5007b00000CM0a6AAD&status=Open",
                    "protocol": "https",
                    "host": [
                        "api",
                        "qa",
                        "se",
                        "com"
                    ],
                    "path": [
                        "v1",
                        "customer-support",
                        "complaint-request",
                        "complaint-requests"
                    ],
                    "query": [
                        {
                            "key": "caseId",
                            "value": "5007b00000CM0a6AAD"
                        },
                        {
                            "key": "status",
                            "value": "Open"
                        }
                    ]
                }
            },
            "response": [],
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "exec": [
                            ""
                        ],
                        "type": "text/javascript"
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "pm.test(\"Status test - Positve Response Check\", function () { pm.response.to.have.status(200); });\r",
                            "\r",
                            "\r",
                            "\r",
                            "pm.test(\"Response time is less than 55s\", function () { \r",
                            "\r",
                            "    pm.expect(pm.response.responseTime).to.be.below(55000); \r",
                            "\r",
                            "    // Default APIGEE timeout is 55 sec\r",
                            "\r",
                            "    });\r",
                            "\r",
                            "\r",
                            "\r",
                            "pm.test(\"response must be valid and have a body\", function () {\r",
                            "\r",
                            "     pm.response.to.have.status('OK');\r",
                            "\r",
                            "     pm.response.to.be.withBody;\r",
                            "\r",
                            "     pm.response.to.be.json;\r",
                            "\r",
                            "     pm.response.to.not.have.jsonBody(\"error\");\r",
                            "\r",
                            "     \r",
                            "\r",
                            "});\r",
                            "\r",
                            "\r",
                            "\r",
                            "\r",
                            "var schema ={\n \"type\": \"array\",\n \"items\": {\n  \"title\": \"ComplaintReqData\",\n  \"type\": \"object\",\n  \"description\": \"This response body contains complaint request data that the API returns to the consumer.\",\n  \"x-tags\": [\n   \"ComplaintRequest\"\n  ],\n  \"x-examples\": {},\n  \"properties\": {\n   \"crId\": {\n    \"type\":[\"string\",\"null\"],\n    \"description\": \"Represents the CR id\",\n    \"maxLength\": 18\n   },\n   \"crName\": {\n    \"type\":[\"string\",\"null\"],\n    \"description\": \"Represents the CR name\"\n   },\n   \"status\": {\n    \"type\":[\"string\",\"null\"],\n    \"description\": \"Represents the CR status\"\n   },\n   \"complaintStatus\": {\n    \"type\":[\"string\",\"null\"],\n    \"description\": \"Represents the CR second status\"\n   },\n   \"category\": {\n    \"type\":[\"string\",\"null\"],\n    \"description\": \"Represents the CR category\"\n   },\n   \"reason\": {\n    \"type\":[\"string\",\"null\"],\n    \"description\": \"Represents the CR reason\"\n   },\n   \"comments\": {\n    \"type\":[\"string\",\"null\"],\n    \"description\": \"represents the CR comments\"\n   },\n   \"createdDate\": {\n    \"type\":[\"string\",\"null\"],\n    \"description\": \"Represents the CR Created date\"\n   },\n   \"dueDate\": {\n    \"type\":[\"string\",\"null\"],\n    \"description\": \"Represents the CR due date\"\n   },\n   \"lastModifiedDate\": {\n    \"type\":[\"string\",\"null\"],\n    \"description\": \"Represents the CR last modification date\"\n   },\n   \"lastActivityDate\": {\n    \"type\":[\"string\",\"null\"],\n    \"description\": \"Represents the CR last activity date\"\n   },\n   \"salesOrderNumber\": {\n    \"type\":[\"string\",\"null\"],\n    \"description\": \"Represents the Schneider sales order number\"\n   },\n   \"salesOrderLineNumber\": {\n    \"type\":[\"string\",\"null\"],\n    \"description\": \"Represents the Schneider sales order line number\"\n   },\n   \"comRefOrderedReporting\": {\n    \"type\":[\"string\",\"null\"],\n    \"description\": \"Represents the Commercial Reference of the product ordered\",\n    \"maxLength\": 30\n   },\n   \"accountableOrgId\": {\n    \"type\":[\"string\",\"null\"],\n    \"description\": \"Represents the Id of the CR accountable organization\",\n    \"maxLength\": 18\n   },\n   \"accountableOrgName\": {\n    \"type\":[\"string\",\"null\"],\n    \"description\": \"Represents the name of the CR accountable organization\"\n   },\n   \"reportingOrgId\": {\n    \"type\":[\"string\",\"null\"],\n    \"description\": \"Represents the Id of the CR reporting / detection entity (Organization which reports the CR)\",\n    \"maxLength\": 18\n   },\n   \"reportingOrgName\": {\n    \"type\":[\"string\",\"null\"],\n    \"description\": \"Represents the name of the CR reporting / detection entity (Organization which reports the CR)\"\n   },\n   \"orgCountry\": {\n    \"type\":[\"string\",\"null\"],\n    \"description\": \"Represents the name of the organization country\"\n   },\n   \"recordType\": {\n    \"type\":[\"string\",\"null\"],\n    \"description\": \"Represents the record type name of the CR\"\n   },\n   \"description\": {\n    \"type\":[\"string\",\"null\"],\n    \"description\": \"Represents the CR description of the issue (additional relevant info on CR)\",\n    \"minLength\": 0,\n    \"maxLength\": 500\n   },\n   \"caseId\": {\n    \"type\":[\"string\",\"null\"],\n    \"description\": \"Represents the ID of the case linked to the complaint request\"\n   }\n  }\n }\n} ;\r",
                            "\r",
                            "   \r",
                            "\r",
                            "   \r",
                            "\r",
                            "pm.test('Schema is valid', function() {\r",
                            "\r",
                            "  //pm.expect(tv4.validate(pm.response.json, schema)).to.be.true;\r",
                            "\r",
                            "  pm.response.to.have.jsonSchema(schema);\r",
                            "\r",
                            "});\r",
                            "\r",
                            "\r",
                            "\r",
                            "\r",
                            "\r",
                            "\r",
                            "\r",
                            "pm.test(\"Content-Type header is present in response\", () => {\r",
                            "\r",
                            "  pm.response.to.have.header(\"Content-Type\");\r",
                            "\r",
                            "});"
                        ],
                        "type": "text/javascript"
                    }
                }
            ]
        },
        {
            "name": "DT-A-03",
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "request": {
                "method": "GET",
                "header": [
                    {
                        "key": "X-BFO-Authorization",
                        "value": "{{bfo_token}}",
                        "type": "text"
                    },
                    {
                        "key": "Authorization",
                        "value": "{{token}}",
                        "type": "text"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "https://api.qa.se.com/v1/customer-support/complaint-request/complaint-requests?caseId=5007b00000CM0a6AAD&status=Open",
                    "protocol": "https",
                    "host": [
                        "api",
                        "qa",
                        "se",
                        "com"
                    ],
                    "path": [
                        "v1",
                        "customer-support",
                        "complaint-request",
                        "complaint-requests"
                    ],
                    "query": [
                        {
                            "key": "caseId",
                            "value": "5007b00000CM0a6AAD"
                        },
                        {
                            "key": "status",
                            "value": "Open"
                        }
                    ]
                }
            },
            "response": [],
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "pm.test(\"Status test - Mandatory Field Check\", function () { pm.response.to.have.status(400); });\r",
                            ""
                        ],
                        "type": "text/javascript"
                    }
                }
            ]
        },
        {
            "name": "DT-A-04",
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "request": {
                "method": "GET",
                "header": [
                    {
                        "key": "X-BFO-Authorization",
                        "value": "{{bfo_token}}",
                        "type": "text"
                    },
                    {
                        "key": "Authorization",
                        "value": "{{token}}",
                        "type": "text"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "https://api.qa.se.com/v1/customer-support/complaint-request/complaint-requests?caseId=5007b00000CM0a6AAD&status=Open",
                    "protocol": "https",
                    "host": [
                        "api",
                        "qa",
                        "se",
                        "com"
                    ],
                    "path": [
                        "v1",
                        "customer-support",
                        "complaint-request",
                        "complaint-requests"
                    ],
                    "query": [
                        {
                            "key": "caseId",
                            "value": "5007b00000CM0a6AAD"
                        },
                        {
                            "key": "status",
                            "value": "Open"
                        }
                    ]
                }
            },
            "response": [],
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "pm.test(\"Not failing\", function () {\r",
                            "    pm.expect(true).to.eql(false);\r",
                            "});\r",
                            "//difference between Not failing and unexpexted error code recieved -- Not failing means that on passing incorrect paramters still the backend is working fine but unexpected error code means that originally we expected X but instead from backend we got Y.\r",
                            "\r",
                            "// remove mandatory fields -- error should come but is not.\r",
                            "//Backend should throw error when mandatory fields are not passed -- giving 200 OK\r",
                            "// example -- \"salesDocumentType\": \"ZCV\" is mandatory field for the backend is not being passed , still the bakend is giving response."
                        ],
                        "type": "text/javascript"
                    }
                }
            ]
        },
        {
            "name": "DT-A-05",
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "request": {
                "method": "GET",
                "header": [
                    {
                        "key": "X-BFO-Authorization",
                        "value": "{{bfo_token}}",
                        "type": "text"
                    },
                    {
                        "key": "Authorization",
                        "value": "{{token}}",
                        "type": "text"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "https://api.qa.se.com/v1/customer-support/complaint-request/complaint-requests?caseId=5007b00000CM0a6AAD&status=Open",
                    "protocol": "https",
                    "host": [
                        "api",
                        "qa",
                        "se",
                        "com"
                    ],
                    "path": [
                        "v1",
                        "customer-support",
                        "complaint-request",
                        "complaint-requests"
                    ],
                    "query": [
                        {
                            "key": "caseId",
                            "value": "5007b00000CM0a6AAD"
                        },
                        {
                            "key": "status",
                            "value": "Open"
                        }
                    ]
                }
            },
            "response": [],
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "pm.test(\"Status Test - Expected Error code\", function () {\r",
                            "    pm.expect(pm.response.code).to.equal(400);\r",
                            "});\r",
                            "\r",
                            "//BSL Service -- On removing mandatory fields backend returning 500 instead of 400 Bad Request.\r",
                            "\r",
                            "//difference between Not failing and unexpexted error code recieved -- Not failing means that on passing incorrect paramters still the backend is working fine but unexpected error code means that originally we expected X but instead from backend we got Y."
                        ],
                        "type": "text/javascript"
                    }
                }
            ]
        },
        {
            "name": "DT-B-01",
            "request": {
                "method": "PATCH",
                "header": [
                    {
                        "key": "X-BFO-Authorization",
                        "value": "{{bfo_token}}",
                        "type": "text"
                    },
                    {
                        "key": "Authorization",
                        "value": "{{token}}",
                        "type": "text"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "[\r\n {\r\n    \"crId\": \"a8s120000000xiDAAQ\",\r\n     \"answerComment\": \"update comment\",\r\n     \"status\": \"Closed\",\r\n    \"issueOwner\": \"SESA368797\",\r\n     \"nameOfTheForwarder\": \"TNTT-FTL\",\r\n    \"shippingLocationShippedFrom\": \"HA-S3\",\r\n    \"confirmationDate\": \"2021-01-01\",\r\n    \"physicalLocationOfParcel\": \"NEWLOG\",\r\n    \"orderlinePickedBy\": \"Hanwei ZHANG\",\r\n    \"storageBinLocation\": \"R04-16-A3D\",\r\n    \"pickArea\": \"(AWF - casual employee)\",\r\n    \"boxType\": \"CN\",\r\n    \"internalInformationNeededFrom\": \"02:12:44\",\r\n    \"weightStatistical\": \"15.180\",\r\n    \"weightActualNetWeight\": \"14.432\",\r\n\r\n    \"numberOfLinesOnPickOrder\": 10,\r\n    \"resultOfCheck\": \"AWF\"\r\n  }\r\n]",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "https://api.qa.se.com/v1/customer-support/complaint-request/complaint-requests",
                    "protocol": "https",
                    "host": [
                        "api",
                        "qa",
                        "se",
                        "com"
                    ],
                    "path": [
                        "v1",
                        "customer-support",
                        "complaint-request",
                        "complaint-requests"
                    ]
                }
            },
            "response": [],
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "exec": [
                            ""
                        ],
                        "type": "text/javascript"
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "pm.test(\"Status test - Positve Response Check\", function () { pm.response.to.have.status(200); });"
                        ],
                        "type": "text/javascript"
                    }
                }
            ]
        },
        {
            "name": "DT-B-02",
            "request": {
                "method": "PATCH",
                "header": [
                    {
                        "key": "X-BFO-Authorization",
                        "value": "{{bfo_token}}",
                        "type": "text"
                    },
                    {
                        "key": "Authorization",
                        "value": "{{token}}",
                        "type": "text"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "[\r\n {\r\n    \"crId\": \"a8s120000000xiDAAQ\",\r\n     \"answerComment\": \"update comment\",\r\n     \"status\": \"Closed\",\r\n    \"issueOwner\": \"SESA368797\",\r\n     \"nameOfTheForwarder\": \"TNTT-FTL\",\r\n    \"shippingLocationShippedFrom\": \"HA-S3\",\r\n    \"confirmationDate\": \"2021-01-01\",\r\n    \"physicalLocationOfParcel\": \"NEWLOG\",\r\n    \"orderlinePickedBy\": \"Hanwei ZHANG\",\r\n    \"storageBinLocation\": \"R04-16-A3D\",\r\n    \"pickArea\": \"(AWF - casual employee)\",\r\n    \"boxType\": \"CN\",\r\n    \"internalInformationNeededFrom\": \"02:12:44\",\r\n    \"weightStatistical\": \"15.180\",\r\n    \"weightActualNetWeight\": \"14.432\",\r\n\r\n    \"numberOfLinesOnPickOrder\": 10,\r\n    \"resultOfCheck\": \"AWF\"\r\n  }\r\n]",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "https://api.qa.se.com/v1/customer-support/complaint-request/complaint-requests",
                    "protocol": "https",
                    "host": [
                        "api",
                        "qa",
                        "se",
                        "com"
                    ],
                    "path": [
                        "v1",
                        "customer-support",
                        "complaint-request",
                        "complaint-requests"
                    ]
                }
            },
            "response": [],
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "exec": [
                            ""
                        ],
                        "type": "text/javascript"
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "pm.test(\"Status test - Positve Response Check\", function () { pm.response.to.have.status(200); });\r",
                            "\r",
                            "\r",
                            "\r",
                            "pm.test(\"Response time is less than 55s\", function () { \r",
                            "\r",
                            "    pm.expect(pm.response.responseTime).to.be.below(55000); \r",
                            "\r",
                            "    // Default APIGEE timeout is 55 sec\r",
                            "\r",
                            "    });\r",
                            "\r",
                            "\r",
                            "\r",
                            "pm.test(\"response must be valid and have a body\", function () {\r",
                            "\r",
                            "     pm.response.to.have.status('OK');\r",
                            "\r",
                            "     pm.response.to.be.withBody;\r",
                            "\r",
                            "     pm.response.to.be.json;\r",
                            "\r",
                            "     pm.response.to.not.have.jsonBody(\"error\");\r",
                            "\r",
                            "     \r",
                            "\r",
                            "});\r",
                            "\r",
                            "\r",
                            "\r",
                            "\r",
                            "var schema ={\n \"type\": \"array\",\n \"items\": {\n  \"title\": \"UpdateCRresult\",\n  \"type\": \"object\",\n  \"x-tags\": [\n   \"ComplaintRequest\"\n  ],\n  \"description\": \"\",\n  \"properties\": {\n   \"crId\": {\n    \"type\":[\"string\",\"null\"],\n    \"description\": \"Represents the Id of the Complaint request that has been updated\\n\"\n   },\n   \"errorCode\": {\n    \"type\":[\"string\",\"null\"],\n    \"description\": \"Represents the unique error code if any\"\n   },\n   \"errorMessage\": {\n    \"type\":[\"string\",\"null\"],\n    \"description\": \"Represents the error message explanation if any\\n\"\n   }\n  }\n }\n} ;\r",
                            "\r",
                            "   \r",
                            "\r",
                            "   \r",
                            "\r",
                            "pm.test('Schema is valid', function() {\r",
                            "\r",
                            "  //pm.expect(tv4.validate(pm.response.json, schema)).to.be.true;\r",
                            "\r",
                            "  pm.response.to.have.jsonSchema(schema);\r",
                            "\r",
                            "});\r",
                            "\r",
                            "\r",
                            "\r",
                            "\r",
                            "pm.test(\"Content-Type header is present in request\", () => {\r",
                            "\r",
                            "  pm.request.to.have.header(\"Content-Type\");\r",
                            "\r",
                            "});\r",
                            "\r",
                            "\r",
                            "\r",
                            "pm.test(\"Content-Type header is application/json in Request\", () => {\r",
                            "\r",
                            "  pm.expect(pm.request.headers.get('Content-Type')).to.eql(\"application/json\");\r",
                            "\r",
                            "});\r",
                            "\r",
                            "\r",
                            "\r",
                            "pm.test(\"Content-Type header is present in response\", () => {\r",
                            "\r",
                            "  pm.response.to.have.header(\"Content-Type\");\r",
                            "\r",
                            "});"
                        ],
                        "type": "text/javascript"
                    }
                }
            ]
        },
        {
            "name": "DT-B-03",
            "request": {
                "method": "PATCH",
                "header": [
                    {
                        "key": "X-BFO-Authorization",
                        "value": "{{bfo_token}}",
                        "type": "text"
                    },
                    {
                        "key": "Authorization",
                        "value": "{{token}}",
                        "type": "text"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "[\r\n {\r\n    \"crId\": \"a8s120000000xiDAAQ\",\r\n     \"answerComment\": \"update comment\",\r\n     \"status\": \"Closed\",\r\n    \"issueOwner\": \"SESA368797\",\r\n     \"nameOfTheForwarder\": \"TNTT-FTL\",\r\n    \"shippingLocationShippedFrom\": \"HA-S3\",\r\n    \"confirmationDate\": \"2021-01-01\",\r\n    \"physicalLocationOfParcel\": \"NEWLOG\",\r\n    \"orderlinePickedBy\": \"Hanwei ZHANG\",\r\n    \"storageBinLocation\": \"R04-16-A3D\",\r\n    \"pickArea\": \"(AWF - casual employee)\",\r\n    \"boxType\": \"CN\",\r\n    \"internalInformationNeededFrom\": \"02:12:44\",\r\n    \"weightStatistical\": \"15.180\",\r\n    \"weightActualNetWeight\": \"14.432\",\r\n\r\n    \"numberOfLinesOnPickOrder\": 10,\r\n    \"resultOfCheck\": \"AWF\"\r\n  }\r\n]",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "https://api.qa.se.com/v1/customer-support/complaint-request/complaint-requests",
                    "protocol": "https",
                    "host": [
                        "api",
                        "qa",
                        "se",
                        "com"
                    ],
                    "path": [
                        "v1",
                        "customer-support",
                        "complaint-request",
                        "complaint-requests"
                    ]
                }
            },
            "response": [],
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "pm.test(\"Status test - Mandatory Field Check\", function () { pm.response.to.have.status(400); });\r",
                            ""
                        ],
                        "type": "text/javascript"
                    }
                }
            ]
        },
        {
            "name": "DT-B-04",
            "request": {
                "method": "PATCH",
                "header": [
                    {
                        "key": "X-BFO-Authorization",
                        "value": "{{bfo_token}}",
                        "type": "text"
                    },
                    {
                        "key": "Authorization",
                        "value": "{{token}}",
                        "type": "text"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "[\r\n {\r\n    \"crId\": \"a8s120000000xiDAAQ\",\r\n     \"answerComment\": \"update comment\",\r\n     \"status\": \"Closed\",\r\n    \"issueOwner\": \"SESA368797\",\r\n     \"nameOfTheForwarder\": \"TNTT-FTL\",\r\n    \"shippingLocationShippedFrom\": \"HA-S3\",\r\n    \"confirmationDate\": \"2021-01-01\",\r\n    \"physicalLocationOfParcel\": \"NEWLOG\",\r\n    \"orderlinePickedBy\": \"Hanwei ZHANG\",\r\n    \"storageBinLocation\": \"R04-16-A3D\",\r\n    \"pickArea\": \"(AWF - casual employee)\",\r\n    \"boxType\": \"CN\",\r\n    \"internalInformationNeededFrom\": \"02:12:44\",\r\n    \"weightStatistical\": \"15.180\",\r\n    \"weightActualNetWeight\": \"14.432\",\r\n\r\n    \"numberOfLinesOnPickOrder\": 10,\r\n    \"resultOfCheck\": \"AWF\"\r\n  }\r\n]",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "https://api.qa.se.com/v1/customer-support/complaint-request/complaint-requests",
                    "protocol": "https",
                    "host": [
                        "api",
                        "qa",
                        "se",
                        "com"
                    ],
                    "path": [
                        "v1",
                        "customer-support",
                        "complaint-request",
                        "complaint-requests"
                    ]
                }
            },
            "response": [],
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "pm.test(\"Not failing\", function () {\r",
                            "    pm.expect(true).to.eql(false);\r",
                            "});\r",
                            "//difference between Not failing and unexpexted error code recieved -- Not failing means that on passing incorrect paramters still the backend is working fine but unexpected error code means that originally we expected X but instead from backend we got Y.\r",
                            "\r",
                            "// remove mandatory fields -- error should come but is not.\r",
                            "//Backend should throw error when mandatory fields are not passed -- giving 200 OK\r",
                            "// example -- \"salesDocumentType\": \"ZCV\" is mandatory field for the backend is not being passed , still the bakend is giving response."
                        ],
                        "type": "text/javascript"
                    }
                }
            ]
        },
        {
            "name": "DT-B-05",
            "request": {
                "method": "PATCH",
                "header": [
                    {
                        "key": "X-BFO-Authorization",
                        "value": "{{bfo_token}}",
                        "type": "text"
                    },
                    {
                        "key": "Authorization",
                        "value": "{{token}}",
                        "type": "text"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "[\r\n {\r\n    \"crId\": \"a8s120000000xiDAAQ\",\r\n     \"answerComment\": \"update comment\",\r\n     \"status\": \"Closed\",\r\n    \"issueOwner\": \"SESA368797\",\r\n     \"nameOfTheForwarder\": \"TNTT-FTL\",\r\n    \"shippingLocationShippedFrom\": \"HA-S3\",\r\n    \"confirmationDate\": \"2021-01-01\",\r\n    \"physicalLocationOfParcel\": \"NEWLOG\",\r\n    \"orderlinePickedBy\": \"Hanwei ZHANG\",\r\n    \"storageBinLocation\": \"R04-16-A3D\",\r\n    \"pickArea\": \"(AWF - casual employee)\",\r\n    \"boxType\": \"CN\",\r\n    \"internalInformationNeededFrom\": \"02:12:44\",\r\n    \"weightStatistical\": \"15.180\",\r\n    \"weightActualNetWeight\": \"14.432\",\r\n\r\n    \"numberOfLinesOnPickOrder\": 10,\r\n    \"resultOfCheck\": \"AWF\"\r\n  }\r\n]",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "https://api.qa.se.com/v1/customer-support/complaint-request/complaint-requests",
                    "protocol": "https",
                    "host": [
                        "api",
                        "qa",
                        "se",
                        "com"
                    ],
                    "path": [
                        "v1",
                        "customer-support",
                        "complaint-request",
                        "complaint-requests"
                    ]
                }
            },
            "response": [],
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "pm.test(\"Status Test - Expected Error code\", function () {\r",
                            "    pm.expect(pm.response.code).to.equal(400);\r",
                            "});\r",
                            "\r",
                            "//BSL Service -- On removing mandatory fields backend returning 500 instead of 400 Bad Request.\r",
                            "\r",
                            "//difference between Not failing and unexpexted error code recieved -- Not failing means that on passing incorrect paramters still the backend is working fine but unexpected error code means that originally we expected X but instead from backend we got Y."
                        ],
                        "type": "text/javascript"
                    }
                }
            ]
        },
        {
            "name": "DT-C-01",
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "X-BFO-Authorization",
                        "value": "{{bfo_token}}",
                        "type": "text"
                    },
                    {
                        "key": "Authorization",
                        "value": "{{token}}",
                        "type": "text"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\r\n\"category\": \"Troubleshooting*\",\r\n\"description\": \"description of the complaint request - from post\",\r\n\"reason\": \"Quality Issue*\",\r\n\"issueOwner\" : \"SESA530629\",\r\n\"orderedInformation\" :{\r\n    \"commercialReferenceId\" : \"01tA0000004OgpOIAS\"\r\n}\r\n}\r\n",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "https://api.qa.se.com/v1/customer-support/complaint-request/complaint-requests",
                    "protocol": "https",
                    "host": [
                        "api",
                        "qa",
                        "se",
                        "com"
                    ],
                    "path": [
                        "v1",
                        "customer-support",
                        "complaint-request",
                        "complaint-requests"
                    ]
                }
            },
            "response": [],
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "exec": [
                            ""
                        ],
                        "type": "text/javascript"
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "pm.test(\"Status test - Positve Response Check\", function () { pm.response.to.have.status(201); });"
                        ],
                        "type": "text/javascript"
                    }
                }
            ]
        },
        {
            "name": "DT-C-02",
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "X-BFO-Authorization",
                        "value": "{{bfo_token}}",
                        "type": "text"
                    },
                    {
                        "key": "Authorization",
                        "value": "{{token}}",
                        "type": "text"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\r\n\"category\": \"Troubleshooting*\",\r\n\"description\": \"description of the complaint request - from post\",\r\n\"reason\": \"Quality Issue*\",\r\n\"issueOwner\" : \"SESA530629\",\r\n\"orderedInformation\" :{\r\n    \"commercialReferenceId\" : \"01tA0000004OgpOIAS\"\r\n}\r\n}\r\n",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "https://api.qa.se.com/v1/customer-support/complaint-request/complaint-requests",
                    "protocol": "https",
                    "host": [
                        "api",
                        "qa",
                        "se",
                        "com"
                    ],
                    "path": [
                        "v1",
                        "customer-support",
                        "complaint-request",
                        "complaint-requests"
                    ]
                }
            },
            "response": [],
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "exec": [
                            ""
                        ],
                        "type": "text/javascript"
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "pm.test(\"Status test - Positve Response Check\", function () { pm.response.to.have.status(201); });\r",
                            "\r",
                            "\r",
                            "\r",
                            "pm.test(\"Response time is less than 55s\", function () { \r",
                            "\r",
                            "    pm.expect(pm.response.responseTime).to.be.below(55000); \r",
                            "\r",
                            "    // Default APIGEE timeout is 55 sec\r",
                            "\r",
                            "    });\r",
                            "\r",
                            "\r",
                            "\r",
                            "pm.test(\"response must be valid and have a body\", function () {\r",
                            "\r",
                            "     pm.response.to.have.status('Created');\r",
                            "\r",
                            "     pm.response.to.be.withBody;\r",
                            "\r",
                            "     pm.response.to.be.json;\r",
                            "\r",
                            "     pm.response.to.not.have.jsonBody(\"error\");\r",
                            "\r",
                            "     \r",
                            "\r",
                            "});\r",
                            "\r",
                            "\r",
                            "\r",
                            "\r",
                            "var schema ={\n \"type\": \"object\",\n \"properties\": {\n  \"crId\": {\n   \"type\":[\"string\",\"null\"],\n   \"description\": \"Represents the Id of the created complaint request\"\n  },\n  \"crName\": {\n   \"type\":[\"string\",\"null\"],\n   \"description\": \"Represents the name of the created complaint request\"\n  }\n }\n} ;\r",
                            "\r",
                            "   \r",
                            "\r",
                            "   \r",
                            "\r",
                            "pm.test('Schema is valid', function() {\r",
                            "\r",
                            "  //pm.expect(tv4.validate(pm.response.json, schema)).to.be.true;\r",
                            "\r",
                            "  pm.response.to.have.jsonSchema(schema);\r",
                            "\r",
                            "});\r",
                            "\r",
                            "\r",
                            "\r",
                            "\r",
                            "pm.test(\"Content-Type header is present in request\", () => {\r",
                            "\r",
                            "  pm.request.to.have.header(\"Content-Type\");\r",
                            "\r",
                            "});\r",
                            "\r",
                            "\r",
                            "\r",
                            "pm.test(\"Content-Type header is application/json in Request\", () => {\r",
                            "\r",
                            "  pm.expect(pm.request.headers.get('Content-Type')).to.eql(\"application/json\");\r",
                            "\r",
                            "});\r",
                            "\r",
                            "\r",
                            "\r",
                            "pm.test(\"Content-Type header is present in response\", () => {\r",
                            "\r",
                            "  pm.response.to.have.header(\"Content-Type\");\r",
                            "\r",
                            "});"
                        ],
                        "type": "text/javascript"
                    }
                }
            ]
        },
        {
            "name": "DT-C-03",
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "X-BFO-Authorization",
                        "value": "{{bfo_token}}",
                        "type": "text"
                    },
                    {
                        "key": "Authorization",
                        "value": "{{token}}",
                        "type": "text"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\r\n\"category\": \"Troubleshooting*\",\r\n\"description\": \"description of the complaint request - from post\",\r\n\"reason\": \"Quality Issue*\",\r\n\"issueOwner\" : \"SESA530629\",\r\n\"orderedInformation\" :{\r\n    \"commercialReferenceId\" : \"01tA0000004OgpOIAS\"\r\n}\r\n}\r\n",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "https://api.qa.se.com/v1/customer-support/complaint-request/complaint-requests",
                    "protocol": "https",
                    "host": [
                        "api",
                        "qa",
                        "se",
                        "com"
                    ],
                    "path": [
                        "v1",
                        "customer-support",
                        "complaint-request",
                        "complaint-requests"
                    ]
                }
            },
            "response": [],
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "pm.test(\"Status test - Mandatory Field Check\", function () { pm.response.to.have.status(400); });\r",
                            ""
                        ],
                        "type": "text/javascript"
                    }
                }
            ]
        },
        {
            "name": "DT-C-04",
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "X-BFO-Authorization",
                        "value": "{{bfo_token}}",
                        "type": "text"
                    },
                    {
                        "key": "Authorization",
                        "value": "{{token}}",
                        "type": "text"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\r\n\"category\": \"Troubleshooting*\",\r\n\"description\": \"description of the complaint request - from post\",\r\n\"reason\": \"Quality Issue*\",\r\n\"issueOwner\" : \"SESA530629\",\r\n\"orderedInformation\" :{\r\n    \"commercialReferenceId\" : \"01tA0000004OgpOIAS\"\r\n}\r\n}\r\n",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "https://api.qa.se.com/v1/customer-support/complaint-request/complaint-requests",
                    "protocol": "https",
                    "host": [
                        "api",
                        "qa",
                        "se",
                        "com"
                    ],
                    "path": [
                        "v1",
                        "customer-support",
                        "complaint-request",
                        "complaint-requests"
                    ]
                }
            },
            "response": [],
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "pm.test(\"Not failing\", function () {\r",
                            "    pm.expect(true).to.eql(false);\r",
                            "});\r",
                            "//difference between Not failing and unexpexted error code recieved -- Not failing means that on passing incorrect paramters still the backend is working fine but unexpected error code means that originally we expected X but instead from backend we got Y.\r",
                            "\r",
                            "// remove mandatory fields -- error should come but is not.\r",
                            "//Backend should throw error when mandatory fields are not passed -- giving 200 OK\r",
                            "// example -- \"salesDocumentType\": \"ZCV\" is mandatory field for the backend is not being passed , still the bakend is giving response."
                        ],
                        "type": "text/javascript"
                    }
                }
            ]
        },
        {
            "name": "DT-C-05",
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "X-BFO-Authorization",
                        "value": "{{bfo_token}}",
                        "type": "text"
                    },
                    {
                        "key": "Authorization",
                        "value": "{{token}}",
                        "type": "text"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\r\n\"category\": \"Troubleshooting*\",\r\n\"description\": \"description of the complaint request - from post\",\r\n\"reason\": \"Quality Issue*\",\r\n\"issueOwner\" : \"SESA530629\",\r\n\"orderedInformation\" :{\r\n    \"commercialReferenceId\" : \"01tA0000004OgpOIAS\"\r\n}\r\n}\r\n",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "https://api.qa.se.com/v1/customer-support/complaint-request/complaint-requests",
                    "protocol": "https",
                    "host": [
                        "api",
                        "qa",
                        "se",
                        "com"
                    ],
                    "path": [
                        "v1",
                        "customer-support",
                        "complaint-request",
                        "complaint-requests"
                    ]
                }
            },
            "response": [],
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "pm.test(\"Status Test - Expected Error code\", function () {\r",
                            "    pm.expect(pm.response.code).to.equal(400);\r",
                            "});\r",
                            "\r",
                            "//BSL Service -- On removing mandatory fields backend returning 500 instead of 400 Bad Request.\r",
                            "\r",
                            "//difference between Not failing and unexpexted error code recieved -- Not failing means that on passing incorrect paramters still the backend is working fine but unexpected error code means that originally we expected X but instead from backend we got Y."
                        ],
                        "type": "text/javascript"
                    }
                }
            ]
        },
        {
            "name": "DT-D-01",
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "request": {
                "method": "GET",
                "header": [
                    {
                        "key": "X-BFO-Authorization",
                        "value": "{{bfo_token}}",
                        "type": "text"
                    },
                    {
                        "key": "Authorization",
                        "value": "{{token}}",
                        "type": "text"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "https://api.qa.se.com/v1/customer-support/complaint-request/escalation-histories/a8s7b000000CqOVAA0",
                    "protocol": "https",
                    "host": [
                        "api",
                        "qa",
                        "se",
                        "com"
                    ],
                    "path": [
                        "v1",
                        "customer-support",
                        "complaint-request",
                        "escalation-histories",
                        "a8s7b000000CqOVAA0"
                    ]
                }
            },
            "response": [],
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "exec": [
                            ""
                        ],
                        "type": "text/javascript"
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "pm.test(\"Status test - Positve Response Check\", function () { pm.response.to.have.status(200); });"
                        ],
                        "type": "text/javascript"
                    }
                }
            ]
        },
        {
            "name": "DT-D-02",
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "request": {
                "method": "GET",
                "header": [
                    {
                        "key": "X-BFO-Authorization",
                        "value": "{{bfo_token}}",
                        "type": "text"
                    },
                    {
                        "key": "Authorization",
                        "value": "{{token}}",
                        "type": "text"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "https://api.qa.se.com/v1/customer-support/complaint-request/escalation-histories/a8s7b000000CqOVAA0",
                    "protocol": "https",
                    "host": [
                        "api",
                        "qa",
                        "se",
                        "com"
                    ],
                    "path": [
                        "v1",
                        "customer-support",
                        "complaint-request",
                        "escalation-histories",
                        "a8s7b000000CqOVAA0"
                    ]
                }
            },
            "response": [],
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "exec": [
                            ""
                        ],
                        "type": "text/javascript"
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "pm.test(\"Status test - Positve Response Check\", function () { pm.response.to.have.status(200); });\r",
                            "\r",
                            "\r",
                            "\r",
                            "pm.test(\"Response time is less than 55s\", function () { \r",
                            "\r",
                            "    pm.expect(pm.response.responseTime).to.be.below(55000); \r",
                            "\r",
                            "    // Default APIGEE timeout is 55 sec\r",
                            "\r",
                            "    });\r",
                            "\r",
                            "\r",
                            "\r",
                            "pm.test(\"response must be valid and have a body\", function () {\r",
                            "\r",
                            "     pm.response.to.have.status('OK');\r",
                            "\r",
                            "     pm.response.to.be.withBody;\r",
                            "\r",
                            "     pm.response.to.be.json;\r",
                            "\r",
                            "     pm.response.to.not.have.jsonBody(\"error\");\r",
                            "\r",
                            "     \r",
                            "\r",
                            "});\r",
                            "\r",
                            "\r",
                            "\r",
                            "\r",
                            "var schema ={\n \"type\": \"array\",\n \"items\": {\n  \"title\": \"EscalationHistory\",\n  \"type\": \"object\",\n  \"description\": \"This response body represents the eventType occured during complaint request escalation\",\n  \"x-tags\": [\n   \"ComplaintRequest\",\n   \"escalation\"\n  ],\n  \"properties\": {\n   \"historyId\": {\n    \"type\":[\"string\",\"null\"],\n    \"description\": \"Represents the history bFO Id\"\n   },\n   \"eventType\": {\n    \"type\":[\"string\",\"null\"],\n    \"description\": \"Represents the escalation event type : Answer or Assign\"\n   },\n   \"eventDate\": {\n    \"type\":[\"string\",\"null\"],\n    \"description\": \"Represents the escalation event date\"\n   }\n  }\n }\n} ;\r",
                            "\r",
                            "   \r",
                            "\r",
                            "   \r",
                            "\r",
                            "pm.test('Schema is valid', function() {\r",
                            "\r",
                            "  //pm.expect(tv4.validate(pm.response.json, schema)).to.be.true;\r",
                            "\r",
                            "  pm.response.to.have.jsonSchema(schema);\r",
                            "\r",
                            "});\r",
                            "\r",
                            "\r",
                            "\r",
                            "\r",
                            "\r",
                            "\r",
                            "\r",
                            "pm.test(\"Content-Type header is present in response\", () => {\r",
                            "\r",
                            "  pm.response.to.have.header(\"Content-Type\");\r",
                            "\r",
                            "});"
                        ],
                        "type": "text/javascript"
                    }
                }
            ]
        },
        {
            "name": "DT-D-03",
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "request": {
                "method": "GET",
                "header": [
                    {
                        "key": "X-BFO-Authorization",
                        "value": "{{bfo_token}}",
                        "type": "text"
                    },
                    {
                        "key": "Authorization",
                        "value": "{{token}}",
                        "type": "text"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "https://api.qa.se.com/v1/customer-support/complaint-request/escalation-histories/a8s7b000000CqOVAA0",
                    "protocol": "https",
                    "host": [
                        "api",
                        "qa",
                        "se",
                        "com"
                    ],
                    "path": [
                        "v1",
                        "customer-support",
                        "complaint-request",
                        "escalation-histories",
                        "a8s7b000000CqOVAA0"
                    ]
                }
            },
            "response": [],
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "pm.test(\"Status test - Mandatory Field Check\", function () { pm.response.to.have.status(400); });\r",
                            ""
                        ],
                        "type": "text/javascript"
                    }
                }
            ]
        },
        {
            "name": "DT-D-04",
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "request": {
                "method": "GET",
                "header": [
                    {
                        "key": "X-BFO-Authorization",
                        "value": "{{bfo_token}}",
                        "type": "text"
                    },
                    {
                        "key": "Authorization",
                        "value": "{{token}}",
                        "type": "text"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "https://api.qa.se.com/v1/customer-support/complaint-request/escalation-histories/a8s7b000000CqOVAA0",
                    "protocol": "https",
                    "host": [
                        "api",
                        "qa",
                        "se",
                        "com"
                    ],
                    "path": [
                        "v1",
                        "customer-support",
                        "complaint-request",
                        "escalation-histories",
                        "a8s7b000000CqOVAA0"
                    ]
                }
            },
            "response": [],
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "pm.test(\"Not failing\", function () {\r",
                            "    pm.expect(true).to.eql(false);\r",
                            "});\r",
                            "//difference between Not failing and unexpexted error code recieved -- Not failing means that on passing incorrect paramters still the backend is working fine but unexpected error code means that originally we expected X but instead from backend we got Y.\r",
                            "\r",
                            "// remove mandatory fields -- error should come but is not.\r",
                            "//Backend should throw error when mandatory fields are not passed -- giving 200 OK\r",
                            "// example -- \"salesDocumentType\": \"ZCV\" is mandatory field for the backend is not being passed , still the bakend is giving response."
                        ],
                        "type": "text/javascript"
                    }
                }
            ]
        },
        {
            "name": "DT-D-05",
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "request": {
                "method": "GET",
                "header": [
                    {
                        "key": "X-BFO-Authorization",
                        "value": "{{bfo_token}}",
                        "type": "text"
                    },
                    {
                        "key": "Authorization",
                        "value": "{{token}}",
                        "type": "text"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "https://api.qa.se.com/v1/customer-support/complaint-request/escalation-histories/a8s7b000000CqOVAA0",
                    "protocol": "https",
                    "host": [
                        "api",
                        "qa",
                        "se",
                        "com"
                    ],
                    "path": [
                        "v1",
                        "customer-support",
                        "complaint-request",
                        "escalation-histories",
                        "a8s7b000000CqOVAA0"
                    ]
                }
            },
            "response": [],
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "pm.test(\"Status Test - Expected Error code\", function () {\r",
                            "    pm.expect(pm.response.code).to.equal(400);\r",
                            "});\r",
                            "\r",
                            "//BSL Service -- On removing mandatory fields backend returning 500 instead of 400 Bad Request.\r",
                            "\r",
                            "//difference between Not failing and unexpexted error code recieved -- Not failing means that on passing incorrect paramters still the backend is working fine but unexpected error code means that originally we expected X but instead from backend we got Y."
                        ],
                        "type": "text/javascript"
                    }
                }
            ]
        },
        {
            "name": "DT-E-01",
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "request": {
                "method": "GET",
                "header": [
                    {
                        "key": "X-BFO-Authorization",
                        "value": "{{bfo_token}}",
                        "type": "text"
                    },
                    {
                        "key": "Authorization",
                        "value": "{{token}}",
                        "type": "text"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "https://api.qa.se.com/v1/customer-support/complaint-request/comments/a8s7b000000CqOVAA0",
                    "protocol": "https",
                    "host": [
                        "api",
                        "qa",
                        "se",
                        "com"
                    ],
                    "path": [
                        "v1",
                        "customer-support",
                        "complaint-request",
                        "comments",
                        "a8s7b000000CqOVAA0"
                    ]
                }
            },
            "response": [],
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "exec": [
                            ""
                        ],
                        "type": "text/javascript"
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "pm.test(\"Status test - Positve Response Check\", function () { pm.response.to.have.status(200); });"
                        ],
                        "type": "text/javascript"
                    }
                }
            ]
        },
        {
            "name": "DT-E-02",
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "request": {
                "method": "GET",
                "header": [
                    {
                        "key": "X-BFO-Authorization",
                        "value": "{{bfo_token}}",
                        "type": "text"
                    },
                    {
                        "key": "Authorization",
                        "value": "{{token}}",
                        "type": "text"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "https://api.qa.se.com/v1/customer-support/complaint-request/comments/a8s7b000000CqOVAA0",
                    "protocol": "https",
                    "host": [
                        "api",
                        "qa",
                        "se",
                        "com"
                    ],
                    "path": [
                        "v1",
                        "customer-support",
                        "complaint-request",
                        "comments",
                        "a8s7b000000CqOVAA0"
                    ]
                }
            },
            "response": [],
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "exec": [
                            ""
                        ],
                        "type": "text/javascript"
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "pm.test(\"Status test - Positve Response Check\", function () { pm.response.to.have.status(200); });\r",
                            "\r",
                            "\r",
                            "\r",
                            "pm.test(\"Response time is less than 55s\", function () { \r",
                            "\r",
                            "    pm.expect(pm.response.responseTime).to.be.below(55000); \r",
                            "\r",
                            "    // Default APIGEE timeout is 55 sec\r",
                            "\r",
                            "    });\r",
                            "\r",
                            "\r",
                            "\r",
                            "pm.test(\"response must be valid and have a body\", function () {\r",
                            "\r",
                            "     pm.response.to.have.status('OK');\r",
                            "\r",
                            "     pm.response.to.be.withBody;\r",
                            "\r",
                            "     pm.response.to.be.json;\r",
                            "\r",
                            "     pm.response.to.not.have.jsonBody(\"error\");\r",
                            "\r",
                            "     \r",
                            "\r",
                            "});\r",
                            "\r",
                            "\r",
                            "\r",
                            "\r",
                            "var schema ={\n \"type\": \"array\",\n \"items\": {\n  \"title\": \"CRComment\",\n  \"type\": \"object\",\n  \"x-tags\": [\n   \"ComplaintRequest\",\n   \"Comment\"\n  ],\n  \"properties\": {\n   \"commentId\": {\n    \"type\":[\"string\",\"null\"],\n    \"description\": \"Represents the comment Id\"\n   },\n   \"commentBody\": {\n    \"type\":[\"string\",\"null\"],\n    \"description\": \"Represents the comment body\"\n   },\n   \"commentType\": {\n    \"type\":[\"string\",\"null\"],\n    \"description\": \"Represents the comment type\"\n   }\n  },\n  \"description\": \"This output data represents the CR comments details returned by the get comments method\"\n }\n} ;\r",
                            "\r",
                            "   \r",
                            "\r",
                            "   \r",
                            "\r",
                            "pm.test('Schema is valid', function() {\r",
                            "\r",
                            "  //pm.expect(tv4.validate(pm.response.json, schema)).to.be.true;\r",
                            "\r",
                            "  pm.response.to.have.jsonSchema(schema);\r",
                            "\r",
                            "});\r",
                            "\r",
                            "\r",
                            "\r",
                            "\r",
                            "\r",
                            "\r",
                            "\r",
                            "pm.test(\"Content-Type header is present in response\", () => {\r",
                            "\r",
                            "  pm.response.to.have.header(\"Content-Type\");\r",
                            "\r",
                            "});"
                        ],
                        "type": "text/javascript"
                    }
                }
            ]
        },
        {
            "name": "DT-E-03",
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "request": {
                "method": "GET",
                "header": [
                    {
                        "key": "X-BFO-Authorization",
                        "value": "{{bfo_token}}",
                        "type": "text"
                    },
                    {
                        "key": "Authorization",
                        "value": "{{token}}",
                        "type": "text"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "https://api.qa.se.com/v1/customer-support/complaint-request/comments/a8s7b000000CqOVAA0",
                    "protocol": "https",
                    "host": [
                        "api",
                        "qa",
                        "se",
                        "com"
                    ],
                    "path": [
                        "v1",
                        "customer-support",
                        "complaint-request",
                        "comments",
                        "a8s7b000000CqOVAA0"
                    ]
                }
            },
            "response": [],
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "pm.test(\"Status test - Mandatory Field Check\", function () { pm.response.to.have.status(400); });\r",
                            ""
                        ],
                        "type": "text/javascript"
                    }
                }
            ]
        },
        {
            "name": "DT-E-04",
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "request": {
                "method": "GET",
                "header": [
                    {
                        "key": "X-BFO-Authorization",
                        "value": "{{bfo_token}}",
                        "type": "text"
                    },
                    {
                        "key": "Authorization",
                        "value": "{{token}}",
                        "type": "text"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "https://api.qa.se.com/v1/customer-support/complaint-request/comments/a8s7b000000CqOVAA0",
                    "protocol": "https",
                    "host": [
                        "api",
                        "qa",
                        "se",
                        "com"
                    ],
                    "path": [
                        "v1",
                        "customer-support",
                        "complaint-request",
                        "comments",
                        "a8s7b000000CqOVAA0"
                    ]
                }
            },
            "response": [],
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "pm.test(\"Not failing\", function () {\r",
                            "    pm.expect(true).to.eql(false);\r",
                            "});\r",
                            "//difference between Not failing and unexpexted error code recieved -- Not failing means that on passing incorrect paramters still the backend is working fine but unexpected error code means that originally we expected X but instead from backend we got Y.\r",
                            "\r",
                            "// remove mandatory fields -- error should come but is not.\r",
                            "//Backend should throw error when mandatory fields are not passed -- giving 200 OK\r",
                            "// example -- \"salesDocumentType\": \"ZCV\" is mandatory field for the backend is not being passed , still the bakend is giving response."
                        ],
                        "type": "text/javascript"
                    }
                }
            ]
        },
        {
            "name": "DT-E-05",
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "request": {
                "method": "GET",
                "header": [
                    {
                        "key": "X-BFO-Authorization",
                        "value": "{{bfo_token}}",
                        "type": "text"
                    },
                    {
                        "key": "Authorization",
                        "value": "{{token}}",
                        "type": "text"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "https://api.qa.se.com/v1/customer-support/complaint-request/comments/a8s7b000000CqOVAA0",
                    "protocol": "https",
                    "host": [
                        "api",
                        "qa",
                        "se",
                        "com"
                    ],
                    "path": [
                        "v1",
                        "customer-support",
                        "complaint-request",
                        "comments",
                        "a8s7b000000CqOVAA0"
                    ]
                }
            },
            "response": [],
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "pm.test(\"Status Test - Expected Error code\", function () {\r",
                            "    pm.expect(pm.response.code).to.equal(400);\r",
                            "});\r",
                            "\r",
                            "//BSL Service -- On removing mandatory fields backend returning 500 instead of 400 Bad Request.\r",
                            "\r",
                            "//difference between Not failing and unexpexted error code recieved -- Not failing means that on passing incorrect paramters still the backend is working fine but unexpected error code means that originally we expected X but instead from backend we got Y."
                        ],
                        "type": "text/javascript"
                    }
                }
            ]
        },
        {
            "name": "DT-F-01",
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "X-BFO-Authorization",
                        "value": "{{bfo_token}}",
                        "type": "text"
                    },
                    {
                        "key": "Authorization",
                        "value": "{{token}}",
                        "type": "text"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"commentBody\": \"this is the text to be added to the comment\"\r\n}\r\n",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "https://api.qa.se.com/v1/customer-support/complaint-request/comments/a8s7b000000CqOVAA0",
                    "protocol": "https",
                    "host": [
                        "api",
                        "qa",
                        "se",
                        "com"
                    ],
                    "path": [
                        "v1",
                        "customer-support",
                        "complaint-request",
                        "comments",
                        "a8s7b000000CqOVAA0"
                    ]
                }
            },
            "response": [],
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "exec": [
                            ""
                        ],
                        "type": "text/javascript"
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "pm.test(\"Status test - Positve Response Check\", function () { pm.response.to.have.status(201); });"
                        ],
                        "type": "text/javascript"
                    }
                }
            ]
        },
        {
            "name": "DT-F-02",
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "X-BFO-Authorization",
                        "value": "{{bfo_token}}",
                        "type": "text"
                    },
                    {
                        "key": "Authorization",
                        "value": "{{token}}",
                        "type": "text"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"commentBody\": \"this is the text to be added to the comment\"\r\n}\r\n",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "https://api.qa.se.com/v1/customer-support/complaint-request/comments/a8s7b000000CqOVAA0",
                    "protocol": "https",
                    "host": [
                        "api",
                        "qa",
                        "se",
                        "com"
                    ],
                    "path": [
                        "v1",
                        "customer-support",
                        "complaint-request",
                        "comments",
                        "a8s7b000000CqOVAA0"
                    ]
                }
            },
            "response": [],
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "exec": [
                            ""
                        ],
                        "type": "text/javascript"
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "pm.test(\"Status test - Positve Response Check\", function () { pm.response.to.have.status(201); });\r",
                            "\r",
                            "\r",
                            "\r",
                            "pm.test(\"Response time is less than 55s\", function () { \r",
                            "\r",
                            "    pm.expect(pm.response.responseTime).to.be.below(55000); \r",
                            "\r",
                            "    // Default APIGEE timeout is 55 sec\r",
                            "\r",
                            "    });\r",
                            "\r",
                            "\r",
                            "\r",
                            "pm.test(\"response must be valid and have a body\", function () {\r",
                            "\r",
                            "     pm.response.to.have.status('Created');\r",
                            "\r",
                            "     pm.response.to.be.withBody;\r",
                            "\r",
                            "     pm.response.to.be.json;\r",
                            "\r",
                            "     pm.response.to.not.have.jsonBody(\"error\");\r",
                            "\r",
                            "     \r",
                            "\r",
                            "});\r",
                            "\r",
                            "\r",
                            "\r",
                            "\r",
                            "var schema ={\n \"type\": \"object\",\n \"properties\": {\n  \"commentId\": {\n   \"type\":[\"string\",\"null\"],\n   \"description\": \"Represents the comment Id of the created record\"\n  }\n }\n} ;\r",
                            "\r",
                            "   \r",
                            "\r",
                            "   \r",
                            "\r",
                            "pm.test('Schema is valid', function() {\r",
                            "\r",
                            "  //pm.expect(tv4.validate(pm.response.json, schema)).to.be.true;\r",
                            "\r",
                            "  pm.response.to.have.jsonSchema(schema);\r",
                            "\r",
                            "});\r",
                            "\r",
                            "\r",
                            "\r",
                            "\r",
                            "pm.test(\"Content-Type header is present in request\", () => {\r",
                            "\r",
                            "  pm.request.to.have.header(\"Content-Type\");\r",
                            "\r",
                            "});\r",
                            "\r",
                            "\r",
                            "\r",
                            "pm.test(\"Content-Type header is application/json in Request\", () => {\r",
                            "\r",
                            "  pm.expect(pm.request.headers.get('Content-Type')).to.eql(\"application/json\");\r",
                            "\r",
                            "});\r",
                            "\r",
                            "\r",
                            "\r",
                            "pm.test(\"Content-Type header is present in response\", () => {\r",
                            "\r",
                            "  pm.response.to.have.header(\"Content-Type\");\r",
                            "\r",
                            "});"
                        ],
                        "type": "text/javascript"
                    }
                }
            ]
        },
        {
            "name": "DT-F-03",
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "X-BFO-Authorization",
                        "value": "{{bfo_token}}",
                        "type": "text"
                    },
                    {
                        "key": "Authorization",
                        "value": "{{token}}",
                        "type": "text"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"commentBody\": \"this is the text to be added to the comment\"\r\n}\r\n",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "https://api.qa.se.com/v1/customer-support/complaint-request/comments/a8s7b000000CqOVAA0",
                    "protocol": "https",
                    "host": [
                        "api",
                        "qa",
                        "se",
                        "com"
                    ],
                    "path": [
                        "v1",
                        "customer-support",
                        "complaint-request",
                        "comments",
                        "a8s7b000000CqOVAA0"
                    ]
                }
            },
            "response": [],
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "pm.test(\"Status test - Mandatory Field Check\", function () { pm.response.to.have.status(400); });\r",
                            ""
                        ],
                        "type": "text/javascript"
                    }
                }
            ]
        },
        {
            "name": "DT-F-04",
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "X-BFO-Authorization",
                        "value": "{{bfo_token}}",
                        "type": "text"
                    },
                    {
                        "key": "Authorization",
                        "value": "{{token}}",
                        "type": "text"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"commentBody\": \"this is the text to be added to the comment\"\r\n}\r\n",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "https://api.qa.se.com/v1/customer-support/complaint-request/comments/a8s7b000000CqOVAA0",
                    "protocol": "https",
                    "host": [
                        "api",
                        "qa",
                        "se",
                        "com"
                    ],
                    "path": [
                        "v1",
                        "customer-support",
                        "complaint-request",
                        "comments",
                        "a8s7b000000CqOVAA0"
                    ]
                }
            },
            "response": [],
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "pm.test(\"Not failing\", function () {\r",
                            "    pm.expect(true).to.eql(false);\r",
                            "});\r",
                            "//difference between Not failing and unexpexted error code recieved -- Not failing means that on passing incorrect paramters still the backend is working fine but unexpected error code means that originally we expected X but instead from backend we got Y.\r",
                            "\r",
                            "// remove mandatory fields -- error should come but is not.\r",
                            "//Backend should throw error when mandatory fields are not passed -- giving 200 OK\r",
                            "// example -- \"salesDocumentType\": \"ZCV\" is mandatory field for the backend is not being passed , still the bakend is giving response."
                        ],
                        "type": "text/javascript"
                    }
                }
            ]
        },
        {
            "name": "DT-F-05",
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "X-BFO-Authorization",
                        "value": "{{bfo_token}}",
                        "type": "text"
                    },
                    {
                        "key": "Authorization",
                        "value": "{{token}}",
                        "type": "text"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"commentBody\": \"this is the text to be added to the comment\"\r\n}\r\n",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "https://api.qa.se.com/v1/customer-support/complaint-request/comments/a8s7b000000CqOVAA0",
                    "protocol": "https",
                    "host": [
                        "api",
                        "qa",
                        "se",
                        "com"
                    ],
                    "path": [
                        "v1",
                        "customer-support",
                        "complaint-request",
                        "comments",
                        "a8s7b000000CqOVAA0"
                    ]
                }
            },
            "response": [],
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "pm.test(\"Status Test - Expected Error code\", function () {\r",
                            "    pm.expect(pm.response.code).to.equal(400);\r",
                            "});\r",
                            "\r",
                            "//BSL Service -- On removing mandatory fields backend returning 500 instead of 400 Bad Request.\r",
                            "\r",
                            "//difference between Not failing and unexpexted error code recieved -- Not failing means that on passing incorrect paramters still the backend is working fine but unexpected error code means that originally we expected X but instead from backend we got Y."
                        ],
                        "type": "text/javascript"
                    }
                }
            ]
        },
        {
            "name": "DT-G-01",
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "request": {
                "method": "GET",
                "header": [
                    {
                        "key": "X-BFO-Authorization",
                        "value": "{{bfo_token}}",
                        "type": "text"
                    },
                    {
                        "key": "Authorization",
                        "value": "{{token}}",
                        "type": "text"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "https://api.qa.se.com/v1/customer-support/complaint-request/complaint-requests/a8s120000000xk9AAA?type=id",
                    "protocol": "https",
                    "host": [
                        "api",
                        "qa",
                        "se",
                        "com"
                    ],
                    "path": [
                        "v1",
                        "customer-support",
                        "complaint-request",
                        "complaint-requests",
                        "a8s120000000xk9AAA"
                    ],
                    "query": [
                        {
                            "key": "type",
                            "value": "id"
                        }
                    ]
                }
            },
            "response": [],
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "exec": [
                            ""
                        ],
                        "type": "text/javascript"
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "pm.test(\"Status test - Positve Response Check\", function () { pm.response.to.have.status(200); });"
                        ],
                        "type": "text/javascript"
                    }
                }
            ]
        },
        {
            "name": "DT-G-02",
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "request": {
                "method": "GET",
                "header": [
                    {
                        "key": "X-BFO-Authorization",
                        "value": "{{bfo_token}}",
                        "type": "text"
                    },
                    {
                        "key": "Authorization",
                        "value": "{{token}}",
                        "type": "text"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "https://api.qa.se.com/v1/customer-support/complaint-request/complaint-requests/a8s120000000xk9AAA?type=id",
                    "protocol": "https",
                    "host": [
                        "api",
                        "qa",
                        "se",
                        "com"
                    ],
                    "path": [
                        "v1",
                        "customer-support",
                        "complaint-request",
                        "complaint-requests",
                        "a8s120000000xk9AAA"
                    ],
                    "query": [
                        {
                            "key": "type",
                            "value": "id"
                        }
                    ]
                }
            },
            "response": [],
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "exec": [
                            ""
                        ],
                        "type": "text/javascript"
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "pm.test(\"Status test - Positve Response Check\", function () { pm.response.to.have.status(200); });\r",
                            "\r",
                            "\r",
                            "\r",
                            "pm.test(\"Response time is less than 55s\", function () { \r",
                            "\r",
                            "    pm.expect(pm.response.responseTime).to.be.below(55000); \r",
                            "\r",
                            "    // Default APIGEE timeout is 55 sec\r",
                            "\r",
                            "    });\r",
                            "\r",
                            "\r",
                            "\r",
                            "pm.test(\"response must be valid and have a body\", function () {\r",
                            "\r",
                            "     pm.response.to.have.status('OK');\r",
                            "\r",
                            "     pm.response.to.be.withBody;\r",
                            "\r",
                            "     pm.response.to.be.json;\r",
                            "\r",
                            "     pm.response.to.not.have.jsonBody(\"error\");\r",
                            "\r",
                            "     \r",
                            "\r",
                            "});\r",
                            "\r",
                            "\r",
                            "\r",
                            "\r",
                            "var schema ={\n \"description\": \"This response body contains complaint request data that the API returns to the consumer.\",\n \"type\": \"object\",\n \"x-examples\": {\n  \"example-1\": {\n   \"id\": \"a8s1H000000PUFfQAO\",\n   \"crName\": \"CR-1485051\",\n   \"status\": \"Closed\",\n   \"complaintStatus\": \"Open\",\n   \"category\": \"Order Booking\",\n   \"reason\": \"Cancellation\",\n   \"comments\": \"<b>Wei Jun TAN, 2018-04-23 02:27:54 GMT</b> - Hi Suze,\\n\\nAttach OA from supplier.\\n\\nRegards,\\nWei Jun<br><b>Gemy FORSON, 2018-04-23 01:59:12 GMT</b> - Team,\\n\\nPlease find attached  factory OA for PO # 1603084009 - SO # 1604018279.\\n\\nThanks\\nGemy<br><b>Gemy FORSON, 2018-04-19 01:33:21 GMT</b> - waiting factory OA for SEOA PO # 1603084009<br><b>Wei Jun TAN, 2018-04-18 14:11:41 GMT</b> - Hi Gemy,\\n\\nSO: 1604018279\\nPlease follow the SEOA sales order for CRD, shipping mode and if complete delivery require.\\n\\nQuotation is in the BFO.\\n\\nPlease send PO below 3 person, CC Suze and Kim Fui.\\ngary.hopkins@schneider-electric.com\\ndarren.vasey@schneider-electric.com\\nrichard.emmett@schneider-electric.com\\n\\nRegards,\\nWei Jun<br>\",\n   \"createdDate\": \"2018-04-17T07:46:44.000+0000\",\n   \"dueDate\": \"2018-04-19T07:43:00.000+0000\",\n   \"salesOrderNumber\": \"3007347506\",\n   \"salesOrderLineNumber\": \"100\",\n   \"lastModifiedDate \": \"2018-04-23T02:46:20.000+0000\",\n   \"lastActivityDate\": \"2018-04-23\",\n   \"comRefOrderedReporting\": \"ATV312HU30N4\",\n   \"accountableOrgId\": \"a1HA0000000McwbMAC\",\n   \"accountableOrgName\": \"RoW Operations - East Asia & Japan - Brunei Darussalam\",\n   \"orgCountry\": \"Brunei Darussalam\",\n   \"reportingOrgId\": \"a1HA0000000McwbMAC\",\n   \"reportingOrgName\": \"RoW Operations - East Asia & Japan - Brunei Darussalam\",\n   \"recordType\": \"Complaint Request Internal\",\n   \"description \": \"Hi Wei Jun,<br><br>Attached new PO from PKS PO-2018-153 for book-in.\",\n   \"caseId\": \"5001H00001ASCYvQAP\",\n   \"processThatCausedCr\": \"Others\",\n   \"parcelNumber\": \"636064810052279526\",\n   \"internalReason\": \"Cancellation\"\n  }\n },\n \"properties\": {\n  \"id\": {\n   \"type\":[\"string\",\"null\"],\n   \"minLength\": 1,\n   \"description\": \"Represents the CR id\"\n  },\n  \"crName\": {\n   \"type\":[\"string\",\"null\"],\n   \"minLength\": 1,\n   \"description\": \"Represents the CR name\"\n  },\n  \"status\": {\n   \"type\":[\"string\",\"null\"],\n   \"minLength\": 1,\n   \"description\": \"Represents the CR status\"\n  },\n  \"complaintStatus\": {\n   \"type\":[\"string\",\"null\"],\n   \"minLength\": 1,\n   \"description\": \"Represents the CR second status\"\n  },\n  \"category\": {\n   \"type\":[\"string\",\"null\"],\n   \"minLength\": 1,\n   \"description\": \"Represents the CR category\"\n  },\n  \"reason\": {\n   \"type\":[\"string\",\"null\"],\n   \"minLength\": 1,\n   \"description\": \"Represents the CR reason\"\n  },\n  \"comments\": {\n   \"type\":[\"string\",\"null\"],\n   \"minLength\": 1,\n   \"description\": \"represents the CR comments\"\n  },\n  \"createdDate\": {\n   \"type\":[\"string\",\"null\"],\n   \"minLength\": 1,\n   \"example\": \"YYYY-MM-DD\",\n   \"description\": \"Represents the CR Created date\"\n  },\n  \"dueDate\": {\n   \"type\":[\"string\",\"null\"],\n   \"minLength\": 1,\n   \"example\": \"YYYY-MM-DD\",\n   \"description\": \"Represents the CR due date\"\n  },\n  \"salesOrderNumber\": {\n   \"type\":[\"string\",\"null\"],\n   \"minLength\": 1,\n   \"description\": \"Represents the Schneider sales order number\"\n  },\n  \"salesOrderLineNumber\": {\n   \"type\":[\"string\",\"null\"],\n   \"minLength\": 1,\n   \"description\": \"Represents the Schneider sales order line number\"\n  },\n  \"lastModifiedDate\": {\n   \"type\":[\"string\",\"null\"],\n   \"minLength\": 1,\n   \"description\": \"Represents the CR last modification date\"\n  },\n  \"lastActivityDate\": {\n   \"type\":[\"string\",\"null\"],\n   \"minLength\": 1,\n   \"example\": \"YYYY-MM-DD\",\n   \"description\": \"Represents the CR last activity date\"\n  },\n  \"comRefOrderedReporting\": {\n   \"type\":[\"string\",\"null\"],\n   \"minLength\": 1,\n   \"description\": \"Represents the Schneider sales order line number\"\n  },\n  \"accountableOrgId\": {\n   \"type\":[\"string\",\"null\"],\n   \"minLength\": 1,\n   \"description\": \"Represents the Id of the CR accountable organization\"\n  },\n  \"accountableOrgName\": {\n   \"type\":[\"string\",\"null\"],\n   \"minLength\": 1,\n   \"description\": \"Represents the name of the CR accountable organization\"\n  },\n  \"orgCountry\": {\n   \"type\":[\"string\",\"null\"],\n   \"minLength\": 1,\n   \"description\": \"Represents the name of the organization country\"\n  },\n  \"reportingOrgId\": {\n   \"type\":[\"string\",\"null\"],\n   \"minLength\": 1,\n   \"description\": \"Represents the Id of the CR reporting / detection entity (Organization which reports the CR)\"\n  },\n  \"reportingOrgName\": {\n   \"type\":[\"string\",\"null\"],\n   \"minLength\": 1,\n   \"description\": \"Represents the name of the CR reporting / detection entity (Organization which reports the CR)\"\n  },\n  \"recordType\": {\n   \"type\":[\"string\",\"null\"],\n   \"minLength\": 1,\n   \"description\": \"Represents the record type name of the CR\"\n  },\n  \"description\": {\n   \"type\":[\"string\",\"null\"],\n   \"minLength\": 1,\n   \"description\": \"Represents the CR description of the issue (additional relevant info on CR)\"\n  },\n  \"caseId\": {\n   \"type\":[\"string\",\"null\"],\n   \"minLength\": 1,\n   \"description\": \"Represents the ID of the case linked to the complaint request\"\n  },\n  \"processThatCausedCr\": {\n   \"type\":[\"string\",\"null\"],\n   \"minLength\": 1,\n   \"description\": \"Represents process that causes CR\"\n  },\n  \"parcelNumber\": {\n   \"type\":[\"string\",\"null\"],\n   \"minLength\": 1,\n   \"description\": \"Represents the parcel number\"\n  },\n  \"internalReason\": {\n   \"type\":[\"string\",\"null\"],\n   \"minLength\": 1,\n   \"description\": \"Represents internal reason\"\n  },\n  \"weightActualNetWeight\": {\n   \"type\":[\"string\",\"null\"],\n   \"description\": \"Represents the Weight Actual/Net Weight\"\n  }\n }\n} ;\r",
                            "\r",
                            "   \r",
                            "\r",
                            "   \r",
                            "\r",
                            "pm.test('Schema is valid', function() {\r",
                            "\r",
                            "  //pm.expect(tv4.validate(pm.response.json, schema)).to.be.true;\r",
                            "\r",
                            "  pm.response.to.have.jsonSchema(schema);\r",
                            "\r",
                            "});\r",
                            "\r",
                            "\r",
                            "\r",
                            "\r",
                            "\r",
                            "\r",
                            "\r",
                            "pm.test(\"Content-Type header is present in response\", () => {\r",
                            "\r",
                            "  pm.response.to.have.header(\"Content-Type\");\r",
                            "\r",
                            "});"
                        ],
                        "type": "text/javascript"
                    }
                }
            ]
        },
        {
            "name": "DT-G-03",
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "request": {
                "method": "GET",
                "header": [
                    {
                        "key": "X-BFO-Authorization",
                        "value": "{{bfo_token}}",
                        "type": "text"
                    },
                    {
                        "key": "Authorization",
                        "value": "{{token}}",
                        "type": "text"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "https://api.qa.se.com/v1/customer-support/complaint-request/complaint-requests/a8s120000000xk9AAA?type=id",
                    "protocol": "https",
                    "host": [
                        "api",
                        "qa",
                        "se",
                        "com"
                    ],
                    "path": [
                        "v1",
                        "customer-support",
                        "complaint-request",
                        "complaint-requests",
                        "a8s120000000xk9AAA"
                    ],
                    "query": [
                        {
                            "key": "type",
                            "value": "id"
                        }
                    ]
                }
            },
            "response": [],
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "pm.test(\"Status test - Mandatory Field Check\", function () { pm.response.to.have.status(400); });\r",
                            ""
                        ],
                        "type": "text/javascript"
                    }
                }
            ]
        },
        {
            "name": "DT-G-04",
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "request": {
                "method": "GET",
                "header": [
                    {
                        "key": "X-BFO-Authorization",
                        "value": "{{bfo_token}}",
                        "type": "text"
                    },
                    {
                        "key": "Authorization",
                        "value": "{{token}}",
                        "type": "text"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "https://api.qa.se.com/v1/customer-support/complaint-request/complaint-requests/a8s120000000xk9AAA?type=id",
                    "protocol": "https",
                    "host": [
                        "api",
                        "qa",
                        "se",
                        "com"
                    ],
                    "path": [
                        "v1",
                        "customer-support",
                        "complaint-request",
                        "complaint-requests",
                        "a8s120000000xk9AAA"
                    ],
                    "query": [
                        {
                            "key": "type",
                            "value": "id"
                        }
                    ]
                }
            },
            "response": [],
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "pm.test(\"Not failing\", function () {\r",
                            "    pm.expect(true).to.eql(false);\r",
                            "});\r",
                            "//difference between Not failing and unexpexted error code recieved -- Not failing means that on passing incorrect paramters still the backend is working fine but unexpected error code means that originally we expected X but instead from backend we got Y.\r",
                            "\r",
                            "// remove mandatory fields -- error should come but is not.\r",
                            "//Backend should throw error when mandatory fields are not passed -- giving 200 OK\r",
                            "// example -- \"salesDocumentType\": \"ZCV\" is mandatory field for the backend is not being passed , still the bakend is giving response."
                        ],
                        "type": "text/javascript"
                    }
                }
            ]
        },
        {
            "name": "DT-G-05",
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "request": {
                "method": "GET",
                "header": [
                    {
                        "key": "X-BFO-Authorization",
                        "value": "{{bfo_token}}",
                        "type": "text"
                    },
                    {
                        "key": "Authorization",
                        "value": "{{token}}",
                        "type": "text"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "https://api.qa.se.com/v1/customer-support/complaint-request/complaint-requests/a8s120000000xk9AAA?type=id",
                    "protocol": "https",
                    "host": [
                        "api",
                        "qa",
                        "se",
                        "com"
                    ],
                    "path": [
                        "v1",
                        "customer-support",
                        "complaint-request",
                        "complaint-requests",
                        "a8s120000000xk9AAA"
                    ],
                    "query": [
                        {
                            "key": "type",
                            "value": "id"
                        }
                    ]
                }
            },
            "response": [],
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "pm.test(\"Status Test - Expected Error code\", function () {\r",
                            "    pm.expect(pm.response.code).to.equal(400);\r",
                            "});\r",
                            "\r",
                            "//BSL Service -- On removing mandatory fields backend returning 500 instead of 400 Bad Request.\r",
                            "\r",
                            "//difference between Not failing and unexpexted error code recieved -- Not failing means that on passing incorrect paramters still the backend is working fine but unexpected error code means that originally we expected X but instead from backend we got Y."
                        ],
                        "type": "text/javascript"
                    }
                }
            ]
        }
    ]
}