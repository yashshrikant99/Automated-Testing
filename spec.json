{
  "swagger": "2.0",
  "info": {
    "version": "2.1",
    "title": "mySE Temporary Account Access API",
    "contact": {
      "name": "Oscar Sanchez",
      "url": "http://se.com",
      "email": "oscar.sanchez-vilar@se.com"
    },
    "description": "In mySE, users are registered to their home account. According to the permissions set in the application, they can use Order / Quotation management features on this account, and also on other accounts linked to their home account via the chain ID mechanism.\n\nInternal SE users can also access additional accounts completely unrelated to their home or chain accounts, using a specific access mode called *Temporary Account Access*. This requires the user to have the Temporary Account Access permission on these accounts.\n\nIn order to get access to an account in Temporary Account Access mode, a user must first raise a request for this account. Once the request is approved by an administrator, the user can then access this account in Temporary Account Access mode on all other mySE APIs.\n\nThis API provides methods to:\n  - search accounts on which the user already has the Temporary Account Access permission\n  - search accounts on which the user can request the Temporary Account Access permission, and send the actual permission request\n  - manage a list of favourite accounts that the user uses in Temporary Account Access mode"
  },
  "basePath": "/v2/customer-order/myse-temporary-account-access",
  "tags": [
    {
      "name": "Temporary Account Access"
    },
    {
      "name": "Temporary Account Access Request"
    }
  ],
  "paths": {
    "/temporary-account-accesses/{business-unit}": {
      "parameters": [
        {
          "$ref": "#/parameters/businessUnit"
        }
      ],
      "get": {
        "operationId": "search-TAA-accounts",
        "summary": "Search list of accounts accessible to a user via Temporary Account Access",
        "tags": [
          "Temporary Account Access"
        ],
        "description": "The aim of the *Temporary Account Access Search* method is to retrieve the list of accounts for a given *Business Unit* on which the user has the Temporary Account Access permission.\n\nThis method returns:\n* The detailed list of accounts (account number, name and location) on which the user has the Temporary Account Access and matching the search criteria.\n* The total number of items in this list.\n\nIn order to refine the search, this method allows using filter criterias:\n* accountNumber\n* company name\n* order PO number\n* order reference number\n* invoice number\n* location\n\n***Note:** at least one of the query parameters must be filled. Multiple query parameters can be filled at once, the service will return the list of accounts that match all requested parameters.*\n\n### #1. Technical error code for http return code 400\n\nMissing mandatory parameter or invalid parameter value\n\nHTTP status code | errorCode | errorMessage | comment\n-----------------|-----------|--------------|--------\n400 | Empty_Authorization | Authorization token is not filled | No value provided in the mandatory X-IDMS-Authorization header parameter.\n400 | Empty_BusinessUnit | BusinessUnit is not Filled | No value provided in the mandatory businessUnit path parameter.\n400 | Invalid_BusinessUnit | Business Unit code does not exist in MySE | The requested Business Unit value does not exist in MySE.\n\n### #2. Technical error code for http return code 403\n\nInvalid authentication token or user not registered in mySE\n\nHTTP status code | errorCode | errorMessage | comment\n-----------------|-----------|--------------|--------\n403 | Invalid_Authorization | Invalid authorization token | Wrong token or invalid session on IDMS.\n403 | Expired_Authorization | Expired authorization token | The authorization token validity has expired, it must be renewed by the calling application\n403 | Invalid_User | User with federateID XXX not found for Business unit YYY | User not recognized on MySE for the given Business Unit. FederatedID is the unique identifier for the user in MySE database (UIMS and IDMS identifier)\n403 | Not_Authorized | User not authorized to access this functionality | User doesn’t have permission to access Returns information in mySE on the requested account.\n\n### #3. Technical error code for http return code 500\nUnexpected error\n\nHTTP status code | errorCode | errorMessage | comment\n-----------------|-----------|--------------|--------\n500 | NOK | An error has occured at <date> | Any other error or exception found. All technical errors are managed within this specific code.\n500 | Service_Unavailable | Unable to connect to MySE | Connection to MySE rejected or timeout.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/UserAuthorization"
          },
          {
            "name": "account-number",
            "in": "query",
            "description": "Purchaser Identifier : Account on which the request has to be done",
            "required": false,
            "type": "string"
          },
          {
            "name": "company-name",
            "in": "query",
            "description": "Company Name",
            "required": false,
            "type": "string"
          },
          {
            "name": "po-number",
            "in": "query",
            "description": "Purchaser Order number : PO Number.",
            "required": false,
            "type": "string"
          },
          {
            "name": "se-order-ref-number",
            "in": "query",
            "description": "Schneider orderNumber",
            "required": false,
            "type": "string"
          },
          {
            "name": "location",
            "in": "query",
            "description": "Account location",
            "required": false,
            "type": "string"
          },
          {
            "name": "invoice-number",
            "in": "query",
            "description": "Invoice number",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TemporaryAccountAccessList"
            },
            "examples": {
              "IDMS user login: USER_WS_ADMIN@yopmail.com, Business Unit: MySEES, purchaserId: 0003613400": {
                "accountList": [
                  {
                    "purchaserId": "0003613400",
                    "accountName": "GRUPO RIOJA-ASDRUBAL, S.L.",
                    "location": "MADRID, ISA"
                  }
                ]
              }
            }
          },
          "400": {
            "$ref": "#/responses/Common_Oas2_400"
          },
          "401": {
            "$ref": "#/responses/Common_Oas2_401"
          },
          "403": {
            "$ref": "#/responses/Common_Oas2_403"
          },
          "404": {
            "$ref": "#/responses/Common_Oas2_404"
          },
          "429": {
            "$ref": "#/responses/Common_Oas2_429"
          },
          "500": {
            "$ref": "#/responses/Common_Oas2_500"
          }
        }
      }
    },
    "/temporary-account-accesses/favourites/{business-unit}": {
      "parameters": [
        {
          "$ref": "#/parameters/businessUnit"
        }
      ],
      "get": {
        "operationId": "get-favorite-TAA-accounts",
        "summary": "Get list of favourite accounts accessible to a user via Temporary Account Access",
        "tags": [
          "Temporary Account Access"
        ],
        "description": "The aim of the *Favourite Temporary Account Access List* method is to retrieve the list of favourite accounts for a given *Business Unit* on which the user has the Temporary Account Access permission.\n\nThis method returns:\n* The detailed list of accounts (account number, name and location) defined by the user as his favourites to be used in Temporary Account Access mode.\n* The total number items in this list.\n\n### #1. Technical error code for http return code 400\n\nMissing mandatory parameter or invalid parameter value\n\nHTTP status code | errorCode | errorMessage | comment\n-----------------|-----------|--------------|--------\n400 | Empty_Authorization | Authorization token is not filled | No value provided in the mandatory X-IDMS-Authorization header parameter.\n400 | Empty_BusinessUnit | BusinessUnit is not Filled | No value provided in the mandatory businessUnit path parameter.\n400 | Invalid_BusinessUnit | Business Unit code does not exist in MySE | The requested Business Unit value does not exist in MySE.\n\n### #2. Technical error code for http return code 403\n\nInvalid authentication token or user not registered in mySE\n\nHTTP status code | errorCode | errorMessage | comment\n-----------------|-----------|--------------|--------\n403 | Invalid_Authorization | Invalid authorization token | Wrong token or invalid session on IDMS.\n403 | Expired_Authorization | Expired authorization token | The authorization token validity has expired, it must be renewed by the calling application\n403 | Invalid_User | User with federateID XXX not found for Business unit YYY | User not recognized on MySE for the given Business Unit. FederatedID is the unique identifier for the user in MySE database (UIMS and IDMS identifier)\n403 | Not_Authorized | User not authorized to access this functionality | User doesn’t have permission to access Returns information in mySE on the requested account.\n\n### #3. Technical error code for http return code 500\nUnexpected error\n\nHTTP status code | errorCode | errorMessage | comment\n-----------------|-----------|--------------|--------\n500 | NOK | An error has occured at <date> | Any other error or exception found. All technical errors are managed within this specific code.\n500 | Service_Unavailable | Unable to connect to MySE | Connection to MySE rejected or timeout.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/UserAuthorization"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TemporaryAccountAccessList"
            },
            "examples": {
              "IDMS user login: USER_WS_ADMIN@yopmail.com, Business Unit: MySEES": {
                "accountList": [
                  {
                    "purchaserId": "0003613400",
                    "accountName": "GRUPO RIOJA-ASDRUBAL, S.L.",
                    "location": "MADRID"
                  }
                ]
              }
            }
          },
          "400": {
            "$ref": "#/responses/Common_Oas2_400"
          },
          "401": {
            "$ref": "#/responses/Common_Oas2_401"
          },
          "403": {
            "$ref": "#/responses/Common_Oas2_403"
          },
          "404": {
            "$ref": "#/responses/Common_Oas2_404"
          },
          "429": {
            "$ref": "#/responses/Common_Oas2_429"
          },
          "500": {
            "$ref": "#/responses/Common_Oas2_500"
          }
        }
      }
    },
    "/temporary-account-accesses/favourites/{business-unit}/{purchaser-id}": {
      "parameters": [
        {
          "$ref": "#/parameters/businessUnit"
        },
        {
          "$ref": "#/parameters/purchaserId"
        }
      ],
      "post": {
        "operationId": "add-favority-TAA-account",
        "summary": "Add a favourite account for a user",
        "tags": [
          "Temporary Account Access"
        ],
        "description": "The aim of the *Add Favourite Temporary Account Access* method is to add an account to the list of a user's favourite accounts to be used in Temporary Account Access mode for a given *Business Unit*.\n\n### #1. Technical error code for http return code 400\n\nMissing mandatory parameter or invalid parameter value\n\nHTTP status code | errorCode | errorMessage | comment\n-----------------|-----------|--------------|--------\n400 | Empty_Authorization | Authorization token is not filled | No value provided in the mandatory X-IDMS-Authorization header parameter.\n400 | Empty_BusinessUnit | BusinessUnit is not Filled | No value provided in the mandatory businessUnit path parameter.\n400 | Invalid_BusinessUnit | Business Unit code does not exist in MySE | The requested Business Unit value does not exist in MySE.\n400 | Empty_PurchaserId | Purchaser ID is not filled | No value provided in the mandatory purchaserId path parameter.\n400 | Invalid_PurchaserId | Purchaser ID does not exist | The provided purchaser ID does not exist in mySE for the requested Business Unit.\n400 | PurchaserId_AlreadyAsFavourite | Purchaser ID already favourite | Purchaser ID is already set as favourite.\n\n### #2. Technical error code for http return code 403\n\nInvalid authentication token or user not registered in mySE\n\nHTTP status code | errorCode | errorMessage | comment\n-----------------|-----------|--------------|--------\n403 | Invalid_Authorization | Invalid authorization token | Wrong token or invalid session on IDMS.\n403 | Expired_Authorization | Expired authorization token | The authorization token validity has expired, it must be renewed by the calling application\n403 | Invalid_User | User with federateID XXX not found for Business unit YYY | User not recognized on MySE for the given Business Unit. FederatedID is the unique identifier for the user in MySE database (UIMS and IDMS identifier)\n403 | Not_Authorized | User not authorized to access this functionality | User doesn’t have permission to access Returns information in mySE on the requested account.\n\n### #3. Technical error code for http return code 500\nUnexpected error\n\nHTTP status code | errorCode | errorMessage | comment\n-----------------|-----------|--------------|--------\n500 | NOK | An error has occured at <date> | Any other error or exception found. All technical errors are managed within this specific code.\n500 | Service_Unavailable | Unable to connect to MySE | Connection to MySE rejected or timeout.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/UserAuthorization"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {
              "IDMS user login: USER_WS_ADMIN@yopmail.com, Business Unit: MySEES, purchaserId: 0003613400": "OK"
            }
          },
          "400": {
            "$ref": "#/responses/Common_Oas2_400"
          },
          "401": {
            "$ref": "#/responses/Common_Oas2_401"
          },
          "403": {
            "$ref": "#/responses/Common_Oas2_403"
          },
          "404": {
            "$ref": "#/responses/Common_Oas2_404"
          },
          "429": {
            "$ref": "#/responses/Common_Oas2_429"
          },
          "500": {
            "$ref": "#/responses/Common_Oas2_500"
          }
        }
      },
      "delete": {
        "operationId": "delete-favourite-TAA-account",
        "summary": "Remove a favourite temporary account for a user",
        "tags": [
          "Temporary Account Access"
        ],
        "description": "The aim of the *Delete Favourite Temporary Account Access* method is to remove an account from the list of a user's favourite accounts to be used in Temporary Account Access mode for a given *Business Unit*.\n\n### #1. Technical error code for http return code 400\n\nMissing mandatory parameter or invalid parameter value\n\nHTTP status code | errorCode | errorMessage | comment\n-----------------|-----------|--------------|--------\n400 | Empty_Authorization | Authorization token is not filled | No value provided in the mandatory X-IDMS-Authorization header parameter.\n400 | Empty_BusinessUnit | BusinessUnit is not Filled | No value provided in the mandatory businessUnit path parameter.\n400 | Invalid_BusinessUnit | Business Unit code does not exist in MySE | The requested Business Unit value does not exist in MySE.\n400 | Empty_PurchaserId | Purchaser ID is not filled | No value provided in the mandatory purchaserId path parameter.\n400 | Invalid_PurchaserId | Purchaser ID does not exist | The provided purchaser ID does not exist in mySE for the requested Business Unit.\n400 | PurchaserId_NotAFavourite | Purchaser ID not favourite | Purchaser ID is not as favourite.\n\n### #2. Technical error code for http return code 403\n\nInvalid authentication token or user not registered in mySE\n\nHTTP status code | errorCode | errorMessage | comment\n-----------------|-----------|--------------|--------\n403 | Invalid_Authorization | Invalid authorization token | Wrong token or invalid session on IDMS.\n403 | Expired_Authorization | Expired authorization token | The authorization token validity has expired, it must be renewed by the calling application\n403 | Invalid_User | User with federateID XXX not found for Business unit YYY | User not recognized on MySE for the given Business Unit. FederatedID is the unique identifier for the user in MySE database (UIMS and IDMS identifier)\n403 | Not_Authorized | User not authorized to access this functionality | User doesn’t have permission to access Returns information in mySE on the requested account.\n\n### #3. Technical error code for http return code 500\nUnexpected error\n\nHTTP status code | errorCode | errorMessage | comment\n-----------------|-----------|--------------|--------\n500 | NOK | An error has occured at <date> | Any other error or exception found. All technical errors are managed within this specific code.\n500 | Service_Unavailable | Unable to connect to MySE | Connection to MySE rejected or timeout.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/UserAuthorization"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {
              "IDMS user login: USER_WS_ADMIN@yopmail.com, Business Unit: MySEES, purchaserId: 0003613400": "OK"
            }
          },
          "400": {
            "$ref": "#/responses/Common_Oas2_400"
          },
          "401": {
            "$ref": "#/responses/Common_Oas2_401"
          },
          "403": {
            "$ref": "#/responses/Common_Oas2_403"
          },
          "404": {
            "$ref": "#/responses/Common_Oas2_404"
          },
          "429": {
            "$ref": "#/responses/Common_Oas2_429"
          },
          "500": {
            "$ref": "#/responses/Common_Oas2_500"
          }
        }
      }
    },
    "/temporary-account-accesses/requestable-accounts/{business-unit}": {
      "parameters": [
        {
          "$ref": "#/parameters/businessUnit"
        }
      ],
      "get": {
        "operationId": "get-TAA-requestable-accounts",
        "summary": "Get requestable Temporary Account Access accounts",
        "tags": [
          "Temporary Account Access Request"
        ],
        "description": "This method returns the list of accounts for which the user can request the Temporary Account Access permission.\nAccounts for which the user already have the permission or for which he has a pending request are not returned.\n\n### #1. Technical error code for http return code 400\n\nMissing mandatory parameter or invalid parameter value\n\nHTTP status code | errorCode | errorMessage | comment\n-----------------|-----------|--------------|--------\n400 | Empty_Authorization | Authorization token is not filled | No value provided in the mandatory X-IDMS-Authorization header parameter.\n400 | Empty_BusinessUnit | BusinessUnit is not Filled | No value provided in the mandatory businessUnit path parameter.\n400 | Invalid_BusinessUnit | Business Unit code does not exist in MySE | The requested Business Unit value does not exist in MySE.\n400 | Empty_PurchaserId | Purchaser ID is not filled | No value provided in the mandatory purchaserId path parameter.\n400 | User_NotInternal | User with userID is not internal | The provided user ID does not correspond to an internal User.\n\n### #2. Technical error code for http return code 403\n\nInvalid authentication token or user not registered in mySE\n\nHTTP status code | errorCode | errorMessage | comment\n-----------------|-----------|--------------|--------\n403 | Invalid_Authorization | Invalid authorization token | Wrong token or invalid session on IDMS.\n403 | Expired_Authorization | Expired authorization token | The authorization token validity has expired, it must be renewed by the calling application\n403 | Invalid_User | User with federateID XXX not found for Business unit YYY | User not recognized on MySE for the given Business Unit. FederatedID is the unique identifier for the user in MySE database (UIMS and IDMS identifier)\n403 | Not_Authorized | User not authorized to access this functionality | User doesn’t have permission to ask for TAA.\n\n### #3. Technical error code for http return code 500\nUnexpected error\n\nHTTP status code | errorCode | errorMessage | comment\n-----------------|-----------|--------------|--------\n500 | NOK | An error has occured at <date> | Any other error or exception found. All technical errors are managed within this specific code.\n500 | Service_Unavailable | Unable to connect to MySE | Connection to MySE rejected or timeout.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/UserAuthorization"
          },
          {
            "type": "string",
            "in": "query",
            "name": "purchaser-id",
            "description": "Purchaser Identifier: Accounts returned have this value as purchaser-id in their ID"
          },
          {
            "type": "string",
            "in": "query",
            "name": "account-name",
            "description": "Account name: Accounts returned have this value as their Account name"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TemporaryAccountAccessRequestList"
            },
            "examples": {
              "IDMS user login: USER_WS_ADMIN@yopmail.com, Business Unit: MySEES, purchaserId: 0003619": {
                "accountList": [
                  {
                    "purchaserId": "0003619500",
                    "accountName": "TOLEDO PV AEIE"
                  },
                  {
                    "purchaserId": "0003619600",
                    "accountName": "MAIC TECNICOS, S.A."
                  },
                  {
                    "purchaserId": "0003619800",
                    "accountName": "ELECTROMAT BALEAR, S.L"
                  }
                ]
              }
            }
          },
          "400": {
            "$ref": "#/responses/Common_Oas2_400"
          },
          "401": {
            "$ref": "#/responses/Common_Oas2_401"
          },
          "403": {
            "$ref": "#/responses/Common_Oas2_403"
          },
          "404": {
            "$ref": "#/responses/Common_Oas2_404"
          },
          "429": {
            "$ref": "#/responses/Common_Oas2_429"
          },
          "500": {
            "$ref": "#/responses/Common_Oas2_500"
          }
        }
      }
    },
    "/temporary-account-accesses/requests/{business-unit}": {
      "post": {
        "operationId": "request-TAA-permission",
        "summary": "Request the Temporary Account Access permission on a given list of accounts",
        "tags": [
          "Temporary Account Access Request"
        ],
        "description": "This methods is used to send a request for the Temporary Account Access permission on a list of accounts for a user.\nFor each account, the user can specify if the \"Order Release\" permission is also requested.\n\n### #1. Technical error code for http return code 400\n\nMissing mandatory parameter or invalid parameter value\n\nHTTP status code | errorCode | errorMessage | comment\n-----------------|-----------|--------------|--------\n400 | Empty_Authorization | Authorization token is not filled | No value provided in the mandatory X-IDMS-Authorization header parameter.\n400 | Empty_BusinessUnit | BusinessUnit is not Filled | No value provided in the mandatory businessUnit path parameter.\n400 | Invalid_BusinessUnit | Business Unit code does not exist in MySE | The requested Business Unit value does not exist in MySE.\n400 | Empty_PurchaserId | Purchaser ID is not filled | No value provided in the mandatory purchaserId path parameter.\n400 | Invalid_PurchaserId | Purchaser ID does not exist | The provided purchaser ID does not exist in mySE for the requested Business Unit.\n400 | User_NotInternal | User with userID is not internal | The provided user ID does not correspond to an internal User.\n\n### #2. Technical error code for http return code 403\n\nInvalid authentication token or user not registered in mySE\n\nHTTP status code | errorCode | errorMessage | comment\n-----------------|-----------|--------------|--------\n403 | Invalid_Authorization | Invalid authorization token | Wrong token or invalid session on IDMS.\n403 | Expired_Authorization | Expired authorization token | The authorization token validity has expired, it must be renewed by the calling application\n403 | Invalid_User | User with federateID XXX not found for Business unit YYY | User not recognized on MySE for the given Business Unit. FederatedID is the unique identifier for the user in MySE database (UIMS and IDMS identifier)\n403 | Not_Authorized | User not authorized to access this functionality | User doesn’t have permission to ask for TAA.\n\n### #3. Technical error code for http return code 500\nUnexpected error\n\nHTTP status code | errorCode | errorMessage | comment\n-----------------|-----------|--------------|--------\n500 | NOK | An error has occured at <date> | Any other error or exception found. All technical errors are managed within this specific code.\n500 | Service_Unavailable | Unable to connect to MySE | Connection to MySE rejected or timeout.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/UserAuthorization"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/TemporaryAccountAccessRequestedList"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {
              "IDMS user login: USER_WS_ADMIN@yopmail.com, Business Unit: MySEES, purchaserId: 0003613400": "OK"
            }
          },
          "400": {
            "$ref": "#/responses/Common_Oas2_400"
          },
          "401": {
            "$ref": "#/responses/Common_Oas2_401"
          },
          "403": {
            "$ref": "#/responses/Common_Oas2_403"
          },
          "404": {
            "$ref": "#/responses/Common_Oas2_404"
          },
          "429": {
            "$ref": "#/responses/Common_Oas2_429"
          },
          "500": {
            "$ref": "#/responses/Common_Oas2_500"
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/businessUnit"
        }
      ]
    }
  },
  "definitions": {
    "TemporaryAccountAccessList": {
      "type": "object",
      "description": "Temporary Account Access search information",
      "properties": {
        "accountList": {
          "type": "array",
          "description": "Account list",
          "items": {
            "$ref": "#/definitions/TemporaryAccountAccessItem"
          }
        }
      },
      "required": [
        "accountList"
      ]
    },
    "TemporaryAccountAccessRequestedList": {
      "type": "object",
      "description": "Temporary Account Access asking list",
      "properties": {
        "accountList": {
          "type": "array",
          "description": "Account list",
          "items": {
            "$ref": "#/definitions/TemporaryAccountAccessAskingItem"
          }
        }
      },
      "required": [
        "accountList"
      ]
    },
    "TemporaryAccountAccessRequestList": {
      "type": "object",
      "description": "Temporary Account Access askable list",
      "properties": {
        "accountList": {
          "type": "array",
          "description": "Account list",
          "items": {
            "$ref": "#/definitions/TemporaryAccountAccessAskableItem"
          }
        }
      }
    },
    "TemporaryAccountAccessItem": {
      "type": "object",
      "description": "account information",
      "properties": {
        "purchaserId": {
          "type": "string",
          "description": "Account number"
        },
        "accountName": {
          "type": "string",
          "description": "Account name"
        },
        "location": {
          "type": "string",
          "description": "Account location"
        },
        "releaseRight": {
          "type": "boolean",
          "description": "Indicate if the user has the permission to release an order on this account in Temporary Account Access mode"
        }
      },
      "required": [
        "purchaserId",
        "accountName"
      ]
    },
    "TemporaryAccountAccessAskingItem": {
      "type": "object",
      "description": "account information",
      "properties": {
        "purchaserId": {
          "type": "string",
          "description": "Account number"
        },
        "releaseRight": {
          "type": "boolean",
          "description": "Indicate if the user also asks for the permission to release an order on this account in Temporary Account Access mode"
        }
      },
      "required": [
        "purchaserId"
      ]
    },
    "TemporaryAccountAccessAskableItem": {
      "type": "object",
      "description": "account information",
      "properties": {
        "purchaserId": {
          "type": "string",
          "description": "Account number"
        },
        "accountName": {
          "type": "string",
          "description": "Company name"
        }
      }
    },
    "ErrorResponse": {
      "type": "object",
      "title": "Error Response - OAS2",
      "description": "Error response returned to the consumer when an HTTP error status has occurred.",
      "properties": {
        "code": {
          "type": "string",
          "example": "MISSING_FIELD or 12345",
          "description": "Service-defined error code which may be numeric or a string.\n\nErrors detected by the APIM platform result in the following codes.\n\nBAD_REQUEST (for 400)\nUNAUTHORIZED (for 401)\nFORBIDDEN (for 403)\nNOT_FOUND (for 404)\nGONE (for 410)\nPRECONDITION_FAILED (for 412)\nTOO_MANY_REQUESTS (for 429)\nINTERNAL_SERVER_ERROR (for 500)\nNOT_IMPLEMENTED (for 501)\n\nAny specific service validation errors would replace BAD_REQUEST."
        },
        "userMessage": {
          "type": "string",
          "example": "Required field is missing: productSku",
          "description": "Human-readable general description of the error."
        },
        "developerMessage": {
          "type": "string",
          "description": "Optional human-readable description of the error details.",
          "example": "Product master API ParseException: required tag <sku> expected"
        },
        "moreInfo": {
          "type": "string",
          "description": "Optional link to error documentation, which has more information about the error.",
          "format": "uri",
          "example": "https://example.com/product-master/v1/error/12345"
        }
      },
      "required": [
        "code",
        "userMessage"
      ]
    }
  },
  "parameters": {
    "UserAuthorization": {
      "name": "X-IDMS-Authorization",
      "in": "header",
      "type": "string",
      "description": "Authorization token for user identification in IDMS.\n\nExample:\nFor an IDMS OAuth token\n* X-IDMS-Authorization: 00D11000000Doh7!AR8AQI6cigc8axgaooyUti5MxTW4jOR_f5yO8ihmUo8RcM6aIwibBPv6yZ5trZBSXHPQq3nesns5l6.splDzUWttm8wteHpP",
      "required": true
    },
    "businessUnit": {
      "name": "business-unit",
      "in": "path",
      "type": "string",
      "required": true,
      "description": "MySE Business Unit: MySE identifier on which the request has to be done.\n\nCould be the actual MySE business unit name or the corresponding ACL name (e.g. MySEUS / myseMySEUS).\n\nExamples\n* MySEFR2\n* myseMySEGB\n* ITB"
    },
    "purchaserId": {
      "name": "purchaser-id",
      "in": "path",
      "type": "string",
      "required": true
    }
  },
  "schemes": [
    "https"
  ],
  "host": "api.qa.se.com",
  "produces": [
    "application/json"
  ],
  "securityDefinitions": {
    "apikey": {
      "type": "apiKey",
      "name": "apikey",
      "in": "header",
      "description": "For uses cases where the API service needs a user context to execute, please populate these headers when calling an API operation.\n\napi_key and X-IDMS-Authorization."
    },
    "oauth2": {
      "type": "oauth2",
      "flow": "application",
      "scopes": {},
      "tokenUrl": "https://api.qa.se.com/token",
      "description": "For system to system uses cases where the API service does not need a user context to execute, please use the provided APIM developer credentials to request a token, then submit the token via the Authorization Bearer header when calling an API operation.\n\nAfter one hour, a fresh APIM token needs to be requested."
    }
  },
  "security": [
    {
      "apikey": []
    },
    {
      "oauth2": []
    }
  ],
  "consumes": [],
  "responses": {
    "Common_Oas2_400": {
      "description": "Request is invalid and cannot be processed due one or more issues such as syntax errors, missing required fields, out of range values, conflicting query parameters, or unknown URI.",
      "schema": {
        "$ref": "#/definitions/ErrorResponse"
      },
      "examples": {
        "Example": {
          "code": "BAD_REQUEST",
          "userMessage": "Request is invalid and cannot be processed due one or more issues such as syntax errors, missing required fields, out of range values, conflicting query parameters, or unknown URI.",
          "developerMessage": "Request content is malformed or exceeded structural limits",
          "moreInfo": "https://example.com/error/123"
        }
      }
    },
    "Common_Oas2_401": {
      "description": "The client is not authorized to perform this request because its identity has not yet been established, or the token is invalid or has expired.",
      "schema": {
        "$ref": "#/definitions/ErrorResponse"
      },
      "examples": {
        "Example": {
          "code": "UNAUTHORIZED",
          "userMessage": "The client is not authorized to perform this request because its identity has not yet been established, or the token is invalid or has expired.",
          "developerMessage": "Invalid Access Token",
          "moreInfo": "https://example.com/error/123"
        }
      }
    },
    "Common_Oas2_403": {
      "description": "The client does not have permission to perform the requested action e.g. POST or DELETE.",
      "schema": {
        "$ref": "#/definitions/ErrorResponse"
      },
      "examples": {
        "Example": {
          "code": "FORBIDDEN",
          "userMessage": "The client does not have permission to perform the requested action e.g. POST or DELETE.",
          "developerMessage": "Http verb DELETE is not supported for path suffix /installed-products/track",
          "moreInfo": "https://example.com/error/123"
        }
      }
    },
    "Common_Oas2_404": {
      "description": "Requested resource does not exist on the server. It is assumed that the URI is valid for this type of resource.",
      "schema": {
        "$ref": "#/definitions/ErrorResponse"
      },
      "examples": {
        "Example": {
          "code": "NOT_FOUND",
          "userMessage": "Requested resource does not exist on the server. It is assumed that the URI is valid for this type of resource.",
          "developerMessage": "Records not found",
          "moreInfo": "https://example.com/error/123"
        }
      }
    },
    "Common_Oas2_429": {
      "description": "Number of requests has exceeded the client's rate limits.",
      "schema": {
        "$ref": "#/definitions/ErrorResponse"
      },
      "examples": {
        "Example": {
          "code": "TOO_MANY_REQUESTS",
          "userMessage": "Number of requests has exceeded the client’s rate limits.",
          "developerMessage": "Spike arrest violation",
          "moreInfo": "https://example.com/error/123"
        }
      }
    },
    "Common_Oas2_500": {
      "description": "Requested operation encountered an unexpected server error.",
      "schema": {
        "$ref": "#/definitions/ErrorResponse"
      },
      "examples": {
        "Example": {
          "code": "INTERNAL_SERVER_ERROR",
          "userMessage": "Requested operation encountered an unexpected server error.",
          "developerMessage": "Target service is unavailable, please try again later.",
          "moreInfo": "https://example.com/error/123"
        }
      }
    }
  }
}
