{
    "info": {
        "_postman_id": "2501f6a3-0e24-4d21-a15b-da9ad9a8991c",
        "name": "Pim-Product processed",
        "description": "API which provides a set of services to get product related data\n\nContact Support:\n Name: B\u00c3\u00a9rang\u00c3\u00a8re Odin\n Email: berangere.odin@se.com",
        "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
        {
            "name": "DT-A-01",
            "request": {
                "auth": {
                    "type": "bearer",
                    "bearer": [
                        {
                            "key": "token",
                            "value": "{{access_token}}",
                            "type": "string"
                        }
                    ]
                },
                "method": "GET",
                "header": [],
                "url": {
                    "raw": "{{baseUrl}}/characteristics?iso-country=GB&iso-language=en&version=4",
                    "host": [
                        "{{baseUrl}}"
                    ],
                    "path": [
                        "characteristics"
                    ],
                    "query": [
                        {
                            "key": "iso-country",
                            "value": "GB"
                        },
                        {
                            "key": "iso-language",
                            "value": "en"
                        },
                        {
                            "key": "characteristic-id",
                            "value": "1171387",
                            "disabled": true
                        },
                        {
                            "key": "version",
                            "value": "4"
                        }
                    ]
                },
                "description": "Provides details of a characteristic in the requested locale"
            },
            "response": [],
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "exec": [
                            ""
                        ],
                        "type": "text/javascript"
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "pm.test(\"Status test - Positve Response Check\", function () { pm.response.to.have.status(200); });"
                        ],
                        "type": "text/javascript"
                    }
                }
            ]
        },
        {
            "name": "DT-A-02",
            "request": {
                "auth": {
                    "type": "bearer",
                    "bearer": [
                        {
                            "key": "token",
                            "value": "{{access_token}}",
                            "type": "string"
                        }
                    ]
                },
                "method": "GET",
                "header": [],
                "url": {
                    "raw": "{{baseUrl}}/characteristics?iso-country=GB&iso-language=en&version=4",
                    "host": [
                        "{{baseUrl}}"
                    ],
                    "path": [
                        "characteristics"
                    ],
                    "query": [
                        {
                            "key": "iso-country",
                            "value": "GB"
                        },
                        {
                            "key": "iso-language",
                            "value": "en"
                        },
                        {
                            "key": "characteristic-id",
                            "value": "1171387",
                            "disabled": true
                        },
                        {
                            "key": "version",
                            "value": "4"
                        }
                    ]
                },
                "description": "Provides details of a characteristic in the requested locale"
            },
            "response": [],
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "exec": [
                            ""
                        ],
                        "type": "text/javascript"
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "pm.test(\"Status test - Positve Response Check\", function () { pm.response.to.have.status(200); });\r",
                            "\r",
                            "pm.test(\"response must be valid and have a body\", function () {\r",
                            "\r",
                            "     pm.response.to.be.ok;\r",
                            "\r",
                            "     pm.response.to.be.withBody;\r",
                            "\r",
                            "     pm.response.to.be.json;\r",
                            "\r",
                            "     pm.response.to.not.have.jsonBody(\"error\");\r",
                            "\r",
                            "     \r",
                            "\r",
                            "});\r",
                            "\r",
                            "\r",
                            "\r",
                            "\r",
                            "var schema ={\n \"title\": \"getCharacteristicDetailsResponse1\",\n \"required\": [\n  \"getCharacteristicDetailsResponse\"\n ],\n \"type\": \"object\",\n \"properties\": {\n  \"getCharacteristicDetailsResponse\": {\n   \"title\": \"getCharacteristicDetailsResponse\",\n   \"type\": \"object\",\n   \"properties\": {\n    \"Characteristic\": {\n     \"title\": \"baseCharacteristicBean\",\n     \"type\": \"object\",\n     \"description\": \"\",\n     \"properties\": {\n      \"charId\": {\n       \"type\":[\"string\",\"null\"]\n      },\n      \"charKey\": {\n       \"type\":[\"string\",\"null\"]\n      },\n      \"defaultLongDescription\": {\n       \"type\":[\"string\",\"null\"]\n      },\n      \"defaultShortDescription\": {\n       \"type\":[\"string\",\"null\"]\n      },\n      \"sourceSystem\": {\n       \"type\":[\"string\",\"null\"]\n      },\n      \"translations\": {\n       \"title\": \"translations\",\n       \"type\": \"object\",\n       \"properties\": {\n        \"translation\": {\n         \"type\": \"array\",\n         \"items\": {\n          \"title\": \"baseCharacteristicTranslationBean\",\n          \"type\": \"object\",\n          \"properties\": {\n           \"locale\": {\n            \"type\":[\"string\",\"null\"]\n           },\n           \"longDescription\": {\n            \"type\":[\"string\",\"null\"]\n           },\n           \"shortDescription\": {\n            \"type\":[\"string\",\"null\"]\n           }\n          },\n          \"description\": \"\"\n         },\n         \"description\": \"\"\n        }\n       },\n       \"description\": \"\"\n      }\n     }\n    }\n   },\n   \"description\": \"\"\n  }\n }\n} ;\r",
                            "\r",
                            "   \r",
                            "\r",
                            "   \r",
                            "\r",
                            "pm.test('Schema is valid', function() {\r",
                            "\r",
                            "  //pm.expect(tv4.validate(pm.response.json, schema)).to.be.true;\r",
                            "\r",
                            "  pm.response.to.have.jsonSchema(schema);\r",
                            "\r",
                            "});\r",
                            "\r",
                            "\r",
                            "\r",
                            "\r",
                            "pm.test(\"Content-Type header is present in request\", () => {\r",
                            "\r",
                            "  pm.request.to.have.header(\"Content-Type\");\r",
                            "\r",
                            "});\r",
                            "\r",
                            "\r",
                            "\r",
                            "pm.test(\"Content-Type header is application/json in Request\", () => {\r",
                            "\r",
                            "  pm.expect(pm.request.headers.get('Content-Type')).to.eql(\"application/json\");\r",
                            "\r"
                        ],
                        "type": "text/javascript"
                    }
                }
            ]
        },
        {
            "name": "DT-A-03",
            "request": {
                "auth": {
                    "type": "bearer",
                    "bearer": [
                        {
                            "key": "token",
                            "value": "{{access_token}}",
                            "type": "string"
                        }
                    ]
                },
                "method": "GET",
                "header": [],
                "url": {
                    "raw": "{{baseUrl}}/characteristics?iso-country=GB&iso-language=en&version=4",
                    "host": [
                        "{{baseUrl}}"
                    ],
                    "path": [
                        "characteristics"
                    ],
                    "query": [
                        {
                            "key": "iso-country",
                            "value": "GB"
                        },
                        {
                            "key": "iso-language",
                            "value": "en"
                        },
                        {
                            "key": "characteristic-id",
                            "value": "1171387",
                            "disabled": true
                        },
                        {
                            "key": "version",
                            "value": "4"
                        }
                    ]
                },
                "description": "Provides details of a characteristic in the requested locale"
            },
            "response": [],
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "pm.test(\"Status test - Mandatory Field Check\", function () { pm.response.to.have.status(400); });\r",
                            ""
                        ],
                        "type": "text/javascript"
                    }
                }
            ]
        },
        {
            "name": "DT-A-04",
            "request": {
                "auth": {
                    "type": "bearer",
                    "bearer": [
                        {
                            "key": "token",
                            "value": "{{access_token}}",
                            "type": "string"
                        }
                    ]
                },
                "method": "GET",
                "header": [],
                "url": {
                    "raw": "{{baseUrl}}/characteristics?iso-country=GB&iso-language=en&version=4",
                    "host": [
                        "{{baseUrl}}"
                    ],
                    "path": [
                        "characteristics"
                    ],
                    "query": [
                        {
                            "key": "iso-country",
                            "value": "GB"
                        },
                        {
                            "key": "iso-language",
                            "value": "en"
                        },
                        {
                            "key": "characteristic-id",
                            "value": "1171387",
                            "disabled": true
                        },
                        {
                            "key": "version",
                            "value": "4"
                        }
                    ]
                },
                "description": "Provides details of a characteristic in the requested locale"
            },
            "response": [],
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "pm.test(\"Response time is less than 55s\", function () { \r",
                            "\r",
                            "    pm.expect(pm.response.responseTime).to.be.below(55000); \r",
                            "\r",
                            "    // Default APIGEE timeout is 55 sec\r",
                            "\r",
                            "    });"
                        ],
                        "type": "text/javascript"
                    }
                }
            ]
        },
        {
            "name": "DT-A-05",
            "request": {
                "auth": {
                    "type": "bearer",
                    "bearer": [
                        {
                            "key": "token",
                            "value": "{{access_token}}",
                            "type": "string"
                        }
                    ]
                },
                "method": "GET",
                "header": [],
                "url": {
                    "raw": "{{baseUrl}}/characteristics?iso-country=GB&iso-language=en&version=4",
                    "host": [
                        "{{baseUrl}}"
                    ],
                    "path": [
                        "characteristics"
                    ],
                    "query": [
                        {
                            "key": "iso-country",
                            "value": "GB"
                        },
                        {
                            "key": "iso-language",
                            "value": "en"
                        },
                        {
                            "key": "characteristic-id",
                            "value": "1171387",
                            "disabled": true
                        },
                        {
                            "key": "version",
                            "value": "4"
                        }
                    ]
                },
                "description": "Provides details of a characteristic in the requested locale"
            },
            "response": [],
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "pm.test(\"Not failing\", function () {\r",
                            "    pm.expect(true).to.eql(false);\r",
                            "});\r",
                            "//difference between Not failing and unexpexted error code recieved -- Not failing means that on passing incorrect paramters still the backend is working fine but unexpected error code means that originally we expected X but instead from backend we got Y.\r",
                            "\r",
                            "// remove mandatory fields -- error should come but is not.\r",
                            "//Backend should throw error when mandatory fields are not passed -- giving 200 OK\r",
                            "// example -- \"salesDocumentType\": \"ZCV\" is mandatory field for the backend is not being passed , still the bakend is giving response."
                        ],
                        "type": "text/javascript"
                    }
                }
            ]
        },
        {
            "name": "DT-A-06",
            "request": {
                "auth": {
                    "type": "bearer",
                    "bearer": [
                        {
                            "key": "token",
                            "value": "{{access_token}}",
                            "type": "string"
                        }
                    ]
                },
                "method": "GET",
                "header": [],
                "url": {
                    "raw": "{{baseUrl}}/characteristics?iso-country=GB&iso-language=en&version=4",
                    "host": [
                        "{{baseUrl}}"
                    ],
                    "path": [
                        "characteristics"
                    ],
                    "query": [
                        {
                            "key": "iso-country",
                            "value": "GB"
                        },
                        {
                            "key": "iso-language",
                            "value": "en"
                        },
                        {
                            "key": "characteristic-id",
                            "value": "1171387",
                            "disabled": true
                        },
                        {
                            "key": "version",
                            "value": "4"
                        }
                    ]
                },
                "description": "Provides details of a characteristic in the requested locale"
            },
            "response": [],
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "pm.test(\"Status Test - Expected Error code\", function () {\r",
                            "    pm.expect(pm.response.code).to.equal(400);\r",
                            "});\r",
                            "\r",
                            "//BSL Service -- On removing mandatory fields backend returning 500 instead of 400 Bad Request.\r",
                            "\r",
                            "//difference between Not failing and unexpexted error code recieved -- Not failing means that on passing incorrect paramters still the backend is working fine but unexpected error code means that originally we expected X but instead from backend we got Y."
                        ],
                        "type": "text/javascript"
                    }
                }
            ]
        },
        {
            "name": "DT-B-01",
            "request": {
                "auth": {
                    "type": "bearer",
                    "bearer": [
                        {
                            "key": "token",
                            "value": "{{access_token}}",
                            "type": "string"
                        }
                    ]
                },
                "method": "POST",
                "header": [
                    {
                        "key": "Content-Type",
                        "value": "application/json"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": " { \"getProductDetailByCommercialRef\": {\n    \"scope\": {\n      \"brand\": \"Schneider\",\n      \"country\": \"CN\",\n      \"markets\": \"PRODUCT-MARKET\",\n      \"project\": \"STEP\",\n      \"channel\": \"1\"\n    },\n    \"locale\": {\n      \"isoCountry\": \"CN\",\n      \"isoLanguage\": \"zh\"\n    },\n    \"commercialRef\": \"DQ_PDS_481521.17P1\",\n    \"scopeIndependant\":\"true\",\n    \"query\": {\n        \"docType\": [\n            \"REACh Declaration\",\n            \"RoHs Declaration\"\n        ]\n    }\n  }\n}",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "{{baseUrl}}/products/search",
                    "host": [
                        "{{baseUrl}}"
                    ],
                    "path": [
                        "products",
                        "search"
                    ]
                },
                "description": "Provides details of a product in the requested locale. The product must be scoped for the requested target"
            },
            "response": [],
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "exec": [
                            ""
                        ],
                        "type": "text/javascript"
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "pm.test(\"Status test - Positve Response Check\", function () { pm.response.to.have.status(200); });"
                        ],
                        "type": "text/javascript"
                    }
                }
            ]
        },
        {
            "name": "DT-B-02",
            "request": {
                "auth": {
                    "type": "bearer",
                    "bearer": [
                        {
                            "key": "token",
                            "value": "{{access_token}}",
                            "type": "string"
                        }
                    ]
                },
                "method": "POST",
                "header": [
                    {
                        "key": "Content-Type",
                        "value": "application/json"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": " { \"getProductDetailByCommercialRef\": {\n    \"scope\": {\n      \"brand\": \"Schneider\",\n      \"country\": \"CN\",\n      \"markets\": \"PRODUCT-MARKET\",\n      \"project\": \"STEP\",\n      \"channel\": \"1\"\n    },\n    \"locale\": {\n      \"isoCountry\": \"CN\",\n      \"isoLanguage\": \"zh\"\n    },\n    \"commercialRef\": \"DQ_PDS_481521.17P1\",\n    \"scopeIndependant\":\"true\",\n    \"query\": {\n        \"docType\": [\n            \"REACh Declaration\",\n            \"RoHs Declaration\"\n        ]\n    }\n  }\n}",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "{{baseUrl}}/products/search",
                    "host": [
                        "{{baseUrl}}"
                    ],
                    "path": [
                        "products",
                        "search"
                    ]
                },
                "description": "Provides details of a product in the requested locale. The product must be scoped for the requested target"
            },
            "response": [],
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "exec": [
                            ""
                        ],
                        "type": "text/javascript"
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "pm.test(\"Status test - Positve Response Check\", function () { pm.response.to.have.status(200); });\r",
                            "\r",
                            "pm.test(\"response must be valid and have a body\", function () {\r",
                            "\r",
                            "     pm.response.to.be.ok;\r",
                            "\r",
                            "     pm.response.to.be.withBody;\r",
                            "\r",
                            "     pm.response.to.be.json;\r",
                            "\r",
                            "     pm.response.to.not.have.jsonBody(\"error\");\r",
                            "\r",
                            "     \r",
                            "\r",
                            "});\r",
                            "\r",
                            "\r",
                            "\r",
                            "\r",
                            "var schema ={\n \"title\": \"getProductDetailByCommercialRefResponse1\",\n \"required\": [\n  \"getProductDetailByCommercialRefResponse\"\n ],\n \"type\": \"object\",\n \"properties\": {\n  \"getProductDetailByCommercialRefResponse\": {\n   \"title\": \"getProductDetailByCommercialRefResponse\",\n   \"type\": \"object\",\n   \"properties\": {\n    \"ProductBean\": {\n     \"title\": \"productBean\",\n     \"type\": \"object\",\n     \"description\": \"\",\n     \"properties\": {\n      \"globalStatus\": {\n       \"type\":[\"string\",\"null\"]\n      },\n      \"oid\": {\n       \"type\":[\"integer\",\"null\"],\n       \"format\": \"int64\"\n      },\n      \"productId\": {\n       \"type\":[\"string\",\"null\"]\n      },\n      \"characteristicCategories\": {\n       \"title\": \"characteristicCategories\",\n       \"type\": \"object\",\n       \"properties\": {\n        \"category\": {\n         \"type\": \"array\",\n         \"items\": {\n          \"title\": \"characteristicCategoryBean\",\n          \"type\": \"object\",\n          \"properties\": {\n           \"name\": {\n            \"type\":[\"string\",\"null\"]\n           },\n           \"oid\": {\n            \"type\":[\"integer\",\"null\"],\n            \"format\": \"int64\"\n           },\n           \"characteristics\": {\n            \"title\": \"characteristics\",\n            \"type\": \"object\",\n            \"properties\": {\n             \"characteristic\": {\n              \"type\": \"array\",\n              \"items\": {\n               \"title\": \"characteristicBean\",\n               \"type\": \"object\",\n               \"properties\": {\n                \"charId\": {\n                 \"type\":[\"string\",\"null\"]\n                },\n                \"charKey\": {\n                 \"type\":[\"string\",\"null\"]\n                },\n                \"name\": {\n                 \"type\":[\"string\",\"null\"]\n                },\n                \"oid\": {\n                 \"type\":[\"integer\",\"null\"],\n                 \"format\": \"int64\"\n                },\n                \"shownInProductDetails\": {\n                 \"type\": \"boolean\"\n                },\n                \"showInProductList\": {\n                 \"type\": \"boolean\"\n                },\n                \"displayName\": {\n                 \"type\":[\"string\",\"null\"]\n                },\n                \"tag\": {\n                 \"title\": \"tag\",\n                 \"type\": \"object\",\n                 \"properties\": {\n                  \"value\": {\n                   \"type\": \"array\",\n                   \"items\": {\n                    \"title\": \"characteristicTagBean\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                     \"value\": {\n                      \"type\":[\"string\",\"null\"]\n                     }\n                    },\n                    \"description\": \"\"\n                   },\n                   \"description\": \"\"\n                  }\n                 },\n                 \"description\": \"\"\n                },\n                \"description\": {\n                 \"type\":[\"string\",\"null\"]\n                },\n                \"values\": {\n                 \"title\": \"values\",\n                 \"type\": \"object\",\n                 \"properties\": {\n                  \"value\": {\n                   \"type\": \"array\",\n                   \"items\": {\n                    \"title\": \"valueBean\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                     \"charKey\": {\n                      \"type\":[\"string\",\"null\"]\n                     },\n                     \"countryIso\": {\n                      \"type\":[\"string\",\"null\"]\n                     },\n                     \"countryName\": {\n                      \"type\":[\"string\",\"null\"]\n                     },\n                     \"countryOid\": {\n                      \"type\":[\"integer\",\"null\"],\n                      \"format\": \"int64\"\n                     },\n                     \"lockCase\": {\n                      \"type\": \"boolean\"\n                     },\n                     \"oid\": {\n                      \"type\":[\"integer\",\"null\"],\n                      \"format\": \"int64\"\n                     },\n                     \"unity\": {\n                      \"type\":[\"string\",\"null\"]\n                     },\n                     \"unityId\": {\n                      \"type\":[\"string\",\"null\"]\n                     },\n                     \"value\": {\n                      \"type\":[\"string\",\"null\"]\n                     },\n                     \"valueId\": {\n                      \"type\":[\"string\",\"null\"]\n                     },\n                     \"valueRendition\": {\n                      \"type\":[\"string\",\"null\"]\n                     },\n                     \"visible\": {\n                      \"type\": \"boolean\"\n                     },\n                     \"externetUrl\": {\n                      \"type\":[\"string\",\"null\"]\n                     },\n                     \"internaldocOid\": {\n                      \"type\":[\"integer\",\"null\"],\n                      \"format\": \"int64\"\n                     },\n                     \"labelUrl\": {\n                      \"type\":[\"string\",\"null\"]\n                     },\n                     \"valueLines\": {\n                      \"title\": \"valueLines\",\n                      \"type\": \"object\",\n                      \"properties\": {\n                       \"valueLine\": {\n                        \"type\": \"array\",\n                        \"items\": {\n                         \"title\": \"valueLine\",\n                         \"type\": \"object\",\n                         \"properties\": {\n                          \"charId\": {\n                           \"type\":[\"string\",\"null\"]\n                          },\n                          \"displayOrder\": {\n                           \"type\":[\"integer\",\"null\"],\n                           \"format\": \"int32\"\n                          },\n                          \"lockCase\": {\n                           \"type\": \"boolean\"\n                          },\n                          \"valuationId\": {\n                           \"type\":[\"string\",\"null\"]\n                          },\n                          \"valuationLabel\": {\n                           \"type\":[\"string\",\"null\"]\n                          },\n                          \"valueLineItems\": {\n                           \"title\": \"valueLineItems\",\n                           \"type\": \"object\",\n                           \"properties\": {\n                            \"valueLineItem\": {\n                             \"type\": \"array\",\n                             \"items\": {\n                              \"title\": \"valueLineItem\",\n                              \"type\": \"object\",\n                              \"properties\": {\n                               \"charId\": {\n                                \"type\":[\"string\",\"null\"]\n                               },\n                               \"charKey\": {\n                                \"type\":[\"string\",\"null\"]\n                               },\n                               \"name\": {\n                                \"type\":[\"string\",\"null\"]\n                               },\n                               \"valueKey\": {\n                                \"type\":[\"string\",\"null\"]\n                               },\n                               \"displayOrder\": {\n                                \"type\":[\"integer\",\"null\"],\n                                \"format\": \"int32\"\n                               },\n                               \"valuationId\": {\n                                \"type\":[\"string\",\"null\"]\n                               },\n                               \"valuationLabel\": {\n                                \"type\":[\"string\",\"null\"]\n                               }\n                              },\n                              \"description\": \"\"\n                             },\n                             \"description\": \"\"\n                            }\n                           },\n                           \"description\": \"\"\n                          }\n                         },\n                         \"description\": \"\"\n                        },\n                        \"description\": \"\"\n                       }\n                      },\n                      \"description\": \"\"\n                     },\n                     \"keepValue\": {\n                      \"type\": \"boolean\"\n                     },\n                     \"symbolicToBeDisplayed\": {\n                      \"type\":[\"string\",\"null\"]\n                     },\n                     \"textAfter\": {\n                      \"type\":[\"string\",\"null\"]\n                     },\n                     \"textBefore\": {\n                      \"type\":[\"string\",\"null\"]\n                     }\n                    },\n                    \"description\": \"\"\n                   },\n                   \"description\": \"\"\n                  }\n                 },\n                 \"description\": \"\"\n                }\n               },\n               \"description\": \"\"\n              },\n              \"description\": \"\"\n             }\n            },\n            \"description\": \"\"\n           }\n          },\n          \"description\": \"\"\n         },\n         \"description\": \"\"\n        }\n       },\n       \"description\": \"\"\n      },\n      \"commercialReference\": {\n       \"type\":[\"string\",\"null\"]\n      },\n      \"commercializedProduct\": {\n       \"title\": \"commercializedProductBean\",\n       \"type\": \"object\",\n       \"properties\": {\n        \"oid\": {\n         \"type\":[\"integer\",\"null\"],\n         \"format\": \"int64\"\n        },\n        \"brand\": {\n         \"type\":[\"string\",\"null\"]\n        },\n        \"commStatus\": {\n         \"type\":[\"string\",\"null\"]\n        },\n        \"commercialisationDate\": {\n         \"type\":[\"string\",\"null\"],\n         \"format\": \"date-time\"\n        },\n        \"commercialized\": {\n         \"type\": \"boolean\"\n        },\n        \"deliveryTime\": {\n         \"type\":[\"string\",\"null\"]\n        },\n        \"description\": {\n         \"type\":[\"string\",\"null\"]\n        },\n        \"endOfCommercialisationDate\": {\n         \"type\":[\"string\",\"null\"],\n         \"format\": \"date-time\"\n        },\n        \"endOfServiceDate\": {\n         \"type\":[\"string\",\"null\"],\n         \"format\": \"date-time\"\n        },\n        \"localeDistributorCode\": {\n         \"type\":[\"string\",\"null\"]\n        },\n        \"localeSaleStatus\": {\n         \"type\":[\"string\",\"null\"]\n        },\n        \"localeStockStatus\": {\n         \"type\":[\"string\",\"null\"]\n        },\n        \"nbDeliveryDays\": {\n         \"type\":[\"integer\",\"null\"],\n         \"format\": \"int32\"\n        },\n        \"price\": {\n         \"title\": \"priceBean\",\n         \"type\": \"object\",\n         \"properties\": {\n          \"oid\": {\n           \"type\":[\"integer\",\"null\"],\n           \"format\": \"int64\"\n          },\n          \"comments\": {\n           \"type\":[\"string\",\"null\"]\n          },\n          \"currency\": {\n           \"type\":[\"string\",\"null\"]\n          },\n          \"price\": {\n           \"type\":[\"string\",\"null\"]\n          },\n          \"validFrom\": {\n           \"type\":[\"string\",\"null\"],\n           \"format\": \"date-time\"\n          },\n          \"validTo\": {\n           \"type\":[\"string\",\"null\"],\n           \"format\": \"date-time\"\n          },\n          \"value\": {\n           \"type\": \"number\"\n          }\n         },\n         \"description\": \"\"\n        }\n       },\n       \"description\": \"\"\n      },\n      \"description\": {\n       \"type\":[\"string\",\"null\"]\n      },\n      \"documentOids\": {\n       \"title\": \"documentOids\",\n       \"type\": \"object\",\n       \"properties\": {\n        \"oid\": {\n         \"type\": \"array\",\n         \"items\": {\n          \"type\":[\"integer\",\"null\"],\n          \"format\": \"int64\"\n         },\n         \"description\": \"\"\n        }\n       },\n       \"description\": \"\"\n      },\n      \"eanCode\": {\n       \"type\":[\"string\",\"null\"]\n      },\n      \"epdsDocumentOid\": {\n       \"type\":[\"integer\",\"null\"],\n       \"format\": \"int64\"\n      },\n      \"greenPremium\": {\n       \"type\": \"boolean\"\n      },\n      \"highligthedCharacteristics\": {\n       \"title\": \"highligthedCharacteristics\",\n       \"type\": \"object\",\n       \"properties\": {\n        \"characteristic\": {\n         \"type\": \"array\",\n         \"items\": {\n          \"title\": \"characteristicBean\",\n          \"type\": \"object\",\n          \"properties\": {\n           \"charId\": {\n            \"type\":[\"string\",\"null\"]\n           },\n           \"charKey\": {\n            \"type\":[\"string\",\"null\"]\n           },\n           \"name\": {\n            \"type\":[\"string\",\"null\"]\n           },\n           \"oid\": {\n            \"type\":[\"integer\",\"null\"],\n            \"format\": \"int64\"\n           },\n           \"shownInProductDetails\": {\n            \"type\": \"boolean\"\n           },\n           \"showInProductList\": {\n            \"type\": \"boolean\"\n           },\n           \"displayName\": {\n            \"type\":[\"string\",\"null\"]\n           },\n           \"tag\": {\n            \"title\": \"tag\",\n            \"type\": \"object\",\n            \"properties\": {\n             \"value\": {\n              \"type\": \"array\",\n              \"items\": {\n               \"title\": \"characteristicTagBean\",\n               \"type\": \"object\",\n               \"properties\": {\n                \"value\": {\n                 \"type\":[\"string\",\"null\"]\n                }\n               },\n               \"description\": \"\"\n              },\n              \"description\": \"\"\n             }\n            },\n            \"description\": \"\"\n           },\n           \"description\": {\n            \"type\":[\"string\",\"null\"]\n           },\n           \"values\": {\n            \"title\": \"values\",\n            \"type\": \"object\",\n            \"properties\": {\n             \"value\": {\n              \"type\": \"array\",\n              \"items\": {\n               \"title\": \"valueBean\",\n               \"type\": \"object\",\n               \"properties\": {\n                \"charKey\": {\n                 \"type\":[\"string\",\"null\"]\n                },\n                \"countryIso\": {\n                 \"type\":[\"string\",\"null\"]\n                },\n                \"countryName\": {\n                 \"type\":[\"string\",\"null\"]\n                },\n                \"countryOid\": {\n                 \"type\":[\"integer\",\"null\"],\n                 \"format\": \"int64\"\n                },\n                \"lockCase\": {\n                 \"type\": \"boolean\"\n                },\n                \"oid\": {\n                 \"type\":[\"integer\",\"null\"],\n                 \"format\": \"int64\"\n                },\n                \"unity\": {\n                 \"type\":[\"string\",\"null\"]\n                },\n                \"unityId\": {\n                 \"type\":[\"string\",\"null\"]\n                },\n                \"value\": {\n                 \"type\":[\"string\",\"null\"]\n                },\n                \"valueId\": {\n                 \"type\":[\"string\",\"null\"]\n                },\n                \"valueRendition\": {\n                 \"type\":[\"string\",\"null\"]\n                },\n                \"visible\": {\n                 \"type\": \"boolean\"\n                },\n                \"externetUrl\": {\n                 \"type\":[\"string\",\"null\"]\n                },\n                \"internaldocOid\": {\n                 \"type\":[\"integer\",\"null\"],\n                 \"format\": \"int64\"\n                },\n                \"labelUrl\": {\n                 \"type\":[\"string\",\"null\"]\n                },\n                \"valueLines\": {\n                 \"title\": \"valueLines\",\n                 \"type\": \"object\",\n                 \"properties\": {\n                  \"valueLine\": {\n                   \"type\": \"array\",\n                   \"items\": {\n                    \"title\": \"valueLine\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                     \"charId\": {\n                      \"type\":[\"string\",\"null\"]\n                     },\n                     \"displayOrder\": {\n                      \"type\":[\"integer\",\"null\"],\n                      \"format\": \"int32\"\n                     },\n                     \"lockCase\": {\n                      \"type\": \"boolean\"\n                     },\n                     \"valuationId\": {\n                      \"type\":[\"string\",\"null\"]\n                     },\n                     \"valuationLabel\": {\n                      \"type\":[\"string\",\"null\"]\n                     },\n                     \"valueLineItems\": {\n                      \"title\": \"valueLineItems\",\n                      \"type\": \"object\",\n                      \"properties\": {\n                       \"valueLineItem\": {\n                        \"type\": \"array\",\n                        \"items\": {\n                         \"title\": \"valueLineItem\",\n                         \"type\": \"object\",\n                         \"properties\": {\n                          \"charId\": {\n                           \"type\":[\"string\",\"null\"]\n                          },\n                          \"charKey\": {\n                           \"type\":[\"string\",\"null\"]\n                          },\n                          \"name\": {\n                           \"type\":[\"string\",\"null\"]\n                          },\n                          \"valueKey\": {\n                           \"type\":[\"string\",\"null\"]\n                          },\n                          \"displayOrder\": {\n                           \"type\":[\"integer\",\"null\"],\n                           \"format\": \"int32\"\n                          },\n                          \"valuationId\": {\n                           \"type\":[\"string\",\"null\"]\n                          },\n                          \"valuationLabel\": {\n                           \"type\":[\"string\",\"null\"]\n                          }\n                         },\n                         \"description\": \"\"\n                        },\n                        \"description\": \"\"\n                       }\n                      },\n                      \"description\": \"\"\n                     }\n                    },\n                    \"description\": \"\"\n                   },\n                   \"description\": \"\"\n                  }\n                 },\n                 \"description\": \"\"\n                },\n                \"keepValue\": {\n                 \"type\": \"boolean\"\n                },\n                \"symbolicToBeDisplayed\": {\n                 \"type\":[\"string\",\"null\"]\n                },\n                \"textAfter\": {\n                 \"type\":[\"string\",\"null\"]\n                },\n                \"textBefore\": {\n                 \"type\":[\"string\",\"null\"]\n                }\n               },\n               \"description\": \"\"\n              },\n              \"description\": \"\"\n             }\n            },\n            \"description\": \"\"\n           }\n          },\n          \"description\": \"\"\n         },\n         \"description\": \"\"\n        }\n       },\n       \"description\": \"\"\n      },\n      \"logoDocumentOid\": {\n       \"type\":[\"integer\",\"null\"],\n       \"format\": \"int64\"\n      },\n      \"longDescription\": {\n       \"type\":[\"string\",\"null\"]\n      },\n      \"parentNodeOid\": {\n       \"type\":[\"integer\",\"null\"],\n       \"format\": \"int64\"\n      },\n      \"parentRangeId\": {\n       \"type\":[\"string\",\"null\"]\n      },\n      \"parentRangeOid\": {\n       \"type\":[\"integer\",\"null\"],\n       \"format\": \"int64\"\n      },\n      \"pictureDocumentOid\": {\n       \"type\":[\"integer\",\"null\"],\n       \"format\": \"int64\"\n      },\n      \"parents\": {\n       \"title\": \"parents\",\n       \"type\": \"object\",\n       \"properties\": {\n        \"parent\": {\n         \"type\": \"array\",\n         \"items\": {\n          \"title\": \"productParentBean\",\n          \"type\": \"object\",\n          \"properties\": {\n           \"nodeOid\": {\n            \"type\":[\"integer\",\"null\"],\n            \"format\": \"int64\"\n           },\n           \"rangeId\": {\n            \"type\":[\"string\",\"null\"]\n           },\n           \"rangeOid\": {\n            \"type\":[\"integer\",\"null\"],\n            \"format\": \"int64\"\n           }\n          },\n          \"description\": \"\"\n         },\n         \"description\": \"\"\n        }\n       },\n       \"description\": \"\"\n      },\n      \"ranges\": {\n       \"title\": \"ranges\",\n       \"type\": \"object\",\n       \"properties\": {\n        \"range\": {\n         \"type\": \"array\",\n         \"items\": {\n          \"title\": \"rangeLightBean\",\n          \"type\": \"object\",\n          \"properties\": {\n           \"id\": {\n            \"type\":[\"string\",\"null\"]\n           },\n           \"oid\": {\n            \"type\":[\"integer\",\"null\"],\n            \"format\": \"int64\"\n           },\n           \"name\": {\n            \"type\":[\"string\",\"null\"]\n           }\n          },\n          \"description\": \"\"\n         },\n         \"description\": \"\"\n        }\n       },\n       \"description\": \"\"\n      },\n      \"semanticCharacteristics\": {\n       \"title\": \"semanticCharacteristics\",\n       \"type\": \"object\",\n       \"properties\": {\n        \"characteristic\": {\n         \"type\": \"array\",\n         \"items\": {\n          \"title\": \"characteristicBean\",\n          \"type\": \"object\",\n          \"properties\": {\n           \"charId\": {\n            \"type\":[\"string\",\"null\"]\n           },\n           \"charKey\": {\n            \"type\":[\"string\",\"null\"]\n           },\n           \"name\": {\n            \"type\":[\"string\",\"null\"]\n           },\n           \"oid\": {\n            \"type\":[\"integer\",\"null\"],\n            \"format\": \"int64\"\n           },\n           \"shownInProductDetails\": {\n            \"type\": \"boolean\"\n           },\n           \"showInProductList\": {\n            \"type\": \"boolean\"\n           },\n           \"displayName\": {\n            \"type\":[\"string\",\"null\"]\n           },\n           \"tag\": {\n            \"title\": \"tag\",\n            \"type\": \"object\",\n            \"properties\": {\n             \"value\": {\n              \"type\": \"array\",\n              \"items\": {\n               \"title\": \"characteristicTagBean\",\n               \"type\": \"object\",\n               \"properties\": {\n                \"value\": {\n                 \"type\":[\"string\",\"null\"]\n                }\n               },\n               \"description\": \"\"\n              },\n              \"description\": \"\"\n             }\n            },\n            \"description\": \"\"\n           },\n           \"description\": {\n            \"type\":[\"string\",\"null\"]\n           },\n           \"values\": {\n            \"title\": \"values\",\n            \"type\": \"object\",\n            \"properties\": {\n             \"value\": {\n              \"type\": \"array\",\n              \"items\": {\n               \"title\": \"valueBean\",\n               \"type\": \"object\",\n               \"properties\": {\n                \"charKey\": {\n                 \"type\":[\"string\",\"null\"]\n                },\n                \"countryIso\": {\n                 \"type\":[\"string\",\"null\"]\n                },\n                \"countryName\": {\n                 \"type\":[\"string\",\"null\"]\n                },\n                \"countryOid\": {\n                 \"type\":[\"integer\",\"null\"],\n                 \"format\": \"int64\"\n                },\n                \"lockCase\": {\n                 \"type\": \"boolean\"\n                },\n                \"oid\": {\n                 \"type\":[\"integer\",\"null\"],\n                 \"format\": \"int64\"\n                },\n                \"unity\": {\n                 \"type\":[\"string\",\"null\"]\n                },\n                \"unityId\": {\n                 \"type\":[\"string\",\"null\"]\n                },\n                \"value\": {\n                 \"type\":[\"string\",\"null\"]\n                },\n                \"valueId\": {\n                 \"type\":[\"string\",\"null\"]\n                },\n                \"valueRendition\": {\n                 \"type\":[\"string\",\"null\"]\n                },\n                \"visible\": {\n                 \"type\": \"boolean\"\n                },\n                \"externetUrl\": {\n                 \"type\":[\"string\",\"null\"]\n                },\n                \"internaldocOid\": {\n                 \"type\":[\"integer\",\"null\"],\n                 \"format\": \"int64\"\n                },\n                \"labelUrl\": {\n                 \"type\":[\"string\",\"null\"]\n                },\n                \"valueLines\": {\n                 \"title\": \"valueLines\",\n                 \"type\": \"object\",\n                 \"properties\": {\n                  \"valueLine\": {\n                   \"type\": \"array\",\n                   \"items\": {\n                    \"title\": \"valueLine\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                     \"charId\": {\n                      \"type\":[\"string\",\"null\"]\n                     },\n                     \"displayOrder\": {\n                      \"type\":[\"integer\",\"null\"],\n                      \"format\": \"int32\"\n                     },\n                     \"lockCase\": {\n                      \"type\": \"boolean\"\n                     },\n                     \"valuationId\": {\n                      \"type\":[\"string\",\"null\"]\n                     },\n                     \"valuationLabel\": {\n                      \"type\":[\"string\",\"null\"]\n                     },\n                     \"valueLineItems\": {\n                      \"title\": \"valueLineItems\",\n                      \"type\": \"object\",\n                      \"properties\": {\n                       \"valueLineItem\": {\n                        \"type\": \"array\",\n                        \"items\": {\n                         \"title\": \"valueLineItem\",\n                         \"type\": \"object\",\n                         \"properties\": {\n                          \"charId\": {\n                           \"type\":[\"string\",\"null\"]\n                          },\n                          \"charKey\": {\n                           \"type\":[\"string\",\"null\"]\n                          },\n                          \"name\": {\n                           \"type\":[\"string\",\"null\"]\n                          },\n                          \"valueKey\": {\n                           \"type\":[\"string\",\"null\"]\n                          },\n                          \"displayOrder\": {\n                           \"type\":[\"integer\",\"null\"],\n                           \"format\": \"int32\"\n                          },\n                          \"valuationId\": {\n                           \"type\":[\"string\",\"null\"]\n                          },\n                          \"valuationLabel\": {\n                           \"type\":[\"string\",\"null\"]\n                          }\n                         },\n                         \"description\": \"\"\n                        },\n                        \"description\": \"\"\n                       }\n                      },\n                      \"description\": \"\"\n                     }\n                    },\n                    \"description\": \"\"\n                   },\n                   \"description\": \"\"\n                  }\n                 },\n                 \"description\": \"\"\n                },\n                \"keepValue\": {\n                 \"type\": \"boolean\"\n                },\n                \"symbolicToBeDisplayed\": {\n                 \"type\":[\"string\",\"null\"]\n                },\n                \"textAfter\": {\n                 \"type\":[\"string\",\"null\"]\n                },\n                \"textBefore\": {\n                 \"type\":[\"string\",\"null\"]\n                }\n               },\n               \"description\": \"\"\n              },\n              \"description\": \"\"\n             }\n            },\n            \"description\": \"\"\n           }\n          },\n          \"description\": \"\"\n         },\n         \"description\": \"\"\n        }\n       },\n       \"description\": \"\"\n      },\n      \"shortDescription\": {\n       \"type\":[\"string\",\"null\"]\n      },\n      \"documentReferences\": {\n       \"title\": \"documentReferences1\",\n       \"type\": \"object\",\n       \"properties\": {\n        \"reference\": {\n         \"type\": \"array\",\n         \"items\": {\n          \"title\": \"documentReferenceBean\",\n          \"type\": \"object\",\n          \"properties\": {\n           \"docType\": {\n            \"type\":[\"string\",\"null\"]\n           },\n           \"docTypeOid\": {\n            \"type\":[\"integer\",\"null\"],\n            \"format\": \"int64\"\n           },\n           \"scoped\": {\n            \"type\": \"boolean\"\n           },\n           \"bannerURL\": {\n            \"type\":[\"string\",\"null\"]\n           },\n           \"main\": {\n            \"type\": \"boolean\"\n           },\n           \"reference\": {\n            \"type\":[\"string\",\"null\"]\n           }\n          },\n          \"description\": \"\"\n         },\n         \"description\": \"\"\n        }\n       },\n       \"description\": \"\"\n      },\n      \"pictureDocumentReference\": {\n       \"type\":[\"string\",\"null\"]\n      },\n      \"pictures\": {\n       \"title\": \"pictures\",\n       \"type\": \"object\",\n       \"properties\": {\n        \"picture\": {\n         \"type\": \"array\",\n         \"items\": {\n          \"title\": \"pictureBean\",\n          \"type\": \"object\",\n          \"properties\": {\n           \"description\": {\n            \"type\":[\"string\",\"null\"]\n           },\n           \"id\": {\n            \"type\":[\"integer\",\"null\"],\n            \"format\": \"int64\"\n           },\n           \"pictureDocumentOid\": {\n            \"type\":[\"integer\",\"null\"],\n            \"format\": \"int64\"\n           },\n           \"pictureDocumentReference\": {\n            \"type\":[\"string\",\"null\"]\n           },\n           \"pictureType\": {\n            \"type\":[\"string\",\"null\"]\n           }\n          },\n          \"description\": \"\"\n         },\n         \"description\": \"\"\n        }\n       },\n       \"description\": \"\"\n      },\n      \"type\": {\n       \"type\":[\"string\",\"null\"]\n      },\n      \"subType\": {\n       \"type\":[\"string\",\"null\"]\n      },\n      \"specificCountries\": {\n       \"title\": \"specificCountries\",\n       \"type\": \"object\",\n       \"properties\": {\n        \"country\": {\n         \"type\": \"array\",\n         \"items\": {\n          \"title\": \"specificCountriesBean\",\n          \"type\": \"object\",\n          \"properties\": {\n           \"isoCountry\": {\n            \"type\":[\"string\",\"null\"]\n           },\n           \"publicationdate\": {\n            \"type\":[\"string\",\"null\"],\n            \"format\": \"date-time\"\n           }\n          },\n          \"description\": \"\"\n         },\n         \"description\": \"\"\n        }\n       },\n       \"description\": \"\"\n      },\n      \"featureAndBenefitList\": {\n       \"title\": \"featureAndBenefitList\",\n       \"type\": \"object\",\n       \"properties\": {\n        \"featureAndBenefit\": {\n         \"type\": \"array\",\n         \"items\": {\n          \"title\": \"productFeatureBenefitBean\",\n          \"type\": \"object\",\n          \"properties\": {\n           \"categoryId\": {\n            \"type\":[\"string\",\"null\"]\n           },\n           \"featureAndBenefitId\": {\n            \"type\":[\"string\",\"null\"]\n           },\n           \"featureName\": {\n            \"type\":[\"string\",\"null\"]\n           },\n           \"benefitValue\": {\n            \"type\":[\"string\",\"null\"]\n           },\n           \"category\": {\n            \"type\":[\"string\",\"null\"]\n           }\n          },\n          \"description\": \"\"\n         },\n         \"description\": \"\"\n        }\n       },\n       \"description\": \"\"\n      },\n      \"pimAssets\": {\n       \"title\": \"pimAssets\",\n       \"type\": \"object\",\n       \"properties\": {\n        \"pimAsset\": {\n         \"type\": \"array\",\n         \"items\": {\n          \"title\": \"productPimAssetBean\",\n          \"type\": \"object\",\n          \"properties\": {\n           \"assetId\": {\n            \"type\":[\"string\",\"null\"]\n           },\n           \"displayOrder\": {\n            \"type\":[\"integer\",\"null\"],\n            \"format\": \"int32\"\n           }\n          },\n          \"description\": \"\"\n         },\n         \"description\": \"\"\n        }\n       },\n       \"description\": \"\"\n      },\n      \"isEnergyStarCompliant\": {\n       \"type\": \"boolean\"\n      },\n      \"shoppable\": {\n       \"title\": \"shoppableBean\",\n       \"type\": \"object\",\n       \"properties\": {\n        \"consumers\": {\n         \"type\": \"boolean\"\n        },\n        \"professionals\": {\n         \"type\": \"boolean\"\n        }\n       }\n      }\n     }\n    }\n   },\n   \"description\": \"\"\n  }\n }\n} ;\r",
                            "\r",
                            "   \r",
                            "\r",
                            "   \r",
                            "\r",
                            "pm.test('Schema is valid', function() {\r",
                            "\r",
                            "  //pm.expect(tv4.validate(pm.response.json, schema)).to.be.true;\r",
                            "\r",
                            "  pm.response.to.have.jsonSchema(schema);\r",
                            "\r",
                            "});\r",
                            "\r",
                            "\r",
                            "\r",
                            "\r",
                            "pm.test(\"Content-Type header is present in request\", () => {\r",
                            "\r",
                            "  pm.request.to.have.header(\"Content-Type\");\r",
                            "\r",
                            "});\r",
                            "\r",
                            "\r",
                            "\r",
                            "pm.test(\"Content-Type header is application/json in Request\", () => {\r",
                            "\r",
                            "  pm.expect(pm.request.headers.get('Content-Type')).to.eql(\"application/json\");\r",
                            "\r",
                            "});\r",
                            "\r",
                            "\r",
                            "\r",
                            "pm.test(\"Content-Type header is present in response\", () => {\r",
                            "\r",
                            "  pm.response.to.have.header(\"Content-Type\");\r",
                            "\r",
                            "});"
                        ],
                        "type": "text/javascript"
                    }
                }
            ]
        },
        {
            "name": "DT-B-03",
            "request": {
                "auth": {
                    "type": "bearer",
                    "bearer": [
                        {
                            "key": "token",
                            "value": "{{access_token}}",
                            "type": "string"
                        }
                    ]
                },
                "method": "POST",
                "header": [
                    {
                        "key": "Content-Type",
                        "value": "application/json"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": " { \"getProductDetailByCommercialRef\": {\n    \"scope\": {\n      \"brand\": \"Schneider\",\n      \"country\": \"CN\",\n      \"markets\": \"PRODUCT-MARKET\",\n      \"project\": \"STEP\",\n      \"channel\": \"1\"\n    },\n    \"locale\": {\n      \"isoCountry\": \"CN\",\n      \"isoLanguage\": \"zh\"\n    },\n    \"commercialRef\": \"DQ_PDS_481521.17P1\",\n    \"scopeIndependant\":\"true\",\n    \"query\": {\n        \"docType\": [\n            \"REACh Declaration\",\n            \"RoHs Declaration\"\n        ]\n    }\n  }\n}",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "{{baseUrl}}/products/search",
                    "host": [
                        "{{baseUrl}}"
                    ],
                    "path": [
                        "products",
                        "search"
                    ]
                },
                "description": "Provides details of a product in the requested locale. The product must be scoped for the requested target"
            },
            "response": [],
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "pm.test(\"Status test - Mandatory Field Check\", function () { pm.response.to.have.status(400); });\r",
                            ""
                        ],
                        "type": "text/javascript"
                    }
                }
            ]
        },
        {
            "name": "DT-B-04",
            "request": {
                "auth": {
                    "type": "bearer",
                    "bearer": [
                        {
                            "key": "token",
                            "value": "{{access_token}}",
                            "type": "string"
                        }
                    ]
                },
                "method": "POST",
                "header": [
                    {
                        "key": "Content-Type",
                        "value": "application/json"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": " { \"getProductDetailByCommercialRef\": {\n    \"scope\": {\n      \"brand\": \"Schneider\",\n      \"country\": \"CN\",\n      \"markets\": \"PRODUCT-MARKET\",\n      \"project\": \"STEP\",\n      \"channel\": \"1\"\n    },\n    \"locale\": {\n      \"isoCountry\": \"CN\",\n      \"isoLanguage\": \"zh\"\n    },\n    \"commercialRef\": \"DQ_PDS_481521.17P1\",\n    \"scopeIndependant\":\"true\",\n    \"query\": {\n        \"docType\": [\n            \"REACh Declaration\",\n            \"RoHs Declaration\"\n        ]\n    }\n  }\n}",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "{{baseUrl}}/products/search",
                    "host": [
                        "{{baseUrl}}"
                    ],
                    "path": [
                        "products",
                        "search"
                    ]
                },
                "description": "Provides details of a product in the requested locale. The product must be scoped for the requested target"
            },
            "response": [],
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "pm.test(\"Response time is less than 55s\", function () { \r",
                            "\r",
                            "    pm.expect(pm.response.responseTime).to.be.below(55000); \r",
                            "\r",
                            "    // Default APIGEE timeout is 55 sec\r",
                            "\r",
                            "    });"
                        ],
                        "type": "text/javascript"
                    }
                }
            ]
        },
        {
            "name": "DT-B-05",
            "request": {
                "auth": {
                    "type": "bearer",
                    "bearer": [
                        {
                            "key": "token",
                            "value": "{{access_token}}",
                            "type": "string"
                        }
                    ]
                },
                "method": "POST",
                "header": [
                    {
                        "key": "Content-Type",
                        "value": "application/json"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": " { \"getProductDetailByCommercialRef\": {\n    \"scope\": {\n      \"brand\": \"Schneider\",\n      \"country\": \"CN\",\n      \"markets\": \"PRODUCT-MARKET\",\n      \"project\": \"STEP\",\n      \"channel\": \"1\"\n    },\n    \"locale\": {\n      \"isoCountry\": \"CN\",\n      \"isoLanguage\": \"zh\"\n    },\n    \"commercialRef\": \"DQ_PDS_481521.17P1\",\n    \"scopeIndependant\":\"true\",\n    \"query\": {\n        \"docType\": [\n            \"REACh Declaration\",\n            \"RoHs Declaration\"\n        ]\n    }\n  }\n}",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "{{baseUrl}}/products/search",
                    "host": [
                        "{{baseUrl}}"
                    ],
                    "path": [
                        "products",
                        "search"
                    ]
                },
                "description": "Provides details of a product in the requested locale. The product must be scoped for the requested target"
            },
            "response": [],
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "pm.test(\"Not failing\", function () {\r",
                            "    pm.expect(true).to.eql(false);\r",
                            "});\r",
                            "//difference between Not failing and unexpexted error code recieved -- Not failing means that on passing incorrect paramters still the backend is working fine but unexpected error code means that originally we expected X but instead from backend we got Y.\r",
                            "\r",
                            "// remove mandatory fields -- error should come but is not.\r",
                            "//Backend should throw error when mandatory fields are not passed -- giving 200 OK\r",
                            "// example -- \"salesDocumentType\": \"ZCV\" is mandatory field for the backend is not being passed , still the bakend is giving response."
                        ],
                        "type": "text/javascript"
                    }
                }
            ]
        },
        {
            "name": "DT-B-06",
            "request": {
                "auth": {
                    "type": "bearer",
                    "bearer": [
                        {
                            "key": "token",
                            "value": "{{access_token}}",
                            "type": "string"
                        }
                    ]
                },
                "method": "POST",
                "header": [
                    {
                        "key": "Content-Type",
                        "value": "application/json"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": " { \"getProductDetailByCommercialRef\": {\n    \"scope\": {\n      \"brand\": \"Schneider\",\n      \"country\": \"CN\",\n      \"markets\": \"PRODUCT-MARKET\",\n      \"project\": \"STEP\",\n      \"channel\": \"1\"\n    },\n    \"locale\": {\n      \"isoCountry\": \"CN\",\n      \"isoLanguage\": \"zh\"\n    },\n    \"commercialRef\": \"DQ_PDS_481521.17P1\",\n    \"scopeIndependant\":\"true\",\n    \"query\": {\n        \"docType\": [\n            \"REACh Declaration\",\n            \"RoHs Declaration\"\n        ]\n    }\n  }\n}",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "{{baseUrl}}/products/search",
                    "host": [
                        "{{baseUrl}}"
                    ],
                    "path": [
                        "products",
                        "search"
                    ]
                },
                "description": "Provides details of a product in the requested locale. The product must be scoped for the requested target"
            },
            "response": [],
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "pm.test(\"Status Test - Expected Error code\", function () {\r",
                            "    pm.expect(pm.response.code).to.equal(400);\r",
                            "});\r",
                            "\r",
                            "//BSL Service -- On removing mandatory fields backend returning 500 instead of 400 Bad Request.\r",
                            "\r",
                            "//difference between Not failing and unexpexted error code recieved -- Not failing means that on passing incorrect paramters still the backend is working fine but unexpected error code means that originally we expected X but instead from backend we got Y."
                        ],
                        "type": "text/javascript"
                    }
                }
            ]
        },
        {
            "name": "DT-C-01",
            "request": {
                "auth": {
                    "type": "bearer",
                    "bearer": [
                        {
                            "key": "token",
                            "value": "{{access_token}}",
                            "type": "string"
                        }
                    ]
                },
                "method": "POST",
                "header": [
                    {
                        "key": "Content-Type",
                        "value": "application/json"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\n  \"getNodeDetails\": {\n    \"scope\": {\n      \"brand\": \"Schneider Electric\",\n      \"country\": \"WW\"\n    },\n    \"locale\": {\n      \"isoCountry\": \"GB\",\n      \"isoLanguage\": \"en\"\n    },\n    \"nodeId\": \"CAT_CRG_324300\"\n  }\n}\n",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "{{baseUrl}}/nodes/search",
                    "host": [
                        "{{baseUrl}}"
                    ],
                    "path": [
                        "nodes",
                        "search"
                    ]
                },
                "description": "Provides details of a node in the requested locale along with related characteristics and related products if explicitely requested"
            },
            "response": [],
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "exec": [
                            ""
                        ],
                        "type": "text/javascript"
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "pm.test(\"Status test - Positve Response Check\", function () { pm.response.to.have.status(200); });"
                        ],
                        "type": "text/javascript"
                    }
                }
            ]
        },
        {
            "name": "DT-C-02",
            "request": {
                "auth": {
                    "type": "bearer",
                    "bearer": [
                        {
                            "key": "token",
                            "value": "{{access_token}}",
                            "type": "string"
                        }
                    ]
                },
                "method": "POST",
                "header": [
                    {
                        "key": "Content-Type",
                        "value": "application/json"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\n  \"getNodeDetails\": {\n    \"scope\": {\n      \"brand\": \"Schneider Electric\",\n      \"country\": \"WW\"\n    },\n    \"locale\": {\n      \"isoCountry\": \"GB\",\n      \"isoLanguage\": \"en\"\n    },\n    \"nodeId\": \"CAT_CRG_324300\"\n  }\n}\n",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "{{baseUrl}}/nodes/search",
                    "host": [
                        "{{baseUrl}}"
                    ],
                    "path": [
                        "nodes",
                        "search"
                    ]
                },
                "description": "Provides details of a node in the requested locale along with related characteristics and related products if explicitely requested"
            },
            "response": [],
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "exec": [
                            ""
                        ],
                        "type": "text/javascript"
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "pm.test(\"Status test - Positve Response Check\", function () { pm.response.to.have.status(200); });\r",
                            "\r",
                            "pm.test(\"response must be valid and have a body\", function () {\r",
                            "\r",
                            "     pm.response.to.be.ok;\r",
                            "\r",
                            "     pm.response.to.be.withBody;\r",
                            "\r",
                            "     pm.response.to.be.json;\r",
                            "\r",
                            "     pm.response.to.not.have.jsonBody(\"error\");\r",
                            "\r",
                            "     \r",
                            "\r",
                            "});\r",
                            "\r",
                            "\r",
                            "\r",
                            "\r",
                            "var schema ={\n \"title\": \"getNodeDetailsResponse1\",\n \"required\": [\n  \"getNodeDetailsResponse\"\n ],\n \"type\": \"object\",\n \"properties\": {\n  \"getNodeDetailsResponse\": {\n   \"title\": \"getNodeDetailsResponse\",\n   \"type\": \"object\",\n   \"properties\": {\n    \"NodeBean\": {\n     \"title\": \"nodeBean\",\n     \"type\": \"object\",\n     \"description\": \"\",\n     \"properties\": {\n      \"displayOrder\": {\n       \"type\":[\"integer\",\"null\"],\n       \"format\": \"int32\"\n      },\n      \"id\": {\n       \"type\":[\"string\",\"null\"]\n      },\n      \"name\": {\n       \"type\":[\"string\",\"null\"]\n      },\n      \"oid\": {\n       \"type\":[\"integer\",\"null\"],\n       \"format\": \"int64\"\n      },\n      \"parentNodeId\": {\n       \"type\":[\"string\",\"null\"]\n      },\n      \"parentNodeOid\": {\n       \"type\":[\"integer\",\"null\"],\n       \"format\": \"int64\"\n      },\n      \"parentRangeId\": {\n       \"type\":[\"string\",\"null\"]\n      },\n      \"parentRangeOid\": {\n       \"type\":[\"integer\",\"null\"],\n       \"format\": \"int64\"\n      },\n      \"configurable\": {\n       \"title\": \"configurableBean\",\n       \"type\": \"object\",\n       \"properties\": {\n        \"comRef\": {\n         \"type\":[\"string\",\"null\"]\n        },\n        \"oid\": {\n         \"type\":[\"integer\",\"null\"],\n         \"format\": \"int64\"\n        },\n        \"configurationMode\": {\n         \"type\":[\"string\",\"null\"]\n        },\n        \"description\": {\n         \"type\":[\"string\",\"null\"]\n        }\n       },\n       \"description\": \"\"\n      },\n      \"description\": {\n       \"type\":[\"string\",\"null\"]\n      },\n      \"nbProducts\": {\n       \"type\":[\"integer\",\"null\"],\n       \"format\": \"int32\"\n      },\n      \"pictureDocumentOid\": {\n       \"type\":[\"integer\",\"null\"],\n       \"format\": \"int64\"\n      },\n      \"pictureDocumentReference\": {\n       \"type\":[\"string\",\"null\"]\n      },\n      \"presentationPages\": {\n       \"title\": \"presentationPages\",\n       \"type\": \"object\",\n       \"properties\": {\n        \"presentationPage\": {\n         \"type\": \"array\",\n         \"items\": {\n          \"title\": \"presentationPageBean\",\n          \"type\": \"object\",\n          \"properties\": {\n           \"id\": {\n            \"type\":[\"integer\",\"null\"],\n            \"format\": \"int32\"\n           },\n           \"richText\": {\n            \"type\":[\"string\",\"null\"]\n           }\n          },\n          \"description\": \"\"\n         },\n         \"description\": \"\"\n        }\n       },\n       \"description\": \"\"\n      },\n      \"products\": {\n       \"title\": \"products1\",\n       \"type\": \"object\",\n       \"properties\": {\n        \"product\": {\n         \"type\": \"array\",\n         \"items\": {\n          \"title\": \"productReferenceBean\",\n          \"type\": \"object\",\n          \"properties\": {\n           \"commercialReference\": {\n            \"type\":[\"string\",\"null\"]\n           },\n           \"oid\": {\n            \"type\":[\"integer\",\"null\"],\n            \"format\": \"int64\"\n           },\n           \"productId\": {\n            \"type\":[\"string\",\"null\"]\n           },\n           \"visibleInNav\": {\n            \"type\": \"boolean\"\n           }\n          },\n          \"description\": \"\"\n         },\n         \"description\": \"\"\n        }\n       },\n       \"description\": \"\"\n      },\n      \"relatedCharBeans\": {\n       \"title\": \"relatedCharBeans\",\n       \"type\": \"object\",\n       \"properties\": {\n        \"relatedCharBean\": {\n         \"type\": \"array\",\n         \"items\": {\n          \"title\": \"relatedCharBean\",\n          \"type\": \"object\",\n          \"properties\": {\n           \"charId\": {\n            \"type\":[\"string\",\"null\"]\n           },\n           \"charKey\": {\n            \"type\":[\"string\",\"null\"]\n           },\n           \"displayName\": {\n            \"type\":[\"string\",\"null\"]\n           },\n           \"displayOrder\": {\n            \"type\":[\"integer\",\"null\"],\n            \"format\": \"int32\"\n           },\n           \"tabCharId\": {\n            \"type\":[\"string\",\"null\"]\n           }\n          },\n          \"description\": \"\"\n         },\n         \"description\": \"\"\n        }\n       },\n       \"description\": \"\"\n      },\n      \"subNodeOids\": {\n       \"type\": \"array\",\n       \"description\": \"\",\n       \"nullable\": true,\n       \"items\": {\n        \"type\":[\"integer\",\"null\"],\n        \"format\": \"int64\"\n       }\n      },\n      \"visible\": {\n       \"type\": \"boolean\"\n      },\n      \"documentReferences\": {\n       \"title\": \"documentReferences\",\n       \"type\": \"object\",\n       \"properties\": {\n        \"reference\": {\n         \"type\": \"array\",\n         \"items\": {\n          \"type\":[\"string\",\"null\"]\n         },\n         \"description\": \"\"\n        }\n       },\n       \"description\": \"\"\n      }\n     }\n    }\n   },\n   \"description\": \"\"\n  }\n }\n} ;\r",
                            "\r",
                            "   \r",
                            "\r",
                            "   \r",
                            "\r",
                            "pm.test('Schema is valid', function() {\r",
                            "\r",
                            "  //pm.expect(tv4.validate(pm.response.json, schema)).to.be.true;\r",
                            "\r",
                            "  pm.response.to.have.jsonSchema(schema);\r",
                            "\r",
                            "});\r",
                            "\r",
                            "\r",
                            "\r",
                            "\r",
                            "pm.test(\"Content-Type header is present in request\", () => {\r",
                            "\r",
                            "  pm.request.to.have.header(\"Content-Type\");\r",
                            "\r",
                            "});\r",
                            "\r",
                            "\r",
                            "\r",
                            "pm.test(\"Content-Type header is application/json in Request\", () => {\r",
                            "\r",
                            "  pm.expect(pm.request.headers.get('Content-Type')).to.eql(\"application/json\");\r",
                            "\r",
                            "});\r",
                            "\r",
                            "\r",
                            "\r",
                            "pm.test(\"Content-Type header is present in response\", () => {\r",
                            "\r",
                            "  pm.response.to.have.header(\"Content-Type\");\r",
                            "\r",
                            "});"
                        ],
                        "type": "text/javascript"
                    }
                }
            ]
        },
        {
            "name": "DT-C-03",
            "request": {
                "auth": {
                    "type": "bearer",
                    "bearer": [
                        {
                            "key": "token",
                            "value": "{{access_token}}",
                            "type": "string"
                        }
                    ]
                },
                "method": "POST",
                "header": [
                    {
                        "key": "Content-Type",
                        "value": "application/json"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\n  \"getNodeDetails\": {\n    \"scope\": {\n      \"brand\": \"Schneider Electric\",\n      \"country\": \"WW\"\n    },\n    \"locale\": {\n      \"isoCountry\": \"GB\",\n      \"isoLanguage\": \"en\"\n    },\n    \"nodeId\": \"CAT_CRG_324300\"\n  }\n}\n",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "{{baseUrl}}/nodes/search",
                    "host": [
                        "{{baseUrl}}"
                    ],
                    "path": [
                        "nodes",
                        "search"
                    ]
                },
                "description": "Provides details of a node in the requested locale along with related characteristics and related products if explicitely requested"
            },
            "response": [],
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "pm.test(\"Status test - Mandatory Field Check\", function () { pm.response.to.have.status(400); });\r",
                            ""
                        ],
                        "type": "text/javascript"
                    }
                }
            ]
        },
        {
            "name": "DT-C-04",
            "request": {
                "auth": {
                    "type": "bearer",
                    "bearer": [
                        {
                            "key": "token",
                            "value": "{{access_token}}",
                            "type": "string"
                        }
                    ]
                },
                "method": "POST",
                "header": [
                    {
                        "key": "Content-Type",
                        "value": "application/json"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\n  \"getNodeDetails\": {\n    \"scope\": {\n      \"brand\": \"Schneider Electric\",\n      \"country\": \"WW\"\n    },\n    \"locale\": {\n      \"isoCountry\": \"GB\",\n      \"isoLanguage\": \"en\"\n    },\n    \"nodeId\": \"CAT_CRG_324300\"\n  }\n}\n",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "{{baseUrl}}/nodes/search",
                    "host": [
                        "{{baseUrl}}"
                    ],
                    "path": [
                        "nodes",
                        "search"
                    ]
                },
                "description": "Provides details of a node in the requested locale along with related characteristics and related products if explicitely requested"
            },
            "response": [],
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "pm.test(\"Response time is less than 55s\", function () { \r",
                            "\r",
                            "    pm.expect(pm.response.responseTime).to.be.below(55000); \r",
                            "\r",
                            "    // Default APIGEE timeout is 55 sec\r",
                            "\r",
                            "    });"
                        ],
                        "type": "text/javascript"
                    }
                }
            ]
        },
        {
            "name": "DT-C-05",
            "request": {
                "auth": {
                    "type": "bearer",
                    "bearer": [
                        {
                            "key": "token",
                            "value": "{{access_token}}",
                            "type": "string"
                        }
                    ]
                },
                "method": "POST",
                "header": [
                    {
                        "key": "Content-Type",
                        "value": "application/json"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\n  \"getNodeDetails\": {\n    \"scope\": {\n      \"brand\": \"Schneider Electric\",\n      \"country\": \"WW\"\n    },\n    \"locale\": {\n      \"isoCountry\": \"GB\",\n      \"isoLanguage\": \"en\"\n    },\n    \"nodeId\": \"CAT_CRG_324300\"\n  }\n}\n",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "{{baseUrl}}/nodes/search",
                    "host": [
                        "{{baseUrl}}"
                    ],
                    "path": [
                        "nodes",
                        "search"
                    ]
                },
                "description": "Provides details of a node in the requested locale along with related characteristics and related products if explicitely requested"
            },
            "response": [],
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "pm.test(\"Not failing\", function () {\r",
                            "    pm.expect(true).to.eql(false);\r",
                            "});\r",
                            "//difference between Not failing and unexpexted error code recieved -- Not failing means that on passing incorrect paramters still the backend is working fine but unexpected error code means that originally we expected X but instead from backend we got Y.\r",
                            "\r",
                            "// remove mandatory fields -- error should come but is not.\r",
                            "//Backend should throw error when mandatory fields are not passed -- giving 200 OK\r",
                            "// example -- \"salesDocumentType\": \"ZCV\" is mandatory field for the backend is not being passed , still the bakend is giving response."
                        ],
                        "type": "text/javascript"
                    }
                }
            ]
        },
        {
            "name": "DT-C-06",
            "request": {
                "auth": {
                    "type": "bearer",
                    "bearer": [
                        {
                            "key": "token",
                            "value": "{{access_token}}",
                            "type": "string"
                        }
                    ]
                },
                "method": "POST",
                "header": [
                    {
                        "key": "Content-Type",
                        "value": "application/json"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\n  \"getNodeDetails\": {\n    \"scope\": {\n      \"brand\": \"Schneider Electric\",\n      \"country\": \"WW\"\n    },\n    \"locale\": {\n      \"isoCountry\": \"GB\",\n      \"isoLanguage\": \"en\"\n    },\n    \"nodeId\": \"CAT_CRG_324300\"\n  }\n}\n",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "{{baseUrl}}/nodes/search",
                    "host": [
                        "{{baseUrl}}"
                    ],
                    "path": [
                        "nodes",
                        "search"
                    ]
                },
                "description": "Provides details of a node in the requested locale along with related characteristics and related products if explicitely requested"
            },
            "response": [],
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "pm.test(\"Status Test - Expected Error code\", function () {\r",
                            "    pm.expect(pm.response.code).to.equal(400);\r",
                            "});\r",
                            "\r",
                            "//BSL Service -- On removing mandatory fields backend returning 500 instead of 400 Bad Request.\r",
                            "\r",
                            "//difference between Not failing and unexpexted error code recieved -- Not failing means that on passing incorrect paramters still the backend is working fine but unexpected error code means that originally we expected X but instead from backend we got Y."
                        ],
                        "type": "text/javascript"
                    }
                }
            ]
        },
        {
            "name": "DT-D-01",
            "request": {
                "auth": {
                    "type": "bearer",
                    "bearer": [
                        {
                            "key": "token",
                            "value": "{{access_token}}",
                            "type": "string"
                        }
                    ]
                },
                "method": "POST",
                "header": [
                    {
                        "key": "Content-Type",
                        "value": "application/json"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\n  \"getProductRelationshipsDetails\": {\n    \"scope\": {\n      \"brand\": \"Schneider Electric\",\n      \"country\": \"WW\"\n    },\n    \"locale\": {\n      \"isoCountry\": \"GB\",\n      \"isoLanguage\": \"en\"\n    },\n    \"commercialRef\": \"GV2ME32\",\n    \"limitPerRelationshipTypeAndCategory\": 1,\n    \"fetchCompatibleActuatorData\": true\n  }\n}\n",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "{{baseUrl}}/product-relationships/search",
                    "host": [
                        "{{baseUrl}}"
                    ],
                    "path": [
                        "product-relationships",
                        "search"
                    ]
                },
                "description": "Provides all relationships of the requested product. Both source and target products must be scoped for the requested target"
            },
            "response": [],
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "exec": [
                            ""
                        ],
                        "type": "text/javascript"
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "pm.test(\"Status test - Positve Response Check\", function () { pm.response.to.have.status(200); });"
                        ],
                        "type": "text/javascript"
                    }
                }
            ]
        },
        {
            "name": "DT-D-02",
            "request": {
                "auth": {
                    "type": "bearer",
                    "bearer": [
                        {
                            "key": "token",
                            "value": "{{access_token}}",
                            "type": "string"
                        }
                    ]
                },
                "method": "POST",
                "header": [
                    {
                        "key": "Content-Type",
                        "value": "application/json"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\n  \"getProductRelationshipsDetails\": {\n    \"scope\": {\n      \"brand\": \"Schneider Electric\",\n      \"country\": \"WW\"\n    },\n    \"locale\": {\n      \"isoCountry\": \"GB\",\n      \"isoLanguage\": \"en\"\n    },\n    \"commercialRef\": \"GV2ME32\",\n    \"limitPerRelationshipTypeAndCategory\": 1,\n    \"fetchCompatibleActuatorData\": true\n  }\n}\n",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "{{baseUrl}}/product-relationships/search",
                    "host": [
                        "{{baseUrl}}"
                    ],
                    "path": [
                        "product-relationships",
                        "search"
                    ]
                },
                "description": "Provides all relationships of the requested product. Both source and target products must be scoped for the requested target"
            },
            "response": [],
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "exec": [
                            ""
                        ],
                        "type": "text/javascript"
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "pm.test(\"Status test - Positve Response Check\", function () { pm.response.to.have.status(200); });\r",
                            "\r",
                            "pm.test(\"response must be valid and have a body\", function () {\r",
                            "\r",
                            "     pm.response.to.be.ok;\r",
                            "\r",
                            "     pm.response.to.be.withBody;\r",
                            "\r",
                            "     pm.response.to.be.json;\r",
                            "\r",
                            "     pm.response.to.not.have.jsonBody(\"error\");\r",
                            "\r",
                            "     \r",
                            "\r",
                            "});\r",
                            "\r",
                            "\r",
                            "\r",
                            "\r",
                            "var schema ={\n \"title\": \"getProductRelationshipsDetailsResponse1\",\n \"required\": [\n  \"getProductRelationshipsDetailsResponse\"\n ],\n \"type\": \"object\",\n \"properties\": {\n  \"getProductRelationshipsDetailsResponse\": {\n   \"title\": \"getProductRelationshipsDetailsResponse\",\n   \"type\": \"object\",\n   \"properties\": {\n    \"ProductRelationshipBean\": {\n     \"title\": \"productRelationshipBean\",\n     \"type\": \"object\",\n     \"properties\": {\n      \"srcProductCommRef\": {\n       \"type\":[\"string\",\"null\"]\n      },\n      \"relationships\": {\n       \"title\": \"relationships\",\n       \"type\": \"object\",\n       \"properties\": {\n        \"relationship\": {\n         \"type\": \"array\",\n         \"items\": {\n          \"title\": \"productRelationshipLinkBean\",\n          \"type\": \"object\",\n          \"properties\": {\n           \"category\": {\n            \"type\":[\"string\",\"null\"]\n           },\n           \"closeOffPressure\": {\n            \"type\":[\"integer\",\"null\"],\n            \"format\": \"int32\"\n           },\n           \"componentQuantity\": {\n            \"type\":[\"integer\",\"null\"],\n            \"format\": \"int64\"\n           },\n           \"componentTitle\": {\n            \"type\":[\"string\",\"null\"]\n           },\n           \"destProductComRef\": {\n            \"type\":[\"string\",\"null\"]\n           },\n           \"externalComment\": {\n            \"type\":[\"string\",\"null\"]\n           },\n           \"lossOfPowerPosition\": {\n            \"type\":[\"string\",\"null\"]\n           },\n           \"ranking\": {\n            \"type\":[\"integer\",\"null\"],\n            \"format\": \"int64\"\n           },\n           \"requiredLinkage\": {\n            \"type\":[\"string\",\"null\"]\n           },\n           \"temperatureAmbientOperatingMaximum\": {\n            \"type\":[\"integer\",\"null\"],\n            \"format\": \"int32\"\n           },\n           \"type\": {\n            \"type\":[\"string\",\"null\"]\n           }\n          },\n          \"description\": \"\"\n         },\n         \"description\": \"\"\n        }\n       },\n       \"description\": \"\"\n      },\n      \"categoryTranslations\": {\n       \"title\": \"categoryTranslations\",\n       \"type\": \"object\",\n       \"properties\": {\n        \"category\": {\n         \"type\": \"array\",\n         \"items\": {\n          \"title\": \"productRelationshipCategoryTranslationBean\",\n          \"type\": \"object\",\n          \"properties\": {\n           \"name\": {\n            \"type\":[\"string\",\"null\"]\n           },\n           \"translation\": {\n            \"type\": \"array\",\n            \"items\": {\n             \"title\": \"translationBean\",\n             \"type\": \"object\",\n             \"description\": \"\",\n             \"properties\": {\n              \"locale\": {\n               \"type\":[\"string\",\"null\"]\n              },\n              \"translation\": {\n               \"type\":[\"string\",\"null\"]\n              }\n             }\n            },\n            \"description\": \"\"\n           }\n          },\n          \"description\": \"\"\n         },\n         \"description\": \"\"\n        }\n       },\n       \"description\": \"\"\n      },\n      \"componentTitleTranslations\": {\n       \"title\": \"componentTitleTranslations\",\n       \"type\": \"object\",\n       \"properties\": {\n        \"componentTitle\": {\n         \"type\": \"array\",\n         \"items\": {\n          \"title\": \"componentTitleTranslationBean\",\n          \"type\": \"object\",\n          \"properties\": {\n           \"id\": {\n            \"type\":[\"string\",\"null\"]\n           },\n           \"translation\": {\n            \"type\": \"array\",\n            \"items\": {\n             \"title\": \"translationBean\",\n             \"type\": \"object\",\n             \"description\": \"\",\n             \"properties\": {\n              \"locale\": {\n               \"type\":[\"string\",\"null\"]\n              },\n              \"translation\": {\n               \"type\":[\"string\",\"null\"]\n              }\n             }\n            },\n            \"description\": \"\"\n           }\n          },\n          \"description\": \"\"\n         },\n         \"description\": \"\"\n        }\n       },\n       \"description\": \"\"\n      },\n      \"errorCode\": {\n       \"type\":[\"integer\",\"null\"],\n       \"format\": \"int32\"\n      },\n      \"errorMessage\": {\n       \"type\":[\"string\",\"null\"]\n      }\n     },\n     \"description\": \"\"\n    }\n   },\n   \"description\": \"\"\n  }\n }\n} ;\r",
                            "\r",
                            "   \r",
                            "\r",
                            "   \r",
                            "\r",
                            "pm.test('Schema is valid', function() {\r",
                            "\r",
                            "  //pm.expect(tv4.validate(pm.response.json, schema)).to.be.true;\r",
                            "\r",
                            "  pm.response.to.have.jsonSchema(schema);\r",
                            "\r",
                            "});\r",
                            "\r",
                            "\r",
                            "\r",
                            "\r",
                            "pm.test(\"Content-Type header is present in request\", () => {\r",
                            "\r",
                            "  pm.request.to.have.header(\"Content-Type\");\r",
                            "\r",
                            "});\r",
                            "\r",
                            "\r",
                            "\r",
                            "pm.test(\"Content-Type header is application/json in Request\", () => {\r",
                            "\r",
                            "  pm.expect(pm.request.headers.get('Content-Type')).to.eql(\"application/json\");\r",
                            "\r",
                            "});\r",
                            "\r",
                            "\r",
                            "\r",
                            "pm.test(\"Content-Type header is present in response\", () => {\r",
                            "\r",
                            "  pm.response.to.have.header(\"Content-Type\");\r",
                            "\r",
                            "});"
                        ],
                        "type": "text/javascript"
                    }
                }
            ]
        },
        {
            "name": "DT-D-03",
            "request": {
                "auth": {
                    "type": "bearer",
                    "bearer": [
                        {
                            "key": "token",
                            "value": "{{access_token}}",
                            "type": "string"
                        }
                    ]
                },
                "method": "POST",
                "header": [
                    {
                        "key": "Content-Type",
                        "value": "application/json"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\n  \"getProductRelationshipsDetails\": {\n    \"scope\": {\n      \"brand\": \"Schneider Electric\",\n      \"country\": \"WW\"\n    },\n    \"locale\": {\n      \"isoCountry\": \"GB\",\n      \"isoLanguage\": \"en\"\n    },\n    \"commercialRef\": \"GV2ME32\",\n    \"limitPerRelationshipTypeAndCategory\": 1,\n    \"fetchCompatibleActuatorData\": true\n  }\n}\n",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "{{baseUrl}}/product-relationships/search",
                    "host": [
                        "{{baseUrl}}"
                    ],
                    "path": [
                        "product-relationships",
                        "search"
                    ]
                },
                "description": "Provides all relationships of the requested product. Both source and target products must be scoped for the requested target"
            },
            "response": [],
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "pm.test(\"Status test - Mandatory Field Check\", function () { pm.response.to.have.status(400); });\r",
                            ""
                        ],
                        "type": "text/javascript"
                    }
                }
            ]
        },
        {
            "name": "DT-D-04",
            "request": {
                "auth": {
                    "type": "bearer",
                    "bearer": [
                        {
                            "key": "token",
                            "value": "{{access_token}}",
                            "type": "string"
                        }
                    ]
                },
                "method": "POST",
                "header": [
                    {
                        "key": "Content-Type",
                        "value": "application/json"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\n  \"getProductRelationshipsDetails\": {\n    \"scope\": {\n      \"brand\": \"Schneider Electric\",\n      \"country\": \"WW\"\n    },\n    \"locale\": {\n      \"isoCountry\": \"GB\",\n      \"isoLanguage\": \"en\"\n    },\n    \"commercialRef\": \"GV2ME32\",\n    \"limitPerRelationshipTypeAndCategory\": 1,\n    \"fetchCompatibleActuatorData\": true\n  }\n}\n",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "{{baseUrl}}/product-relationships/search",
                    "host": [
                        "{{baseUrl}}"
                    ],
                    "path": [
                        "product-relationships",
                        "search"
                    ]
                },
                "description": "Provides all relationships of the requested product. Both source and target products must be scoped for the requested target"
            },
            "response": [],
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "pm.test(\"Response time is less than 55s\", function () { \r",
                            "\r",
                            "    pm.expect(pm.response.responseTime).to.be.below(55000); \r",
                            "\r",
                            "    // Default APIGEE timeout is 55 sec\r",
                            "\r",
                            "    });"
                        ],
                        "type": "text/javascript"
                    }
                }
            ]
        },
        {
            "name": "DT-D-05",
            "request": {
                "auth": {
                    "type": "bearer",
                    "bearer": [
                        {
                            "key": "token",
                            "value": "{{access_token}}",
                            "type": "string"
                        }
                    ]
                },
                "method": "POST",
                "header": [
                    {
                        "key": "Content-Type",
                        "value": "application/json"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\n  \"getProductRelationshipsDetails\": {\n    \"scope\": {\n      \"brand\": \"Schneider Electric\",\n      \"country\": \"WW\"\n    },\n    \"locale\": {\n      \"isoCountry\": \"GB\",\n      \"isoLanguage\": \"en\"\n    },\n    \"commercialRef\": \"GV2ME32\",\n    \"limitPerRelationshipTypeAndCategory\": 1,\n    \"fetchCompatibleActuatorData\": true\n  }\n}\n",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "{{baseUrl}}/product-relationships/search",
                    "host": [
                        "{{baseUrl}}"
                    ],
                    "path": [
                        "product-relationships",
                        "search"
                    ]
                },
                "description": "Provides all relationships of the requested product. Both source and target products must be scoped for the requested target"
            },
            "response": [],
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "pm.test(\"Not failing\", function () {\r",
                            "    pm.expect(true).to.eql(false);\r",
                            "});\r",
                            "//difference between Not failing and unexpexted error code recieved -- Not failing means that on passing incorrect paramters still the backend is working fine but unexpected error code means that originally we expected X but instead from backend we got Y.\r",
                            "\r",
                            "// remove mandatory fields -- error should come but is not.\r",
                            "//Backend should throw error when mandatory fields are not passed -- giving 200 OK\r",
                            "// example -- \"salesDocumentType\": \"ZCV\" is mandatory field for the backend is not being passed , still the bakend is giving response."
                        ],
                        "type": "text/javascript"
                    }
                }
            ]
        },
        {
            "name": "DT-D-06",
            "request": {
                "auth": {
                    "type": "bearer",
                    "bearer": [
                        {
                            "key": "token",
                            "value": "{{access_token}}",
                            "type": "string"
                        }
                    ]
                },
                "method": "POST",
                "header": [
                    {
                        "key": "Content-Type",
                        "value": "application/json"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\n  \"getProductRelationshipsDetails\": {\n    \"scope\": {\n      \"brand\": \"Schneider Electric\",\n      \"country\": \"WW\"\n    },\n    \"locale\": {\n      \"isoCountry\": \"GB\",\n      \"isoLanguage\": \"en\"\n    },\n    \"commercialRef\": \"GV2ME32\",\n    \"limitPerRelationshipTypeAndCategory\": 1,\n    \"fetchCompatibleActuatorData\": true\n  }\n}\n",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "{{baseUrl}}/product-relationships/search",
                    "host": [
                        "{{baseUrl}}"
                    ],
                    "path": [
                        "product-relationships",
                        "search"
                    ]
                },
                "description": "Provides all relationships of the requested product. Both source and target products must be scoped for the requested target"
            },
            "response": [],
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "pm.test(\"Status Test - Expected Error code\", function () {\r",
                            "    pm.expect(pm.response.code).to.equal(400);\r",
                            "});\r",
                            "\r",
                            "//BSL Service -- On removing mandatory fields backend returning 500 instead of 400 Bad Request.\r",
                            "\r",
                            "//difference between Not failing and unexpexted error code recieved -- Not failing means that on passing incorrect paramters still the backend is working fine but unexpected error code means that originally we expected X but instead from backend we got Y."
                        ],
                        "type": "text/javascript"
                    }
                }
            ]
        },
        {
            "name": "DT-E-01",
            "request": {
                "auth": {
                    "type": "bearer",
                    "bearer": [
                        {
                            "key": "token",
                            "value": "{{access_token}}",
                            "type": "string"
                        }
                    ]
                },
                "method": "POST",
                "header": [
                    {
                        "key": "Content-Type",
                        "value": "application/json"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\n\"productId\": \"DQ_PDS_484021.15P1\",\n\"version\": \"4\",\n\"localeReferenceList\": [\n{ \"language\": \"fr\", \"country\": \"FR\" }\n],\n\"bslContextList\": [\n{\n\"targetReference\":\n{ \"brand\": \"Schneider Electric\", \"country\": \"WW\" , \"market\": \"PRODUCT-MARKET\",  \"channel\" :\"1\", \"project\" :\"STEP\"}\n,\n\"localeReferenceList\": [\n{ \"language\": \"fr\", \"country\": \"FR\" }\n]\n},\n{\n\"targetReference\":\n{ \"brand\": \"Schneider Electric\", \"country\": \"FR\" , \"market\": \"PRODUCT-MARKET\",  \"channel\" :\"4\"}\n,\n\"localeReferenceList\": [\n{ \"language\": \"fr\", \"country\": \"FR\" }\n]\n}\n]\n}",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "{{baseUrl}}/scoped-product-details/search",
                    "host": [
                        "{{baseUrl}}"
                    ],
                    "path": [
                        "scoped-product-details",
                        "search"
                    ]
                },
                "description": "Return data about a given product.  Locale dependent data (also called translation),   localized data (actually localized by country e.g LocalizedString with FR,WW ), target specific data  can be retrieve all in one call"
            },
            "response": [],
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "exec": [
                            ""
                        ],
                        "type": "text/javascript"
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "pm.test(\"Status test - Positve Response Check\", function () { pm.response.to.have.status(200); });"
                        ],
                        "type": "text/javascript"
                    }
                }
            ]
        },
        {
            "name": "DT-E-02",
            "request": {
                "auth": {
                    "type": "bearer",
                    "bearer": [
                        {
                            "key": "token",
                            "value": "{{access_token}}",
                            "type": "string"
                        }
                    ]
                },
                "method": "POST",
                "header": [
                    {
                        "key": "Content-Type",
                        "value": "application/json"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\n\"productId\": \"DQ_PDS_484021.15P1\",\n\"version\": \"4\",\n\"localeReferenceList\": [\n{ \"language\": \"fr\", \"country\": \"FR\" }\n],\n\"bslContextList\": [\n{\n\"targetReference\":\n{ \"brand\": \"Schneider Electric\", \"country\": \"WW\" , \"market\": \"PRODUCT-MARKET\",  \"channel\" :\"1\", \"project\" :\"STEP\"}\n,\n\"localeReferenceList\": [\n{ \"language\": \"fr\", \"country\": \"FR\" }\n]\n},\n{\n\"targetReference\":\n{ \"brand\": \"Schneider Electric\", \"country\": \"FR\" , \"market\": \"PRODUCT-MARKET\",  \"channel\" :\"4\"}\n,\n\"localeReferenceList\": [\n{ \"language\": \"fr\", \"country\": \"FR\" }\n]\n}\n]\n}",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "{{baseUrl}}/scoped-product-details/search",
                    "host": [
                        "{{baseUrl}}"
                    ],
                    "path": [
                        "scoped-product-details",
                        "search"
                    ]
                },
                "description": "Return data about a given product.  Locale dependent data (also called translation),   localized data (actually localized by country e.g LocalizedString with FR,WW ), target specific data  can be retrieve all in one call"
            },
            "response": [],
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "exec": [
                            ""
                        ],
                        "type": "text/javascript"
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "pm.test(\"Status test - Positve Response Check\", function () { pm.response.to.have.status(200); });\r",
                            "\r",
                            "pm.test(\"response must be valid and have a body\", function () {\r",
                            "\r",
                            "     pm.response.to.be.ok;\r",
                            "\r",
                            "     pm.response.to.be.withBody;\r",
                            "\r",
                            "     pm.response.to.be.json;\r",
                            "\r",
                            "     pm.response.to.not.have.jsonBody(\"error\");\r",
                            "\r",
                            "     \r",
                            "\r",
                            "});\r",
                            "\r",
                            "\r",
                            "\r",
                            "\r",
                            "var schema ={\n \"type\": \"object\",\n \"properties\": {\n  \"productId\": {\n   \"type\":[\"string\",\"null\"],\n   \"description\": \"id of the product. its equal to commercial ref for all ops product. different for EncycloPedia product\"\n  },\n  \"commercialReference\": {\n   \"type\":[\"string\",\"null\"],\n   \"description\": \"commercial reference of the product\"\n  },\n  \"eanNumber\": {\n   \"type\":[\"string\",\"null\"],\n   \"description\": \"EAN number of the product\"\n  },\n  \"pictureDocumentOid\": {\n   \"type\":[\"integer\",\"null\"],\n   \"format\": \"int64\",\n   \"description\": \"oid of the Document that hold the images of the product (deprecated use pictureDocumentReference)\"\n  },\n  \"isGreenPremium\": {\n   \"type\": \"boolean\",\n   \"description\": \"is the product is green premium\"\n  },\n  \"pictureDocumentReference\": {\n   \"type\":[\"string\",\"null\"],\n   \"description\": \"reference of the Document that hold the images of the product\"\n  },\n  \"shortDescription\": {\n   \"type\": \"array\",\n   \"description\": \"translated short decription of the product. Can be filtred using the input parameter localeReferenceList\",\n   \"items\": {\n    \"type\": \"object\",\n    \"properties\": {\n     \"locale\": {\n      \"type\":[\"string\",\"null\"],\n      \"description\": \"name of the locale en_GB,fr_FR\"\n     },\n     \"value\": {\n      \"type\":[\"string\",\"null\"]\n     }\n    }\n   }\n  },\n  \"brand\": {\n   \"type\": \"array\",\n   \"description\": \"brand of the product in a given localization (based on country). Can be filtred using the input parameter localeReferenceList/country\",\n   \"items\": {\n    \"type\": \"object\",\n    \"properties\": {\n     \"localization\": {\n      \"type\":[\"string\",\"null\"],\n      \"description\": \"name of the localization FR,CA,DE\"\n     },\n     \"value\": {\n      \"type\":[\"string\",\"null\"]\n     }\n    }\n   }\n  },\n  \"commercialStatus\": {\n   \"type\": \"array\",\n   \"description\": \"commercialStatus of the product in a given localization (based on country). Can be filtred using the input parameter localeReferenceList/country\",\n   \"items\": {\n    \"type\": \"object\",\n    \"properties\": {\n     \"localization\": {\n      \"type\":[\"string\",\"null\"],\n      \"description\": \"name of the localization FR,CA,DE\"\n     },\n     \"value\": {\n      \"type\":[\"string\",\"null\"]\n     }\n    }\n   }\n  },\n  \"isCommercialized\": {\n   \"type\": \"array\",\n   \"description\": \"is the product commercialized in a given localization (based on country). Can be filtred using the input parameter localeReferenceList/country\",\n   \"items\": {\n    \"type\": \"object\",\n    \"properties\": {\n     \"localization\": {\n      \"type\":[\"string\",\"null\"],\n      \"description\": \"name of the localization FR,CA,DE\"\n     },\n     \"value\": {\n      \"type\": \"boolean\"\n     }\n    }\n   }\n  },\n  \"partNumber\": {\n   \"type\": \"array\",\n   \"description\": \"partNumber of the product in a given localization (based on country). Can be filtred using the input parameter localeReferenceList/country\",\n   \"items\": {\n    \"type\": \"object\",\n    \"properties\": {\n     \"localization\": {\n      \"type\":[\"string\",\"null\"],\n      \"description\": \"name of the localization FR,CA,DE\"\n     },\n     \"value\": {\n      \"type\":[\"string\",\"null\"]\n     }\n    }\n   }\n  },\n  \"price\": {\n   \"type\": \"array\",\n   \"description\": \"price of the product in a given localization (based on country). Can be filtred using the input parameter localeReferenceList/country\",\n   \"items\": {\n    \"type\": \"object\",\n    \"properties\": {\n     \"localization\": {\n      \"type\":[\"string\",\"null\"],\n      \"description\": \"name of the localization FR,CA,DE\"\n     },\n     \"value\": {\n      \"type\": \"number\",\n      \"format\": \"float\"\n     }\n    }\n   }\n  },\n  \"currency\": {\n   \"type\": \"array\",\n   \"description\": \"currency of the product in a given localization (based on country). Can be filtred using the input parameter localeReferenceList/country\",\n   \"items\": {\n    \"type\": \"object\",\n    \"properties\": {\n     \"localization\": {\n      \"type\":[\"string\",\"null\"],\n      \"description\": \"name of the localization FR,CA,DE\"\n     },\n     \"value\": {\n      \"type\":[\"string\",\"null\"]\n     }\n    }\n   }\n  },\n  \"localeDistributorCode\": {\n   \"type\": \"array\",\n   \"description\": \"localeDistributorCode of the product in a given localization (based on country). Can be filtred using the input parameter localeReferenceList/country\",\n   \"items\": {\n    \"type\": \"object\",\n    \"properties\": {\n     \"localization\": {\n      \"type\":[\"string\",\"null\"],\n      \"description\": \"name of the localization FR,CA,DE\"\n     },\n     \"value\": {\n      \"type\":[\"string\",\"null\"]\n     }\n    }\n   }\n  },\n  \"localeStockStatus\": {\n   \"type\": \"array\",\n   \"description\": \"localeStockStatus of the product in a given localization (based on country). Can be filtred using the input parameter localeReferenceList/country\",\n   \"items\": {\n    \"type\": \"object\",\n    \"properties\": {\n     \"localization\": {\n      \"type\":[\"string\",\"null\"],\n      \"description\": \"name of the localization FR,CA,DE\"\n     },\n     \"value\": {\n      \"type\":[\"string\",\"null\"]\n     }\n    }\n   }\n  },\n  \"scopedData\": {\n   \"type\": \"array\",\n   \"description\": \"data that can change according to which target see them.\",\n   \"items\": {\n    \"type\": \"object\",\n    \"properties\": {\n     \"target\": {\n      \"type\": \"object\",\n      \"properties\": {\n       \"brand\": {\n        \"type\":[\"string\",\"null\"],\n        \"description\": \"e.g \\\"Schneider Electric\\\" \\\"APC\\\" \\\"Pelco\\\"\"\n       },\n       \"channel\": {\n        \"type\":[\"string\",\"null\"]\n       },\n       \"country\": {\n        \"type\":[\"string\",\"null\"],\n        \"description\": \"e.g \\\"WW\\\" \\\"US\\\" \\\"GB\\\" \\\"FR\\\"\"\n       },\n       \"function\": {\n        \"type\":[\"string\",\"null\"]\n       },\n       \"market\": {\n        \"type\":[\"string\",\"null\"]\n       },\n       \"privacy\": {\n        \"type\":[\"string\",\"null\"]\n       },\n       \"program\": {\n        \"type\":[\"string\",\"null\"]\n       },\n       \"project\": {\n        \"type\":[\"string\",\"null\"]\n       }\n      }\n     },\n     \"firstParentRangeId\": {\n      \"type\":[\"string\",\"null\"],\n      \"description\": \"among all range attached to this product in this target, select the older created one\"\n     },\n     \"epdsDocumentReference\": {\n      \"type\": \"array\",\n      \"description\": \"available epdsDocument for this product and target in the locale given in input\",\n      \"items\": {\n       \"type\": \"object\",\n       \"properties\": {\n        \"locale\": {\n         \"type\":[\"string\",\"null\"],\n         \"description\": \"name of the locale en_GB,fr_FR\"\n        },\n        \"value\": {\n         \"type\":[\"string\",\"null\"]\n        }\n       }\n      }\n     },\n     \"epdsDocumentOid\": {\n      \"type\": \"array\",\n      \"description\": \"available epdsDocument for this product and target in the locale given in input\",\n      \"items\": {\n       \"type\": \"object\",\n       \"properties\": {\n        \"locale\": {\n         \"type\":[\"string\",\"null\"],\n         \"description\": \"name of the locale en_GB,fr_FR\"\n        },\n        \"value\": {\n         \"type\":[\"integer\",\"null\"],\n         \"format\": \"int64\"\n        }\n       }\n      }\n     }\n    }\n   }\n  },\n  \"epdsDocumentReferenceData\": {\n   \"type\": \"array\",\n   \"description\": \"translated epdsDocumentReferenceData of the product. Can be filtred using the input parameter localeReferenceList\",\n   \"items\": {\n    \"type\": \"object\",\n    \"properties\": {\n     \"locale\": {\n      \"type\":[\"string\",\"null\"],\n      \"description\": \"name of the locale en_GB,fr_FR\"\n     },\n     \"value\": {\n      \"type\":[\"string\",\"null\"]\n     }\n    }\n   }\n  },\n  \"longDescription\": {\n   \"type\": \"array\",\n   \"description\": \"translated long decription of the product. Can be filtred using the input parameter localeReferenceList\",\n   \"items\": {\n    \"type\": \"object\",\n    \"properties\": {\n     \"locale\": {\n      \"type\":[\"string\",\"null\"],\n      \"description\": \"name of the locale en_GB,fr_FR\"\n     },\n     \"value\": {\n      \"type\":[\"string\",\"null\"]\n     },\n     \"country\": {\n      \"type\":[\"string\",\"null\"],\n      \"description\": \"e.g GB FR\"\n     }\n    }\n   }\n  },\n  \"type\": {\n   \"type\": \"array\",\n   \"description\": \"type.\",\n   \"items\": {\n    \"type\": \"object\",\n    \"properties\": {\n     \"locale\": {\n      \"type\":[\"string\",\"null\"],\n      \"description\": \"name of the locale en_GB,fr_FR\"\n     },\n     \"value\": {\n      \"type\":[\"string\",\"null\"]\n     },\n     \"country\": {\n      \"type\":[\"string\",\"null\"],\n      \"description\": \"e.g GB FR\"\n     }\n    }\n   }\n  },\n  \"subType\": {\n   \"type\": \"array\",\n   \"description\": \"subType.\",\n   \"items\": {\n    \"type\": \"object\",\n    \"properties\": {\n     \"locale\": {\n      \"type\":[\"string\",\"null\"],\n      \"description\": \"name of the locale en_GB,fr_FR\"\n     },\n     \"value\": {\n      \"type\":[\"string\",\"null\"]\n     },\n     \"country\": {\n      \"type\":[\"string\",\"null\"],\n      \"description\": \"e.g GB FR\"\n     }\n    }\n   }\n  },\n  \"stockCode\": {\n   \"type\": \"array\",\n   \"description\": \"stockCode of the product in a given localization (based on country). Can be filtred using the input parameter localeReferenceList/country\",\n   \"items\": {\n    \"type\": \"object\",\n    \"properties\": {\n     \"localization\": {\n      \"type\":[\"string\",\"null\"],\n      \"description\": \"name of the localization FR,CA,DE\"\n     },\n     \"value\": {\n      \"type\":[\"string\",\"null\"]\n     }\n    }\n   }\n  },\n  \"isVisibleInNav\": {\n   \"type\": \"array\",\n   \"description\": \"available visibleInNav for this product and target\",\n   \"items\": {\n    \"type\": \"object\",\n    \"properties\": {\n     \"localization\": {\n      \"type\":[\"string\",\"null\"],\n      \"description\": \"name of the localization FR,CA,DE\"\n     },\n     \"value\": {\n      \"type\": \"boolean\"\n     }\n    }\n   }\n  },\n  \"isEnergyStarCompliant\": {\n   \"type\": \"boolean\",\n   \"description\": \"is the product is energy star compliant\",\n   \"default\": false\n  }\n }\n} ;\r",
                            "\r",
                            "   \r",
                            "\r",
                            "   \r",
                            "\r",
                            "pm.test('Schema is valid', function() {\r",
                            "\r",
                            "  //pm.expect(tv4.validate(pm.response.json, schema)).to.be.true;\r",
                            "\r",
                            "  pm.response.to.have.jsonSchema(schema);\r",
                            "\r",
                            "});\r",
                            "\r",
                            "\r",
                            "\r",
                            "\r",
                            "pm.test(\"Content-Type header is present in request\", () => {\r",
                            "\r",
                            "  pm.request.to.have.header(\"Content-Type\");\r",
                            "\r",
                            "});\r",
                            "\r",
                            "\r",
                            "\r",
                            "pm.test(\"Content-Type header is application/json in Request\", () => {\r",
                            "\r",
                            "  pm.expect(pm.request.headers.get('Content-Type')).to.eql(\"application/json\");\r",
                            "\r",
                            "});\r",
                            "\r",
                            "\r",
                            "\r",
                            "pm.test(\"Content-Type header is present in response\", () => {\r",
                            "\r",
                            "  pm.response.to.have.header(\"Content-Type\");\r",
                            "\r",
                            "});"
                        ],
                        "type": "text/javascript"
                    }
                }
            ]
        },
        {
            "name": "DT-E-03",
            "request": {
                "auth": {
                    "type": "bearer",
                    "bearer": [
                        {
                            "key": "token",
                            "value": "{{access_token}}",
                            "type": "string"
                        }
                    ]
                },
                "method": "POST",
                "header": [
                    {
                        "key": "Content-Type",
                        "value": "application/json"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\n\"productId\": \"DQ_PDS_484021.15P1\",\n\"version\": \"4\",\n\"localeReferenceList\": [\n{ \"language\": \"fr\", \"country\": \"FR\" }\n],\n\"bslContextList\": [\n{\n\"targetReference\":\n{ \"brand\": \"Schneider Electric\", \"country\": \"WW\" , \"market\": \"PRODUCT-MARKET\",  \"channel\" :\"1\", \"project\" :\"STEP\"}\n,\n\"localeReferenceList\": [\n{ \"language\": \"fr\", \"country\": \"FR\" }\n]\n},\n{\n\"targetReference\":\n{ \"brand\": \"Schneider Electric\", \"country\": \"FR\" , \"market\": \"PRODUCT-MARKET\",  \"channel\" :\"4\"}\n,\n\"localeReferenceList\": [\n{ \"language\": \"fr\", \"country\": \"FR\" }\n]\n}\n]\n}",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "{{baseUrl}}/scoped-product-details/search",
                    "host": [
                        "{{baseUrl}}"
                    ],
                    "path": [
                        "scoped-product-details",
                        "search"
                    ]
                },
                "description": "Return data about a given product.  Locale dependent data (also called translation),   localized data (actually localized by country e.g LocalizedString with FR,WW ), target specific data  can be retrieve all in one call"
            },
            "response": [],
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "pm.test(\"Status test - Mandatory Field Check\", function () { pm.response.to.have.status(400); });\r",
                            ""
                        ],
                        "type": "text/javascript"
                    }
                }
            ]
        },
        {
            "name": "DT-E-04",
            "request": {
                "auth": {
                    "type": "bearer",
                    "bearer": [
                        {
                            "key": "token",
                            "value": "{{access_token}}",
                            "type": "string"
                        }
                    ]
                },
                "method": "POST",
                "header": [
                    {
                        "key": "Content-Type",
                        "value": "application/json"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\n\"productId\": \"DQ_PDS_484021.15P1\",\n\"version\": \"4\",\n\"localeReferenceList\": [\n{ \"language\": \"fr\", \"country\": \"FR\" }\n],\n\"bslContextList\": [\n{\n\"targetReference\":\n{ \"brand\": \"Schneider Electric\", \"country\": \"WW\" , \"market\": \"PRODUCT-MARKET\",  \"channel\" :\"1\", \"project\" :\"STEP\"}\n,\n\"localeReferenceList\": [\n{ \"language\": \"fr\", \"country\": \"FR\" }\n]\n},\n{\n\"targetReference\":\n{ \"brand\": \"Schneider Electric\", \"country\": \"FR\" , \"market\": \"PRODUCT-MARKET\",  \"channel\" :\"4\"}\n,\n\"localeReferenceList\": [\n{ \"language\": \"fr\", \"country\": \"FR\" }\n]\n}\n]\n}",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "{{baseUrl}}/scoped-product-details/search",
                    "host": [
                        "{{baseUrl}}"
                    ],
                    "path": [
                        "scoped-product-details",
                        "search"
                    ]
                },
                "description": "Return data about a given product.  Locale dependent data (also called translation),   localized data (actually localized by country e.g LocalizedString with FR,WW ), target specific data  can be retrieve all in one call"
            },
            "response": [],
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "pm.test(\"Response time is less than 55s\", function () { \r",
                            "\r",
                            "    pm.expect(pm.response.responseTime).to.be.below(55000); \r",
                            "\r",
                            "    // Default APIGEE timeout is 55 sec\r",
                            "\r",
                            "    });"
                        ],
                        "type": "text/javascript"
                    }
                }
            ]
        },
        {
            "name": "DT-E-05",
            "request": {
                "auth": {
                    "type": "bearer",
                    "bearer": [
                        {
                            "key": "token",
                            "value": "{{access_token}}",
                            "type": "string"
                        }
                    ]
                },
                "method": "POST",
                "header": [
                    {
                        "key": "Content-Type",
                        "value": "application/json"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\n\"productId\": \"DQ_PDS_484021.15P1\",\n\"version\": \"4\",\n\"localeReferenceList\": [\n{ \"language\": \"fr\", \"country\": \"FR\" }\n],\n\"bslContextList\": [\n{\n\"targetReference\":\n{ \"brand\": \"Schneider Electric\", \"country\": \"WW\" , \"market\": \"PRODUCT-MARKET\",  \"channel\" :\"1\", \"project\" :\"STEP\"}\n,\n\"localeReferenceList\": [\n{ \"language\": \"fr\", \"country\": \"FR\" }\n]\n},\n{\n\"targetReference\":\n{ \"brand\": \"Schneider Electric\", \"country\": \"FR\" , \"market\": \"PRODUCT-MARKET\",  \"channel\" :\"4\"}\n,\n\"localeReferenceList\": [\n{ \"language\": \"fr\", \"country\": \"FR\" }\n]\n}\n]\n}",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "{{baseUrl}}/scoped-product-details/search",
                    "host": [
                        "{{baseUrl}}"
                    ],
                    "path": [
                        "scoped-product-details",
                        "search"
                    ]
                },
                "description": "Return data about a given product.  Locale dependent data (also called translation),   localized data (actually localized by country e.g LocalizedString with FR,WW ), target specific data  can be retrieve all in one call"
            },
            "response": [],
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "pm.test(\"Not failing\", function () {\r",
                            "    pm.expect(true).to.eql(false);\r",
                            "});\r",
                            "//difference between Not failing and unexpexted error code recieved -- Not failing means that on passing incorrect paramters still the backend is working fine but unexpected error code means that originally we expected X but instead from backend we got Y.\r",
                            "\r",
                            "// remove mandatory fields -- error should come but is not.\r",
                            "//Backend should throw error when mandatory fields are not passed -- giving 200 OK\r",
                            "// example -- \"salesDocumentType\": \"ZCV\" is mandatory field for the backend is not being passed , still the bakend is giving response."
                        ],
                        "type": "text/javascript"
                    }
                }
            ]
        },
        {
            "name": "DT-E-06",
            "request": {
                "auth": {
                    "type": "bearer",
                    "bearer": [
                        {
                            "key": "token",
                            "value": "{{access_token}}",
                            "type": "string"
                        }
                    ]
                },
                "method": "POST",
                "header": [
                    {
                        "key": "Content-Type",
                        "value": "application/json"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\n\"productId\": \"DQ_PDS_484021.15P1\",\n\"version\": \"4\",\n\"localeReferenceList\": [\n{ \"language\": \"fr\", \"country\": \"FR\" }\n],\n\"bslContextList\": [\n{\n\"targetReference\":\n{ \"brand\": \"Schneider Electric\", \"country\": \"WW\" , \"market\": \"PRODUCT-MARKET\",  \"channel\" :\"1\", \"project\" :\"STEP\"}\n,\n\"localeReferenceList\": [\n{ \"language\": \"fr\", \"country\": \"FR\" }\n]\n},\n{\n\"targetReference\":\n{ \"brand\": \"Schneider Electric\", \"country\": \"FR\" , \"market\": \"PRODUCT-MARKET\",  \"channel\" :\"4\"}\n,\n\"localeReferenceList\": [\n{ \"language\": \"fr\", \"country\": \"FR\" }\n]\n}\n]\n}",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "{{baseUrl}}/scoped-product-details/search",
                    "host": [
                        "{{baseUrl}}"
                    ],
                    "path": [
                        "scoped-product-details",
                        "search"
                    ]
                },
                "description": "Return data about a given product.  Locale dependent data (also called translation),   localized data (actually localized by country e.g LocalizedString with FR,WW ), target specific data  can be retrieve all in one call"
            },
            "response": [],
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "pm.test(\"Status Test - Expected Error code\", function () {\r",
                            "    pm.expect(pm.response.code).to.equal(400);\r",
                            "});\r",
                            "\r",
                            "//BSL Service -- On removing mandatory fields backend returning 500 instead of 400 Bad Request.\r",
                            "\r",
                            "//difference between Not failing and unexpexted error code recieved -- Not failing means that on passing incorrect paramters still the backend is working fine but unexpected error code means that originally we expected X but instead from backend we got Y."
                        ],
                        "type": "text/javascript"
                    }
                }
            ]
        },
        {
            "name": "DT-F-01",
            "request": {
                "auth": {
                    "type": "bearer",
                    "bearer": [
                        {
                            "key": "token",
                            "value": "{{access_token}}",
                            "type": "string"
                        }
                    ]
                },
                "method": "POST",
                "header": [
                    {
                        "key": "Content-Type",
                        "value": "application/json"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\n   \"productId\":\"QA_TNI16092019\",\n   \"localeList\":[\n      {\n         \"language\":\"en\",\n         \"country\":\"GB\"\n      }\n   ]\n}\n",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "{{baseUrl}}/scoped-product-values/search",
                    "host": [
                        "{{baseUrl}}"
                    ],
                    "path": [
                        "scoped-product-values",
                        "search"
                    ]
                },
                "description": "Return product values (characteristics name and value) of a given product"
            },
            "response": [],
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "exec": [
                            ""
                        ],
                        "type": "text/javascript"
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "pm.test(\"Status test - Positve Response Check\", function () { pm.response.to.have.status(200); });"
                        ],
                        "type": "text/javascript"
                    }
                }
            ]
        },
        {
            "name": "DT-F-02",
            "request": {
                "auth": {
                    "type": "bearer",
                    "bearer": [
                        {
                            "key": "token",
                            "value": "{{access_token}}",
                            "type": "string"
                        }
                    ]
                },
                "method": "POST",
                "header": [
                    {
                        "key": "Content-Type",
                        "value": "application/json"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\n   \"productId\":\"QA_TNI16092019\",\n   \"localeList\":[\n      {\n         \"language\":\"en\",\n         \"country\":\"GB\"\n      }\n   ]\n}\n",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "{{baseUrl}}/scoped-product-values/search",
                    "host": [
                        "{{baseUrl}}"
                    ],
                    "path": [
                        "scoped-product-values",
                        "search"
                    ]
                },
                "description": "Return product values (characteristics name and value) of a given product"
            },
            "response": [],
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "exec": [
                            ""
                        ],
                        "type": "text/javascript"
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "pm.test(\"Status test - Positve Response Check\", function () { pm.response.to.have.status(200); });\r",
                            "\r",
                            "pm.test(\"response must be valid and have a body\", function () {\r",
                            "\r",
                            "     pm.response.to.be.ok;\r",
                            "\r",
                            "     pm.response.to.be.withBody;\r",
                            "\r",
                            "     pm.response.to.be.json;\r",
                            "\r",
                            "     pm.response.to.not.have.jsonBody(\"error\");\r",
                            "\r",
                            "     \r",
                            "\r",
                            "});\r",
                            "\r",
                            "\r",
                            "\r",
                            "\r",
                            "var schema ={\n \"type\": \"object\",\n \"properties\": {\n  \"commercialReference\": {\n   \"type\":[\"string\",\"null\"],\n   \"description\": \"its equal to commercial ref for all ops product. different for EncycloPedia product\"\n  },\n  \"valueList\": {\n   \"type\": \"array\",\n   \"items\": {\n    \"type\": \"object\",\n    \"properties\": {\n     \"significant\": {\n      \"type\": \"boolean\",\n      \"description\": \"Is this product value is significant for at least one node of the offer navigation. usefull only if fetchSignificantValueListOnly=false\"\n     },\n     \"char\": {\n      \"type\": \"object\",\n      \"properties\": {\n       \"name\": {\n        \"type\":[\"string\",\"null\"],\n        \"description\": \"Characteristic's user friendly name not final customer translation see transList\"\n       },\n       \"charId\": {\n        \"type\":[\"string\",\"null\"],\n        \"description\": \"Characteristic's char_id\"\n       },\n       \"transList\": {\n        \"type\": \"array\",\n        \"description\": \"on demande\",\n        \"items\": {\n         \"type\": \"object\",\n         \"properties\": {\n          \"value\": {\n           \"type\":[\"string\",\"null\"],\n           \"description\": \"translated value\"\n          },\n          \"locale\": {\n           \"type\":[\"string\",\"null\"],\n           \"description\": \"official iso locale e.g en_GB fr_FR\"\n          }\n         }\n        }\n       }\n      }\n     },\n     \"subCharList\": {\n      \"type\": \"array\",\n      \"description\": \"the sub char data (ids and translation) in case of a tabular char\",\n      \"items\": {\n       \"type\": \"object\",\n       \"properties\": {\n        \"name\": {\n         \"type\":[\"string\",\"null\"],\n         \"description\": \"Characteristic's user friendly name not final customer translation see transList\"\n        },\n        \"charId\": {\n         \"type\":[\"string\",\"null\"],\n         \"description\": \"Characteristic's char_id\"\n        },\n        \"transList\": {\n         \"type\": \"array\",\n         \"description\": \"on demande\",\n         \"items\": {\n          \"type\": \"object\",\n          \"properties\": {\n           \"value\": {\n            \"type\":[\"string\",\"null\"],\n            \"description\": \"translated value\"\n           },\n           \"locale\": {\n            \"type\":[\"string\",\"null\"],\n            \"description\": \"official iso locale e.g en_GB fr_FR\"\n           }\n          }\n         }\n        }\n       }\n      }\n     },\n     \"lineList\": {\n      \"type\": \"array\",\n      \"description\": \"returned only in case fetchConf fetchLine=true.  line data.\",\n      \"items\": {\n       \"type\": \"object\",\n       \"properties\": {\n        \"transList\": {\n         \"type\": \"array\",\n         \"items\": {\n          \"type\": \"object\",\n          \"properties\": {\n           \"value\": {\n            \"type\":[\"string\",\"null\"],\n            \"description\": \"translated value\"\n           },\n           \"locale\": {\n            \"type\":[\"string\",\"null\"],\n            \"description\": \"official iso locale e.g en_GB fr_FR\"\n           }\n          }\n         }\n        },\n        \"itemList\": {\n         \"type\": \"array\",\n         \"items\": {\n          \"type\": \"object\",\n          \"properties\": {\n           \"charId\": {\n            \"type\":[\"string\",\"null\"],\n            \"description\": \"id of the char described above in ProductValue char or subCharList\"\n           },\n           \"transList\": {\n            \"type\": \"array\",\n            \"items\": {\n             \"type\": \"object\",\n             \"properties\": {\n              \"value\": {\n               \"type\":[\"string\",\"null\"],\n               \"description\": \"translated value\"\n              },\n              \"locale\": {\n               \"type\":[\"string\",\"null\"],\n               \"description\": \"official iso locale e.g en_GB fr_FR\"\n              }\n             }\n            }\n           }\n          },\n          \"description\": \"contains details about value item, data of a simple char or sub char data in a tabluar case\"\n         }\n        }\n       },\n       \"description\": \"Its should contains details about value line. Not implemented yet\"\n      }\n     },\n     \"itemList\": {\n      \"type\": \"array\",\n      \"description\": \"returned only in case fetchConf fetchLine=false\",\n      \"items\": {\n       \"type\": \"object\",\n       \"properties\": {\n        \"charId\": {\n         \"type\":[\"string\",\"null\"],\n         \"description\": \"id of the char described above in ProductValue char or subCharList\"\n        },\n        \"transList\": {\n         \"type\": \"array\",\n         \"items\": {\n          \"type\": \"object\",\n          \"properties\": {\n           \"value\": {\n            \"type\":[\"string\",\"null\"],\n            \"description\": \"translated value\"\n           },\n           \"locale\": {\n            \"type\":[\"string\",\"null\"],\n            \"description\": \"official iso locale e.g en_GB fr_FR\"\n           }\n          }\n         }\n        }\n       },\n       \"description\": \"contains details about value item, data of a simple char or sub char data in a tabluar case\"\n      }\n     }\n    },\n    \"description\": \"producValue is one element from the product datasheet it contains the charname and all the valuation simple or tabular, mono or multi valuatied\"\n   }\n  }\n }\n} ;\r",
                            "\r",
                            "   \r",
                            "\r",
                            "   \r",
                            "\r",
                            "pm.test('Schema is valid', function() {\r",
                            "\r",
                            "  //pm.expect(tv4.validate(pm.response.json, schema)).to.be.true;\r",
                            "\r",
                            "  pm.response.to.have.jsonSchema(schema);\r",
                            "\r",
                            "});\r",
                            "\r",
                            "\r",
                            "\r",
                            "\r",
                            "pm.test(\"Content-Type header is present in request\", () => {\r",
                            "\r",
                            "  pm.request.to.have.header(\"Content-Type\");\r",
                            "\r",
                            "});\r",
                            "\r",
                            "\r",
                            "\r",
                            "pm.test(\"Content-Type header is application/json in Request\", () => {\r",
                            "\r",
                            "  pm.expect(pm.request.headers.get('Content-Type')).to.eql(\"application/json\");\r",
                            "\r",
                            "});\r",
                            "\r",
                            "\r",
                            "\r",
                            "pm.test(\"Content-Type header is present in response\", () => {\r",
                            "\r",
                            "  pm.response.to.have.header(\"Content-Type\");\r",
                            "\r",
                            "});"
                        ],
                        "type": "text/javascript"
                    }
                }
            ]
        },
        {
            "name": "DT-F-03",
            "request": {
                "auth": {
                    "type": "bearer",
                    "bearer": [
                        {
                            "key": "token",
                            "value": "{{access_token}}",
                            "type": "string"
                        }
                    ]
                },
                "method": "POST",
                "header": [
                    {
                        "key": "Content-Type",
                        "value": "application/json"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\n   \"productId\":\"QA_TNI16092019\",\n   \"localeList\":[\n      {\n         \"language\":\"en\",\n         \"country\":\"GB\"\n      }\n   ]\n}\n",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "{{baseUrl}}/scoped-product-values/search",
                    "host": [
                        "{{baseUrl}}"
                    ],
                    "path": [
                        "scoped-product-values",
                        "search"
                    ]
                },
                "description": "Return product values (characteristics name and value) of a given product"
            },
            "response": [],
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "pm.test(\"Status test - Mandatory Field Check\", function () { pm.response.to.have.status(400); });\r",
                            ""
                        ],
                        "type": "text/javascript"
                    }
                }
            ]
        },
        {
            "name": "DT-F-04",
            "request": {
                "auth": {
                    "type": "bearer",
                    "bearer": [
                        {
                            "key": "token",
                            "value": "{{access_token}}",
                            "type": "string"
                        }
                    ]
                },
                "method": "POST",
                "header": [
                    {
                        "key": "Content-Type",
                        "value": "application/json"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\n   \"productId\":\"QA_TNI16092019\",\n   \"localeList\":[\n      {\n         \"language\":\"en\",\n         \"country\":\"GB\"\n      }\n   ]\n}\n",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "{{baseUrl}}/scoped-product-values/search",
                    "host": [
                        "{{baseUrl}}"
                    ],
                    "path": [
                        "scoped-product-values",
                        "search"
                    ]
                },
                "description": "Return product values (characteristics name and value) of a given product"
            },
            "response": [],
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "pm.test(\"Response time is less than 55s\", function () { \r",
                            "\r",
                            "    pm.expect(pm.response.responseTime).to.be.below(55000); \r",
                            "\r",
                            "    // Default APIGEE timeout is 55 sec\r",
                            "\r",
                            "    });"
                        ],
                        "type": "text/javascript"
                    }
                }
            ]
        },
        {
            "name": "DT-F-05",
            "request": {
                "auth": {
                    "type": "bearer",
                    "bearer": [
                        {
                            "key": "token",
                            "value": "{{access_token}}",
                            "type": "string"
                        }
                    ]
                },
                "method": "POST",
                "header": [
                    {
                        "key": "Content-Type",
                        "value": "application/json"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\n   \"productId\":\"QA_TNI16092019\",\n   \"localeList\":[\n      {\n         \"language\":\"en\",\n         \"country\":\"GB\"\n      }\n   ]\n}\n",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "{{baseUrl}}/scoped-product-values/search",
                    "host": [
                        "{{baseUrl}}"
                    ],
                    "path": [
                        "scoped-product-values",
                        "search"
                    ]
                },
                "description": "Return product values (characteristics name and value) of a given product"
            },
            "response": [],
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "pm.test(\"Not failing\", function () {\r",
                            "    pm.expect(true).to.eql(false);\r",
                            "});\r",
                            "//difference between Not failing and unexpexted error code recieved -- Not failing means that on passing incorrect paramters still the backend is working fine but unexpected error code means that originally we expected X but instead from backend we got Y.\r",
                            "\r",
                            "// remove mandatory fields -- error should come but is not.\r",
                            "//Backend should throw error when mandatory fields are not passed -- giving 200 OK\r",
                            "// example -- \"salesDocumentType\": \"ZCV\" is mandatory field for the backend is not being passed , still the bakend is giving response."
                        ],
                        "type": "text/javascript"
                    }
                }
            ]
        },
        {
            "name": "DT-F-06",
            "request": {
                "auth": {
                    "type": "bearer",
                    "bearer": [
                        {
                            "key": "token",
                            "value": "{{access_token}}",
                            "type": "string"
                        }
                    ]
                },
                "method": "POST",
                "header": [
                    {
                        "key": "Content-Type",
                        "value": "application/json"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\n   \"productId\":\"QA_TNI16092019\",\n   \"localeList\":[\n      {\n         \"language\":\"en\",\n         \"country\":\"GB\"\n      }\n   ]\n}\n",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "{{baseUrl}}/scoped-product-values/search",
                    "host": [
                        "{{baseUrl}}"
                    ],
                    "path": [
                        "scoped-product-values",
                        "search"
                    ]
                },
                "description": "Return product values (characteristics name and value) of a given product"
            },
            "response": [],
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "pm.test(\"Status Test - Expected Error code\", function () {\r",
                            "    pm.expect(pm.response.code).to.equal(400);\r",
                            "});\r",
                            "\r",
                            "//BSL Service -- On removing mandatory fields backend returning 500 instead of 400 Bad Request.\r",
                            "\r",
                            "//difference between Not failing and unexpexted error code recieved -- Not failing means that on passing incorrect paramters still the backend is working fine but unexpected error code means that originally we expected X but instead from backend we got Y."
                        ],
                        "type": "text/javascript"
                    }
                }
            ]
        },
        {
            "name": "DT-G-01",
            "request": {
                "auth": {
                    "type": "bearer",
                    "bearer": [
                        {
                            "key": "token",
                            "value": "{{access_token}}",
                            "type": "string"
                        }
                    ]
                },
                "method": "GET",
                "header": [],
                "url": {
                    "raw": "{{baseUrl}}/product-listings?node=DQ_PDS_4810PL4",
                    "host": [
                        "{{baseUrl}}"
                    ],
                    "path": [
                        "product-listings"
                    ],
                    "query": [
                        {
                            "key": "node",
                            "value": "DQ_PDS_4810PL4",
                            "description": "(Required) node id of product Listing"
                        }
                    ]
                },
                "description": "get product listing by its nodeId\n"
            },
            "response": [],
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "exec": [
                            ""
                        ],
                        "type": "text/javascript"
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "pm.test(\"Status test - Positve Response Check\", function () { pm.response.to.have.status(200); });"
                        ],
                        "type": "text/javascript"
                    }
                }
            ]
        },
        {
            "name": "DT-G-02",
            "request": {
                "auth": {
                    "type": "bearer",
                    "bearer": [
                        {
                            "key": "token",
                            "value": "{{access_token}}",
                            "type": "string"
                        }
                    ]
                },
                "method": "GET",
                "header": [],
                "url": {
                    "raw": "{{baseUrl}}/product-listings?node=DQ_PDS_4810PL4",
                    "host": [
                        "{{baseUrl}}"
                    ],
                    "path": [
                        "product-listings"
                    ],
                    "query": [
                        {
                            "key": "node",
                            "value": "DQ_PDS_4810PL4",
                            "description": "(Required) node id of product Listing"
                        }
                    ]
                },
                "description": "get product listing by its nodeId\n"
            },
            "response": [],
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "exec": [
                            ""
                        ],
                        "type": "text/javascript"
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "pm.test(\"Status test - Positve Response Check\", function () { pm.response.to.have.status(200); });\r",
                            "\r",
                            "pm.test(\"response must be valid and have a body\", function () {\r",
                            "\r",
                            "     pm.response.to.be.ok;\r",
                            "\r",
                            "     pm.response.to.be.withBody;\r",
                            "\r",
                            "     pm.response.to.be.json;\r",
                            "\r",
                            "     pm.response.to.not.have.jsonBody(\"error\");\r",
                            "\r",
                            "     \r",
                            "\r",
                            "});\r",
                            "\r",
                            "\r",
                            "\r",
                            "\r",
                            "var schema ={\n \"type\": \"object\",\n \"properties\": {\n  \"parentNodeId\": {\n   \"type\":[\"string\",\"null\"],\n   \"description\": \"the product listing node id of its parent node\"\n  },\n  \"displayOrder\": {\n   \"type\":[\"integer\",\"null\"],\n   \"format\": \"int64\",\n   \"description\": \"the display order of the requested node for the requested country (WW by default if no display order for the requested locale)\"\n  },\n  \"parentCategory\": {\n   \"type\":[\"string\",\"null\"],\n   \"description\": \"the category key of the requested node\"\n  },\n  \"name\": {\n   \"type\":[\"string\",\"null\"],\n   \"description\": \"the name of the requested node for the requested locale (en_GB by default if no translation for the requested locale)\"\n  },\n  \"facets\": {\n   \"type\": \"array\",\n   \"description\": \"the list of facets related to the requested node\",\n   \"items\": {\n    \"type\": \"object\",\n    \"properties\": {\n     \"facetId\": {\n      \"type\":[\"string\",\"null\"],\n      \"description\": \"the id of the characteristic\"\n     },\n     \"displayOrder\": {\n      \"type\":[\"integer\",\"null\"],\n      \"format\": \"int64\",\n      \"description\": \"facet's display order for the requested country\"\n     }\n    }\n   }\n  },\n  \"products\": {\n   \"type\": \"array\",\n   \"description\": \"the list of products related to the requested node\",\n   \"items\": {\n    \"type\": \"object\",\n    \"properties\": {\n     \"commRef\": {\n      \"type\":[\"string\",\"null\"],\n      \"description\": \"product's commercial reference\"\n     },\n     \"displayOrder\": {\n      \"type\":[\"integer\",\"null\"],\n      \"format\": \"int64\",\n      \"description\": \"product's display order for the requested country\"\n     }\n    }\n   }\n  }\n }\n} ;\r",
                            "\r",
                            "   \r",
                            "\r",
                            "   \r",
                            "\r",
                            "pm.test('Schema is valid', function() {\r",
                            "\r",
                            "  //pm.expect(tv4.validate(pm.response.json, schema)).to.be.true;\r",
                            "\r",
                            "  pm.response.to.have.jsonSchema(schema);\r",
                            "\r",
                            "});\r",
                            "\r",
                            "\r",
                            "\r",
                            "\r",
                            "pm.test(\"Content-Type header is present in request\", () => {\r",
                            "\r",
                            "  pm.request.to.have.header(\"Content-Type\");\r",
                            "\r",
                            "});\r",
                            "\r",
                            "\r",
                            "\r",
                            "pm.test(\"Content-Type header is application/json in Request\", () => {\r",
                            "\r",
                            "  pm.expect(pm.request.headers.get('Content-Type')).to.eql(\"application/json\");\r",
                            "\r"
                        ],
                        "type": "text/javascript"
                    }
                }
            ]
        },
        {
            "name": "DT-G-03",
            "request": {
                "auth": {
                    "type": "bearer",
                    "bearer": [
                        {
                            "key": "token",
                            "value": "{{access_token}}",
                            "type": "string"
                        }
                    ]
                },
                "method": "GET",
                "header": [],
                "url": {
                    "raw": "{{baseUrl}}/product-listings?node=DQ_PDS_4810PL4",
                    "host": [
                        "{{baseUrl}}"
                    ],
                    "path": [
                        "product-listings"
                    ],
                    "query": [
                        {
                            "key": "node",
                            "value": "DQ_PDS_4810PL4",
                            "description": "(Required) node id of product Listing"
                        }
                    ]
                },
                "description": "get product listing by its nodeId\n"
            },
            "response": [],
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "pm.test(\"Status test - Mandatory Field Check\", function () { pm.response.to.have.status(400); });\r",
                            ""
                        ],
                        "type": "text/javascript"
                    }
                }
            ]
        },
        {
            "name": "DT-G-04",
            "request": {
                "auth": {
                    "type": "bearer",
                    "bearer": [
                        {
                            "key": "token",
                            "value": "{{access_token}}",
                            "type": "string"
                        }
                    ]
                },
                "method": "GET",
                "header": [],
                "url": {
                    "raw": "{{baseUrl}}/product-listings?node=DQ_PDS_4810PL4",
                    "host": [
                        "{{baseUrl}}"
                    ],
                    "path": [
                        "product-listings"
                    ],
                    "query": [
                        {
                            "key": "node",
                            "value": "DQ_PDS_4810PL4",
                            "description": "(Required) node id of product Listing"
                        }
                    ]
                },
                "description": "get product listing by its nodeId\n"
            },
            "response": [],
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "pm.test(\"Response time is less than 55s\", function () { \r",
                            "\r",
                            "    pm.expect(pm.response.responseTime).to.be.below(55000); \r",
                            "\r",
                            "    // Default APIGEE timeout is 55 sec\r",
                            "\r",
                            "    });"
                        ],
                        "type": "text/javascript"
                    }
                }
            ]
        },
        {
            "name": "DT-G-05",
            "request": {
                "auth": {
                    "type": "bearer",
                    "bearer": [
                        {
                            "key": "token",
                            "value": "{{access_token}}",
                            "type": "string"
                        }
                    ]
                },
                "method": "GET",
                "header": [],
                "url": {
                    "raw": "{{baseUrl}}/product-listings?node=DQ_PDS_4810PL4",
                    "host": [
                        "{{baseUrl}}"
                    ],
                    "path": [
                        "product-listings"
                    ],
                    "query": [
                        {
                            "key": "node",
                            "value": "DQ_PDS_4810PL4",
                            "description": "(Required) node id of product Listing"
                        }
                    ]
                },
                "description": "get product listing by its nodeId\n"
            },
            "response": [],
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "pm.test(\"Not failing\", function () {\r",
                            "    pm.expect(true).to.eql(false);\r",
                            "});\r",
                            "//difference between Not failing and unexpexted error code recieved -- Not failing means that on passing incorrect paramters still the backend is working fine but unexpected error code means that originally we expected X but instead from backend we got Y.\r",
                            "\r",
                            "// remove mandatory fields -- error should come but is not.\r",
                            "//Backend should throw error when mandatory fields are not passed -- giving 200 OK\r",
                            "// example -- \"salesDocumentType\": \"ZCV\" is mandatory field for the backend is not being passed , still the bakend is giving response."
                        ],
                        "type": "text/javascript"
                    }
                }
            ]
        },
        {
            "name": "DT-G-06",
            "request": {
                "auth": {
                    "type": "bearer",
                    "bearer": [
                        {
                            "key": "token",
                            "value": "{{access_token}}",
                            "type": "string"
                        }
                    ]
                },
                "method": "GET",
                "header": [],
                "url": {
                    "raw": "{{baseUrl}}/product-listings?node=DQ_PDS_4810PL4",
                    "host": [
                        "{{baseUrl}}"
                    ],
                    "path": [
                        "product-listings"
                    ],
                    "query": [
                        {
                            "key": "node",
                            "value": "DQ_PDS_4810PL4",
                            "description": "(Required) node id of product Listing"
                        }
                    ]
                },
                "description": "get product listing by its nodeId\n"
            },
            "response": [],
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "pm.test(\"Status Test - Expected Error code\", function () {\r",
                            "    pm.expect(pm.response.code).to.equal(400);\r",
                            "});\r",
                            "\r",
                            "//BSL Service -- On removing mandatory fields backend returning 500 instead of 400 Bad Request.\r",
                            "\r",
                            "//difference between Not failing and unexpexted error code recieved -- Not failing means that on passing incorrect paramters still the backend is working fine but unexpected error code means that originally we expected X but instead from backend we got Y."
                        ],
                        "type": "text/javascript"
                    }
                }
            ]
        },
        {
            "name": "DT-H-01",
            "request": {
                "auth": {
                    "type": "bearer",
                    "bearer": [
                        {
                            "key": "token",
                            "value": "{{access_token}}",
                            "type": "string"
                        }
                    ]
                },
                "method": "POST",
                "header": [
                    {
                        "key": "Content-Type",
                        "value": "application/json"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": " {\n\"scope\": {\n    \"brand\": \"Schneider\",\n    \"country\": \"WW\",\n    \"markets\": \"PRODUCT-MARKET\",\n    \"project\": \"STEP\"\n  }\n  ,\n  \"locale\": {\n    \"isoCountry\": \"FR\",\n    \"isoLanguage\": \"fr\"\n  }\n  ,\n  \"id\": \"DQ_PDS_ID4981COPETITOR_ID1\"\n}\n",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "{{baseUrl}}/competitor-crs/search",
                    "host": [
                        "{{baseUrl}}"
                    ],
                    "path": [
                        "competitor-crs",
                        "search"
                    ]
                },
                "description": "'Return competitor details based on the requested competitor id'\n"
            },
            "response": [],
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "exec": [
                            ""
                        ],
                        "type": "text/javascript"
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "pm.test(\"Status test - Positve Response Check\", function () { pm.response.to.have.status(200); });"
                        ],
                        "type": "text/javascript"
                    }
                }
            ]
        },
        {
            "name": "DT-H-02",
            "request": {
                "auth": {
                    "type": "bearer",
                    "bearer": [
                        {
                            "key": "token",
                            "value": "{{access_token}}",
                            "type": "string"
                        }
                    ]
                },
                "method": "POST",
                "header": [
                    {
                        "key": "Content-Type",
                        "value": "application/json"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": " {\n\"scope\": {\n    \"brand\": \"Schneider\",\n    \"country\": \"WW\",\n    \"markets\": \"PRODUCT-MARKET\",\n    \"project\": \"STEP\"\n  }\n  ,\n  \"locale\": {\n    \"isoCountry\": \"FR\",\n    \"isoLanguage\": \"fr\"\n  }\n  ,\n  \"id\": \"DQ_PDS_ID4981COPETITOR_ID1\"\n}\n",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "{{baseUrl}}/competitor-crs/search",
                    "host": [
                        "{{baseUrl}}"
                    ],
                    "path": [
                        "competitor-crs",
                        "search"
                    ]
                },
                "description": "'Return competitor details based on the requested competitor id'\n"
            },
            "response": [],
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "exec": [
                            ""
                        ],
                        "type": "text/javascript"
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "pm.test(\"Status test - Positve Response Check\", function () { pm.response.to.have.status(200); });\r",
                            "\r",
                            "pm.test(\"response must be valid and have a body\", function () {\r",
                            "\r",
                            "     pm.response.to.be.ok;\r",
                            "\r",
                            "     pm.response.to.be.withBody;\r",
                            "\r",
                            "     pm.response.to.be.json;\r",
                            "\r",
                            "     pm.response.to.not.have.jsonBody(\"error\");\r",
                            "\r",
                            "     \r",
                            "\r",
                            "});\r",
                            "\r",
                            "\r",
                            "\r",
                            "\r",
                            "var schema ={\n \"type\": \"object\",\n \"properties\": {\n  \"id\": {\n   \"type\":[\"string\",\"null\"],\n   \"description\": \"id of competitor\"\n  },\n  \"name\": {\n   \"type\":[\"string\",\"null\"],\n   \"description\": \"name of competitor\"\n  },\n  \"manufacturer\": {\n   \"type\":[\"string\",\"null\"],\n   \"description\": \"manufacturer of competitor\"\n  },\n  \"description\": {\n   \"type\":[\"string\",\"null\"],\n   \"description\": \"description of competitor for the requested localization\"\n  }\n }\n} ;\r",
                            "\r",
                            "   \r",
                            "\r",
                            "   \r",
                            "\r",
                            "pm.test('Schema is valid', function() {\r",
                            "\r",
                            "  //pm.expect(tv4.validate(pm.response.json, schema)).to.be.true;\r",
                            "\r",
                            "  pm.response.to.have.jsonSchema(schema);\r",
                            "\r",
                            "});\r",
                            "\r",
                            "\r",
                            "\r",
                            "\r",
                            "pm.test(\"Content-Type header is present in request\", () => {\r",
                            "\r",
                            "  pm.request.to.have.header(\"Content-Type\");\r",
                            "\r",
                            "});\r",
                            "\r",
                            "\r",
                            "\r",
                            "pm.test(\"Content-Type header is application/json in Request\", () => {\r",
                            "\r",
                            "  pm.expect(pm.request.headers.get('Content-Type')).to.eql(\"application/json\");\r",
                            "\r",
                            "});\r",
                            "\r",
                            "\r",
                            "\r",
                            "pm.test(\"Content-Type header is present in response\", () => {\r",
                            "\r",
                            "  pm.response.to.have.header(\"Content-Type\");\r",
                            "\r",
                            "});"
                        ],
                        "type": "text/javascript"
                    }
                }
            ]
        },
        {
            "name": "DT-H-03",
            "request": {
                "auth": {
                    "type": "bearer",
                    "bearer": [
                        {
                            "key": "token",
                            "value": "{{access_token}}",
                            "type": "string"
                        }
                    ]
                },
                "method": "POST",
                "header": [
                    {
                        "key": "Content-Type",
                        "value": "application/json"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": " {\n\"scope\": {\n    \"brand\": \"Schneider\",\n    \"country\": \"WW\",\n    \"markets\": \"PRODUCT-MARKET\",\n    \"project\": \"STEP\"\n  }\n  ,\n  \"locale\": {\n    \"isoCountry\": \"FR\",\n    \"isoLanguage\": \"fr\"\n  }\n  ,\n  \"id\": \"DQ_PDS_ID4981COPETITOR_ID1\"\n}\n",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "{{baseUrl}}/competitor-crs/search",
                    "host": [
                        "{{baseUrl}}"
                    ],
                    "path": [
                        "competitor-crs",
                        "search"
                    ]
                },
                "description": "'Return competitor details based on the requested competitor id'\n"
            },
            "response": [],
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "pm.test(\"Status test - Mandatory Field Check\", function () { pm.response.to.have.status(400); });\r",
                            ""
                        ],
                        "type": "text/javascript"
                    }
                }
            ]
        },
        {
            "name": "DT-H-04",
            "request": {
                "auth": {
                    "type": "bearer",
                    "bearer": [
                        {
                            "key": "token",
                            "value": "{{access_token}}",
                            "type": "string"
                        }
                    ]
                },
                "method": "POST",
                "header": [
                    {
                        "key": "Content-Type",
                        "value": "application/json"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": " {\n\"scope\": {\n    \"brand\": \"Schneider\",\n    \"country\": \"WW\",\n    \"markets\": \"PRODUCT-MARKET\",\n    \"project\": \"STEP\"\n  }\n  ,\n  \"locale\": {\n    \"isoCountry\": \"FR\",\n    \"isoLanguage\": \"fr\"\n  }\n  ,\n  \"id\": \"DQ_PDS_ID4981COPETITOR_ID1\"\n}\n",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "{{baseUrl}}/competitor-crs/search",
                    "host": [
                        "{{baseUrl}}"
                    ],
                    "path": [
                        "competitor-crs",
                        "search"
                    ]
                },
                "description": "'Return competitor details based on the requested competitor id'\n"
            },
            "response": [],
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "pm.test(\"Response time is less than 55s\", function () { \r",
                            "\r",
                            "    pm.expect(pm.response.responseTime).to.be.below(55000); \r",
                            "\r",
                            "    // Default APIGEE timeout is 55 sec\r",
                            "\r",
                            "    });"
                        ],
                        "type": "text/javascript"
                    }
                }
            ]
        },
        {
            "name": "DT-H-05",
            "request": {
                "auth": {
                    "type": "bearer",
                    "bearer": [
                        {
                            "key": "token",
                            "value": "{{access_token}}",
                            "type": "string"
                        }
                    ]
                },
                "method": "POST",
                "header": [
                    {
                        "key": "Content-Type",
                        "value": "application/json"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": " {\n\"scope\": {\n    \"brand\": \"Schneider\",\n    \"country\": \"WW\",\n    \"markets\": \"PRODUCT-MARKET\",\n    \"project\": \"STEP\"\n  }\n  ,\n  \"locale\": {\n    \"isoCountry\": \"FR\",\n    \"isoLanguage\": \"fr\"\n  }\n  ,\n  \"id\": \"DQ_PDS_ID4981COPETITOR_ID1\"\n}\n",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "{{baseUrl}}/competitor-crs/search",
                    "host": [
                        "{{baseUrl}}"
                    ],
                    "path": [
                        "competitor-crs",
                        "search"
                    ]
                },
                "description": "'Return competitor details based on the requested competitor id'\n"
            },
            "response": [],
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "pm.test(\"Not failing\", function () {\r",
                            "    pm.expect(true).to.eql(false);\r",
                            "});\r",
                            "//difference between Not failing and unexpexted error code recieved -- Not failing means that on passing incorrect paramters still the backend is working fine but unexpected error code means that originally we expected X but instead from backend we got Y.\r",
                            "\r",
                            "// remove mandatory fields -- error should come but is not.\r",
                            "//Backend should throw error when mandatory fields are not passed -- giving 200 OK\r",
                            "// example -- \"salesDocumentType\": \"ZCV\" is mandatory field for the backend is not being passed , still the bakend is giving response."
                        ],
                        "type": "text/javascript"
                    }
                }
            ]
        },
        {
            "name": "DT-H-06",
            "request": {
                "auth": {
                    "type": "bearer",
                    "bearer": [
                        {
                            "key": "token",
                            "value": "{{access_token}}",
                            "type": "string"
                        }
                    ]
                },
                "method": "POST",
                "header": [
                    {
                        "key": "Content-Type",
                        "value": "application/json"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": " {\n\"scope\": {\n    \"brand\": \"Schneider\",\n    \"country\": \"WW\",\n    \"markets\": \"PRODUCT-MARKET\",\n    \"project\": \"STEP\"\n  }\n  ,\n  \"locale\": {\n    \"isoCountry\": \"FR\",\n    \"isoLanguage\": \"fr\"\n  }\n  ,\n  \"id\": \"DQ_PDS_ID4981COPETITOR_ID1\"\n}\n",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "{{baseUrl}}/competitor-crs/search",
                    "host": [
                        "{{baseUrl}}"
                    ],
                    "path": [
                        "competitor-crs",
                        "search"
                    ]
                },
                "description": "'Return competitor details based on the requested competitor id'\n"
            },
            "response": [],
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "pm.test(\"Status Test - Expected Error code\", function () {\r",
                            "    pm.expect(pm.response.code).to.equal(400);\r",
                            "});\r",
                            "\r",
                            "//BSL Service -- On removing mandatory fields backend returning 500 instead of 400 Bad Request.\r",
                            "\r",
                            "//difference between Not failing and unexpexted error code recieved -- Not failing means that on passing incorrect paramters still the backend is working fine but unexpected error code means that originally we expected X but instead from backend we got Y."
                        ],
                        "type": "text/javascript"
                    }
                }
            ]
        },
        {
            "name": "DT-I-01",
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "Content-Type",
                        "value": "application/json"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\n  \"scope\": {\n    \"brand\": \"Schneider\",\n    \"channel\": \"4\",\n    \"country\": \"FR\",\n    \"markets\": \"PRODUCT-MARKET\"\n  },\n  \"locale\": {\n    \"isoLanguage\": \"fr\",\n    \"isoCountry\": \"FR\"\n  },\n  \"competitorId\": \"QA_VSH_BSL21.21_BSL-4983_S1\"\n}",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "{{baseUrl}}/competitor-crs/relationships/search",
                    "host": [
                        "{{baseUrl}}"
                    ],
                    "path": [
                        "competitor-crs",
                        "relationships",
                        "search"
                    ]
                },
                "description": "Return relationship data of a given competitorcr.\n"
            },
            "response": [],
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "exec": [
                            ""
                        ],
                        "type": "text/javascript"
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "pm.test(\"Status test - Positve Response Check\", function () { pm.response.to.have.status(200); });"
                        ],
                        "type": "text/javascript"
                    }
                }
            ]
        },
        {
            "name": "DT-I-02",
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "Content-Type",
                        "value": "application/json"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\n  \"scope\": {\n    \"brand\": \"Schneider\",\n    \"channel\": \"4\",\n    \"country\": \"FR\",\n    \"markets\": \"PRODUCT-MARKET\"\n  },\n  \"locale\": {\n    \"isoLanguage\": \"fr\",\n    \"isoCountry\": \"FR\"\n  },\n  \"competitorId\": \"QA_VSH_BSL21.21_BSL-4983_S1\"\n}",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "{{baseUrl}}/competitor-crs/relationships/search",
                    "host": [
                        "{{baseUrl}}"
                    ],
                    "path": [
                        "competitor-crs",
                        "relationships",
                        "search"
                    ]
                },
                "description": "Return relationship data of a given competitorcr.\n"
            },
            "response": [],
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "exec": [
                            ""
                        ],
                        "type": "text/javascript"
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "pm.test(\"Status test - Positve Response Check\", function () { pm.response.to.have.status(200); });\r",
                            "\r",
                            "pm.test(\"response must be valid and have a body\", function () {\r",
                            "\r",
                            "     pm.response.to.be.ok;\r",
                            "\r",
                            "     pm.response.to.be.withBody;\r",
                            "\r",
                            "     pm.response.to.be.json;\r",
                            "\r",
                            "     pm.response.to.not.have.jsonBody(\"error\");\r",
                            "\r",
                            "     \r",
                            "\r",
                            "});\r",
                            "\r",
                            "\r",
                            "\r",
                            "\r",
                            "var schema ={\n \"type\": \"object\",\n \"properties\": {\n  \"competitorId\": {\n   \"type\":[\"string\",\"null\"],\n   \"description\": \"id of the competitorcr(the requested id)\"\n  },\n  \"relationships\": {\n   \"type\": \"array\",\n   \"description\": \"array of COMPETITOR_REL for the requested competitor_cr.\",\n   \"items\": {\n    \"type\": \"object\",\n    \"properties\": {\n     \"competitorQty\": {\n      \"type\":[\"integer\",\"null\"]\n     },\n     \"targets\": {\n      \"type\": \"array\",\n      \"items\": {\n       \"type\": \"object\",\n       \"properties\": {\n        \"commRef\": {\n         \"type\":[\"string\",\"null\"]\n        },\n        \"id\": {\n         \"type\":[\"string\",\"null\"]\n        },\n        \"quantity\": {\n         \"type\":[\"integer\",\"null\"]\n        },\n        \"ranking\": {\n         \"type\":[\"integer\",\"null\"],\n         \"description\": \"RANKING for the requested target country\"\n        },\n        \"audience\": {\n         \"type\":[\"string\",\"null\"],\n         \"description\": \"AUDIENCE name for the requested target country\"\n        },\n        \"comment\": {\n         \"type\":[\"string\",\"null\"],\n         \"description\": \"COMMENT for the requested target country / locale\"\n        }\n       }\n      }\n     }\n    }\n   }\n  }\n }\n} ;\r",
                            "\r",
                            "   \r",
                            "\r",
                            "   \r",
                            "\r",
                            "pm.test('Schema is valid', function() {\r",
                            "\r",
                            "  //pm.expect(tv4.validate(pm.response.json, schema)).to.be.true;\r",
                            "\r",
                            "  pm.response.to.have.jsonSchema(schema);\r",
                            "\r",
                            "});\r",
                            "\r",
                            "\r",
                            "\r",
                            "\r",
                            "pm.test(\"Content-Type header is present in request\", () => {\r",
                            "\r",
                            "  pm.request.to.have.header(\"Content-Type\");\r",
                            "\r",
                            "});\r",
                            "\r",
                            "\r",
                            "\r",
                            "pm.test(\"Content-Type header is application/json in Request\", () => {\r",
                            "\r",
                            "  pm.expect(pm.request.headers.get('Content-Type')).to.eql(\"application/json\");\r",
                            "\r",
                            "});\r",
                            "\r",
                            "\r",
                            "\r",
                            "pm.test(\"Content-Type header is present in response\", () => {\r",
                            "\r",
                            "  pm.response.to.have.header(\"Content-Type\");\r",
                            "\r",
                            "});"
                        ],
                        "type": "text/javascript"
                    }
                }
            ]
        },
        {
            "name": "DT-I-03",
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "Content-Type",
                        "value": "application/json"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\n  \"scope\": {\n    \"brand\": \"Schneider\",\n    \"channel\": \"4\",\n    \"country\": \"FR\",\n    \"markets\": \"PRODUCT-MARKET\"\n  },\n  \"locale\": {\n    \"isoLanguage\": \"fr\",\n    \"isoCountry\": \"FR\"\n  },\n  \"competitorId\": \"QA_VSH_BSL21.21_BSL-4983_S1\"\n}",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "{{baseUrl}}/competitor-crs/relationships/search",
                    "host": [
                        "{{baseUrl}}"
                    ],
                    "path": [
                        "competitor-crs",
                        "relationships",
                        "search"
                    ]
                },
                "description": "Return relationship data of a given competitorcr.\n"
            },
            "response": [],
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "pm.test(\"Status test - Mandatory Field Check\", function () { pm.response.to.have.status(400); });\r",
                            ""
                        ],
                        "type": "text/javascript"
                    }
                }
            ]
        },
        {
            "name": "DT-I-04",
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "Content-Type",
                        "value": "application/json"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\n  \"scope\": {\n    \"brand\": \"Schneider\",\n    \"channel\": \"4\",\n    \"country\": \"FR\",\n    \"markets\": \"PRODUCT-MARKET\"\n  },\n  \"locale\": {\n    \"isoLanguage\": \"fr\",\n    \"isoCountry\": \"FR\"\n  },\n  \"competitorId\": \"QA_VSH_BSL21.21_BSL-4983_S1\"\n}",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "{{baseUrl}}/competitor-crs/relationships/search",
                    "host": [
                        "{{baseUrl}}"
                    ],
                    "path": [
                        "competitor-crs",
                        "relationships",
                        "search"
                    ]
                },
                "description": "Return relationship data of a given competitorcr.\n"
            },
            "response": [],
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "pm.test(\"Response time is less than 55s\", function () { \r",
                            "\r",
                            "    pm.expect(pm.response.responseTime).to.be.below(55000); \r",
                            "\r",
                            "    // Default APIGEE timeout is 55 sec\r",
                            "\r",
                            "    });"
                        ],
                        "type": "text/javascript"
                    }
                }
            ]
        },
        {
            "name": "DT-I-05",
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "Content-Type",
                        "value": "application/json"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\n  \"scope\": {\n    \"brand\": \"Schneider\",\n    \"channel\": \"4\",\n    \"country\": \"FR\",\n    \"markets\": \"PRODUCT-MARKET\"\n  },\n  \"locale\": {\n    \"isoLanguage\": \"fr\",\n    \"isoCountry\": \"FR\"\n  },\n  \"competitorId\": \"QA_VSH_BSL21.21_BSL-4983_S1\"\n}",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "{{baseUrl}}/competitor-crs/relationships/search",
                    "host": [
                        "{{baseUrl}}"
                    ],
                    "path": [
                        "competitor-crs",
                        "relationships",
                        "search"
                    ]
                },
                "description": "Return relationship data of a given competitorcr.\n"
            },
            "response": [],
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "pm.test(\"Not failing\", function () {\r",
                            "    pm.expect(true).to.eql(false);\r",
                            "});\r",
                            "//difference between Not failing and unexpexted error code recieved -- Not failing means that on passing incorrect paramters still the backend is working fine but unexpected error code means that originally we expected X but instead from backend we got Y.\r",
                            "\r",
                            "// remove mandatory fields -- error should come but is not.\r",
                            "//Backend should throw error when mandatory fields are not passed -- giving 200 OK\r",
                            "// example -- \"salesDocumentType\": \"ZCV\" is mandatory field for the backend is not being passed , still the bakend is giving response."
                        ],
                        "type": "text/javascript"
                    }
                }
            ]
        },
        {
            "name": "DT-I-06",
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "Content-Type",
                        "value": "application/json"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\n  \"scope\": {\n    \"brand\": \"Schneider\",\n    \"channel\": \"4\",\n    \"country\": \"FR\",\n    \"markets\": \"PRODUCT-MARKET\"\n  },\n  \"locale\": {\n    \"isoLanguage\": \"fr\",\n    \"isoCountry\": \"FR\"\n  },\n  \"competitorId\": \"QA_VSH_BSL21.21_BSL-4983_S1\"\n}",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "{{baseUrl}}/competitor-crs/relationships/search",
                    "host": [
                        "{{baseUrl}}"
                    ],
                    "path": [
                        "competitor-crs",
                        "relationships",
                        "search"
                    ]
                },
                "description": "Return relationship data of a given competitorcr.\n"
            },
            "response": [],
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "pm.test(\"Status Test - Expected Error code\", function () {\r",
                            "    pm.expect(pm.response.code).to.equal(400);\r",
                            "});\r",
                            "\r",
                            "//BSL Service -- On removing mandatory fields backend returning 500 instead of 400 Bad Request.\r",
                            "\r",
                            "//difference between Not failing and unexpexted error code recieved -- Not failing means that on passing incorrect paramters still the backend is working fine but unexpected error code means that originally we expected X but instead from backend we got Y."
                        ],
                        "type": "text/javascript"
                    }
                }
            ]
        }
    ],
    "auth": {
        "type": "oauth2"
    },
    "variable": [
        {
            "key": "baseUrl",
            "value": "https://api.qa.se.com/v3/reference-data/product/pim-product",
            "type": "string"
        }
    ]
}